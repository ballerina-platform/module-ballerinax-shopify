// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

// Copyright (c) 2025, WSO2 LLC. (http://www.wso2.com).
//
// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

import ballerina/http;

# As the primary way that apps interact with Shopify, the Admin API allows you to add your own features to the Shopify user experience. Considerations when using the Shopify Admin include:
# 
# - The Admin API supports both [GraphQL](https://shopify.dev/docs/api/admin-graphql) and [REST](https://shopify.dev/docs/api/admin-rest).
# - This is a [versioned API](https://shopify.dev/docs/api/usage/versioning). Updates are released quarterly and supported API versions are listed in the [release notes](https://shopify.dev/docs/api/release-notes).
# - Apps must explicitly request the relevant [access scopes](https://shopify.dev/docs/api/usage/access-scopes) from the user during installation.
# - Apps must [authenticate](https://shopify.dev/docs/apps/auth) to interact with the Admin API.
# - The Admin API enforces [rate limits](https://shopify.dev/docs/api/usage/rate-limits) on all requests. Note that there are different rate-limiting methods for GraphQL and REST. All apps connecting to the Admin API are subject to [Shopifyâ€™s API Terms of Service](https://www.shopify.com/legal/api-terms).
#     
# 
# ---
public isolated client class Client {
    final http:Client clientEp;
    final readonly & ApiKeysConfig apiKeyConfig;
    # Gets invoked to initialize the `connector`.
    #
    # + apiKeyConfig - API keys for authorization 
    # + config - The configurations to be used when initializing the `connector` 
    # + serviceUrl - URL of the target service 
    # + return - An error if connector initialization failed 
    public isolated function init(ApiKeysConfig apiKeyConfig, string serviceUrl, ConnectionConfig config =  {}) returns error? {
        http:ClientConfiguration httpClientConfig = {httpVersion: config.httpVersion, timeout: config.timeout, forwarded: config.forwarded, poolConfig: config.poolConfig, compression: config.compression, circuitBreaker: config.circuitBreaker, retryConfig: config.retryConfig, validation: config.validation};
        do {
            if config.http1Settings is ClientHttp1Settings {
                ClientHttp1Settings settings = check config.http1Settings.ensureType(ClientHttp1Settings);
                httpClientConfig.http1Settings = {...settings};
            }
            if config.http2Settings is http:ClientHttp2Settings {
                httpClientConfig.http2Settings = check config.http2Settings.ensureType(http:ClientHttp2Settings);
            }
            if config.cache is http:CacheConfig {
                httpClientConfig.cache = check config.cache.ensureType(http:CacheConfig);
            }
            if config.responseLimits is http:ResponseLimitConfigs {
                httpClientConfig.responseLimits = check config.responseLimits.ensureType(http:ResponseLimitConfigs);
            }
            if config.secureSocket is http:ClientSecureSocket {
                httpClientConfig.secureSocket = check config.secureSocket.ensureType(http:ClientSecureSocket);
            }
            if config.proxy is http:ProxyConfig {
                httpClientConfig.proxy = check config.proxy.ensureType(http:ProxyConfig);
            }
        }
        http:Client httpEp = check new (serviceUrl, httpClientConfig);
        self.clientEp = httpEp;
        self.apiKeyConfig = apiKeyConfig.cloneReadOnly();
        return;
    }

    # Accepts a cancellation request
    #
    # + fulfillmentOrderId - The ID of the fulfillment order
    # + headers - Headers to be sent with the request 
    # + return - Accepts a cancellation request sent to a fulfillment service and updates the fulfillment order / Accepts a cancellation request sent to a fulfillment service and updates the fulfillment order 
    remote isolated function acceptsACancellationRequest(string fulfillmentOrderId, CancellationRequestAcceptJsonBody payload, map<string|string[]> headers = {}) returns CancellationResponse|error {
        string resourcePath = string `/admin/api/2025-01/fulfillment_orders/${getEncodedUri(fulfillmentOrderId)}/cancellation_request/accept.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Accepts a fulfillment request
    #
    # + fulfillmentOrderId - The ID of the fulfillment order
    # + headers - Headers to be sent with the request 
    # + return - Accepts a fulfillment request sent to a fulfillment service and updates the fulfillment order / Accepts a fulfillment request sent to a fulfillment service and updates the fulfillment order 
    remote isolated function acceptsAFulfillmentRequest(string fulfillmentOrderId, FulfillmentRequestAcceptJsonBody payload, map<string|string[]> headers = {}) returns AcceptFulfillmentResponse|error {
        string resourcePath = string `/admin/api/2025-01/fulfillment_orders/${getEncodedUri(fulfillmentOrderId)}/fulfillment_request/accept.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Adds a product to a custom collection
    #
    # + headers - Headers to be sent with the request 
    # + return - Create a new link between an existing product and an existing collection / Create a new link between an existing product and an existing collection 
    remote isolated function addsAProductToACustomCollection(ApiVersionCollectsJsonBody payload, map<string|string[]> headers = {}) returns ProductToCollectionResponse|error {
        string resourcePath = string `/admin/api/2025-01/collects.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Adjusts the inventory level of an inventory item at a location
    #
    # + headers - Headers to be sent with the request 
    # + return - Adjust the available quantity of an inventory item by 5 at a single location / Adjust the available quantity of an inventory item by 5 at a single location 
    remote isolated function adjustsTheInventoryLevelOfAnInventoryItemAtALocation(InventoryLevelsAdjustJsonBody payload, map<string|string[]> headers = {}) returns InventoryLevel|error {
        string resourcePath = string `/admin/api/2025-01/inventory_levels/adjust.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Applies a fulfillment hold on an open fulfillment order
    #
    # + fulfillmentOrderId - The ID of the fulfillment order
    # + headers - Headers to be sent with the request 
    # + return - Move a fulfillment order to a new location / Move a fulfillment order to a new location 
    remote isolated function appliesAFulfillmentHoldOnAnOpenFulfillmentOrder(string fulfillmentOrderId, FulfillmentOrderIdHoldJsonBody payload, map<string|string[]> headers = {}) returns MoveFulfillmentOrderResponse|error {
        string resourcePath = string `/admin/api/2025-01/fulfillment_orders/${getEncodedUri(fulfillmentOrderId)}/hold.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Approves a comment
    #
    # + headers - Headers to be sent with the request 
    # + return - Approve a comment and publish it to the blog / Approve a comment and publish it to the blog 
    remote isolated function approvesAComment(string commentId, record {} payload, map<string|string[]> headers = {}) returns ApproveCommentResponse|error {
        string resourcePath = string `/admin/api/2025-01/comments/${getEncodedUri(commentId)}/approve.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Calculates a refund
    #
    # + headers - Headers to be sent with the request 
    # + return - Calculate the refund for a line item and shipping / Calculate a refund for a partial amount of shipping / Calculate the refund without specifying currency / Calculate the refund for a line item and shipping / Calculate a refund for a partial amount of shipping / Calculate the refund without specifying currency 
    remote isolated function calculatesARefund(string orderId, RefundsCalculateJsonBody payload, map<string|string[]> headers = {}) returns CalculateRefund|error {
        string resourcePath = string `/admin/api/2025-01/orders/${getEncodedUri(orderId)}/refunds/calculate.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Cancel a fulfillment order
    #
    # + fulfillmentOrderId - The ID of the fulfillment order
    # + headers - Headers to be sent with the request 
    # + return - Cancel a fulfillment order / Cancel a fulfillment order 
    remote isolated function cancelAFulfillmentOrder(string fulfillmentOrderId, FulfillmentOrderIdCancelJsonBody payload, map<string|string[]> headers = {}) returns CancelFulfillmentOrder|error {
        string resourcePath = string `/admin/api/2025-01/fulfillment_orders/${getEncodedUri(fulfillmentOrderId)}/cancel.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Cancel an order
    #
    # + headers - Headers to be sent with the request 
    # + return - Cancel an order 
    remote isolated function cancelAnOrder(string orderId, record {} payload, map<string|string[]> headers = {}) returns OrderResponse|error {
        string resourcePath = string `/admin/api/2025-01/orders/${getEncodedUri(orderId)}/cancel.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Cancels a fulfillment
    #
    # + headers - Headers to be sent with the request 
    # + return - Cancel a fulfillment / Cancel a fulfillment 
    remote isolated function cancelsAFulfillment(string fulfillmentId, record {} payload, map<string|string[]> headers = {}) returns CancelFulfillment|error {
        string resourcePath = string `/admin/api/2025-01/fulfillments/${getEncodedUri(fulfillmentId)}/cancel.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Cancels a recurring application charge
    #
    # + recurringApplicationChargeId - The ID of the recurring application charge.
    # + headers - Headers to be sent with the request 
    # + return - Cancel the current recurring charge for a shop / Cancel the current recurring charge for a shop 
    remote isolated function cancelsARecurringApplicationCharge(string recurringApplicationChargeId, string payload, map<string|string[]> headers = {}) returns string|error {
        string resourcePath = string `/admin/api/2025-01/recurring_application_charges/${getEncodedUri(recurringApplicationChargeId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        return self.clientEp->delete(resourcePath, request, headers);
    }

    # Close an order
    #
    # + headers - Headers to be sent with the request 
    # + return - Close an order / Close an order 
    remote isolated function closeAnOrder(string orderId, record {} payload, map<string|string[]> headers = {}) returns CloseOrderResponse|error {
        string resourcePath = string `/admin/api/2025-01/orders/${getEncodedUri(orderId)}/close.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Complete a draft order
    #
    # + draftOrderId - The ID of the draft order
    # + headers - Headers to be sent with the request 
    # + return - Complete a draft order, marking it as paid / Complete a draft order, marking it as pending / Complete a draft order, marking it as paid / Complete a draft order, marking it as pending 
    remote isolated function completeADraftOrder(string draftOrderId, string payload, map<string|string[]> headers = {}) returns CompleteDraftOrder|error {
        string resourcePath = string `/admin/api/2025-01/draft_orders/${getEncodedUri(draftOrderId)}/complete.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Completes a checkout
    #
    # + headers - Headers to be sent with the request 
    # + return - Complete a checkout without requiring payment / Complete a checkout without requiring payment 
    remote isolated function completesACheckout(string token, record {} payload, map<string|string[]> headers = {}) returns CompleteCheckoutResponse|error {
        string resourcePath = string `/admin/api/2025-01/checkouts/${getEncodedUri(token)}/complete.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Connects an inventory item to a location
    #
    # + headers - Headers to be sent with the request 
    # + return - Connect an inventory item to a location / Connect an inventory item to a location 
    remote isolated function connectsAnInventoryItemToALocation(InventoryLevelsConnectJsonBody payload, map<string|string[]> headers = {}) returns ConnectInventoryItem|error {
        string resourcePath = string `/admin/api/2025-01/inventory_levels/connect.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Counts the number of payments attempted on a checkout
    #
    # + headers - Headers to be sent with the request 
    # + return - Retrieve the number of payments on a checkout 
    remote isolated function countsTheNumberOfPaymentsAttemptedOnACheckout(string token, map<string|string[]> headers = {}) returns ObjectCount|error {
        string resourcePath = string `/admin/api/2025-01/checkouts/${getEncodedUri(token)}/payments/count.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Create a collection listing to publish a collection to your app
    #
    # + collectionListingId - The ID of the product collection
    # + headers - Headers to be sent with the request 
    # + return - Create a collection listing to publish a collection to your app / Create a collection listing to publish a collection to your app 
    remote isolated function createACollectionListingToPublishACollectionToYourApp(string collectionListingId, CollectionListingscollectionListingIdJsonBody payload, map<string|string[]> headers = {}) returns CollectionListing|error {
        string resourcePath = string `/admin/api/2025-01/collection_listings/${getEncodedUri(collectionListingId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Create a metafield
    #
    # + headers - Headers to be sent with the request 
    remote isolated function createAMetafield(string ownerId, string ownerResource, OwnerResourceMetafieldsJsonBody payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/admin/api/2025-01/${getEncodedUri(ownerId)}/${getEncodedUri(ownerResource)}/metafields.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Create a mobile platform application
    #
    # + headers - Headers to be sent with the request 
    # + return - Create a mobile platform application for Android / Create mobile platform application for iOS / Create a mobile platform application for Android / Create mobile platform application for iOS 
    remote isolated function createAMobilePlatformApplication(ApiVersionMobilePlatformApplicationsJsonBody payload, map<string|string[]> headers = {}) returns MobilePlatformApplication|error {
        string resourcePath = string `/admin/api/2025-01/mobile_platform_applications.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Create a new Blog
    #
    # + headers - Headers to be sent with the request 
    # + return - Create a new empty blog / Create a new empty blog with a metafield / Create a new empty blog / Create a new empty blog with a metafield 
    remote isolated function createANewBlog(ApiVersionBlogsJsonBody payload, map<string|string[]> headers = {}) returns CreateBlogResponse|error {
        string resourcePath = string `/admin/api/2025-01/blogs.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Create a new DraftOrder
    #
    # + headers - Headers to be sent with the request 
    # + return - <span id="create-a-percent-discount-on-a-line-item-{{ current_version }}">Create a draft order with a percent discount on a line item</span> / Create a simple draft order with only a product variant ID. / <span id="create-a-draft-order-with-a-discount-{{ current_version }}">Create a draft order with a discount</span> / <span id="create-custom-draft-order-{{ current_version }}">Create custom draft order</span> / Create a draft order with a discounted line item / <span id="create-a-percent-discount-on-a-line-item-{{ current_version }}">Create a draft order with a percent discount on a line item</span> / Create a simple draft order with only a product variant ID. / <span id="create-a-draft-order-with-a-discount-{{ current_version }}">Create a draft order with a discount</span> / <span id="create-custom-draft-order-{{ current_version }}">Create custom draft order</span> / Create a draft order with a discounted line item 
    remote isolated function createANewDraftorder(ApiVersionDraftOrdersJsonBody payload, map<string|string[]> headers = {}) returns CreateDraftOrder|error {
        string resourcePath = string `/admin/api/2025-01/draft_orders.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Create a new FulfillmentService
    #
    # + headers - Headers to be sent with the request 
    # + return - Create a fulfillment service / Create a fulfillment service 
    remote isolated function createANewFulfillmentservice(ApiVersionFulfillmentServicesJsonBody payload, map<string|string[]> headers = {}) returns CreateFulfillmentService|error {
        string resourcePath = string `/admin/api/2025-01/fulfillment_services.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Create a new Page
    #
    # + headers - Headers to be sent with the request 
    # + return - Create a page with a metafield / Create a page with HTML markup / Create an unpublished page / Create a page with a metafield / Create a page with HTML markup / Create an unpublished page 
    remote isolated function createANewPage(ApiVersionPagesJsonBody payload, map<string|string[]> headers = {}) returns PageResponse|error {
        string resourcePath = string `/admin/api/2025-01/pages.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Create a new Product Image
    #
    # + headers - Headers to be sent with the request 
    # + return - Create a new product image with included image data as attachment / Create a new product image and make it the main image / Create a new product image using a source URL that will be downloaded by Shopify / Create a new product image and attach it to product variants / <span id="metafield">Create a new product image with a metafield</span> / Create a new product image with included image data as attachment / Create a new product image and make it the main image / Create a new product image using a source URL that will be downloaded by Shopify / Create a new product image and attach it to product variants / <span id="metafield">Create a new product image with a metafield</span> 
    remote isolated function createANewProductImage(string productId, ProductIdImagesJsonBody payload, map<string|string[]> headers = {}) returns CreateProductImage|error {
        string resourcePath = string `/admin/api/2025-01/products/${getEncodedUri(productId)}/images.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Create a new Product ResourceFeedback
    #
    # + headers - Headers to be sent with the request 
    # + return - Create a new Product ResourceFeedback 
    remote isolated function createANewProductResourcefeedback(string productId, ProductIdResourceFeedbackJsonBody payload, map<string|string[]> headers = {}) returns ResourceFeedbackList|error {
        string resourcePath = string `/admin/api/2025-01/products/${getEncodedUri(productId)}/resource_feedback.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Create a new Product Variant
    #
    # + headers - Headers to be sent with the request 
    # + return - Create a new product variant with an image / Create a new product variant with a metafield / Create a new product variant / Create a new product variant with an image / Create a new product variant with a metafield / Create a new product variant 
    remote isolated function createANewProductVariant(string productId, CreateProductVariant payload, map<string|string[]> headers = {}) returns CreateProductVariant|error {
        string resourcePath = string `/admin/api/2025-01/products/${getEncodedUri(productId)}/variants.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Create a new ResourceFeedback
    #
    # + headers - Headers to be sent with the request 
    # + return - Create a shop feedback record indicating the Shop is usable by your app / Create a shop feedback record indicating a problem specific to your app / Create a shop feedback record indicating the Shop is usable by your app / Create a shop feedback record indicating a problem specific to your app 
    remote isolated function createANewResourcefeedback(ApiVersionResourceFeedbackJsonBody payload, map<string|string[]> headers = {}) returns CreateShopFeedback|error {
        string resourcePath = string `/admin/api/2025-01/resource_feedback.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Create a new Webhook
    #
    # + headers - Headers to be sent with the request 
    # + return - Subscribe to order creation webhooks / Subscribe to order creation webhooks 
    remote isolated function createANewWebhook(CreateWebhook payload, map<string|string[]> headers = {}) returns SubscribeOrderCreation|error {
        string resourcePath = string `/admin/api/2025-01/webhooks.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Create a product listing to publish a product to your app
    #
    # + headers - Headers to be sent with the request 
    # + return - Create a product listing to publish a product to your app / Create a product listing to publish a product to your app 
    remote isolated function createAProductListingToPublishAProductToYourApp(string productListingId, ProductListingsproductListingIdJsonBody payload, map<string|string[]> headers = {}) returns ProductListingAppResponse|error {
        string resourcePath = string `/admin/api/2025-01/product_listings/${getEncodedUri(productListingId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Create an order
    #
    # + headers - Headers to be sent with the request 
    # + return - Create a partially paid order with a new customer and addresses / Create a comprehensive order / Create an order with tax lines split across taxable line items / Create a simple order with only a product variant ID / Create a simple order without sending an order receipt or a fulfillment receipt / Create a simple order, sending an order confirmation and a shipping confirmation to the customer / Create a pending order with an existing customer / Create a simple order and fulfill it / Create a partially paid order with a new customer and addresses / Create a comprehensive order / Create an order with tax lines split across taxable line items / Create a simple order with only a product variant ID / Create a simple order without sending an order receipt or a fulfillment receipt / Create a simple order, sending an order confirmation and a shipping confirmation to the customer / Create a pending order with an existing customer / Create a simple order and fulfill it 
    remote isolated function createAnOrder(CreateOrder payload, map<string|string[]> headers = {}) returns OrderResponse|error {
        string resourcePath = string `/admin/api/2025-01/orders.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates a carrier service
    #
    # + headers - Headers to be sent with the request 
    # + return - Create a carrier service / Create a carrier service 
    remote isolated function createsACarrierService(ApiVersionCarrierServicesJsonBody payload, map<string|string[]> headers = {}) returns CreateCarrierService|error {
        string resourcePath = string `/admin/api/2025-01/carrier_services.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates a checkout
    #
    # + headers - Headers to be sent with the request 
    # + return - Create a checkout with a product variant and quantity / Create a checkout without any line items / Create a checkout with a product variant and quantity / Create a checkout without any line items 
    remote isolated function createsACheckout(ApiVersionCheckoutsJsonBody payload, map<string|string[]> headers = {}) returns CreateCheckoutResponse|error {
        string resourcePath = string `/admin/api/2025-01/checkouts.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates a comment for an article
    #
    # + headers - Headers to be sent with the request 
    # + return - Create a comment for an article of a blog using basic Textile markup / Create a comment for an article of a blog using basic Textile markup 
    remote isolated function createsACommentForAnArticle(ApiVersionCommentsJsonBody payload, map<string|string[]> headers = {}) returns ArticleComment|error {
        string resourcePath = string `/admin/api/2025-01/comments.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates a country
    #
    # + headers - Headers to be sent with the request 
    # + return - Create a country using a custom tax rate  / Create a country using Shopify's tax rate for it / Create a country using a custom tax rate  / Create a country using Shopify's tax rate for it 
    remote isolated function createsACountry(ApiVersionCountriesJsonBody payload, map<string|string[]> headers = {}) returns CreateCountry|error {
        string resourcePath = string `/admin/api/2025-01/countries.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates a custom collection
    #
    # + headers - Headers to be sent with the request 
    # + return - Create an unpublished custom collection / Create a custom collection / Create a collection that contains a product by including a collect / Create a custom collection with a base64-encoded image / Create a custom collection with a metafield / Create a custom collection with an image, which will be uploaded to Shopify / Create an unpublished custom collection / Create a custom collection / Create a collection that contains a product by including a collect / Create a custom collection with a base64-encoded image / Create a custom collection with a metafield / Create a custom collection with an image, which will be uploaded to Shopify 
    remote isolated function createsACustomCollection(ApiVersionCustomCollectionsJsonBody payload, map<string|string[]> headers = {}) returns CreateCollection|error {
        string resourcePath = string `/admin/api/2025-01/custom_collections.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates a customer
    #
    # + headers - Headers to be sent with the request 
    # + return - Create a new customer record / Create a customer with password and password_confirmation and skip sending the welcome email / Create a customer with send_email_invite / Create a customer with a metafield / Create a new customer record / Create a customer with password and password_confirmation and skip sending the welcome email / Create a customer with send_email_invite / Create a customer with a metafield 
    remote isolated function createsACustomer(CreateCustomer payload, map<string|string[]> headers = {}) returns CustomerResponse|error {
        string resourcePath = string `/admin/api/2025-01/customers.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates a discount code
    #
    # + priceRuleId - The ID of the price rule
    # + headers - Headers to be sent with the request 
    # + return - Create a discount code / Create a discount code 
    remote isolated function createsADiscountCode(string priceRuleId, PriceRuleIdDiscountCodesJsonBody payload, map<string|string[]> headers = {}) returns CreateDiscountCode|error {
        string resourcePath = string `/admin/api/2025-01/price_rules/${getEncodedUri(priceRuleId)}/discount_codes.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates a discount code creation job
    #
    # + priceRuleId - The ID of the price rule
    # + headers - Headers to be sent with the request 
    # + return - Create a discount code creation job / Create a discount code creation job 
    remote isolated function createsADiscountCodeCreationJob(string priceRuleId, PriceRuleIdBatchJsonBody payload, map<string|string[]> headers = {}) returns DiscountCode|error {
        string resourcePath = string `/admin/api/2025-01/price_rules/${getEncodedUri(priceRuleId)}/batch.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates a fulfillment event
    #
    # + headers - Headers to be sent with the request 
    # + return - Create a fulfillment event / Create a fulfillment event 
    remote isolated function createsAFulfillmentEvent(string orderId, string fulfillmentId, FulfillmentIdEventsJsonBody payload, map<string|string[]> headers = {}) returns CreateFulfillmentEvent|error {
        string resourcePath = string `/admin/api/2025-01/orders/${getEncodedUri(orderId)}/fulfillments/${getEncodedUri(fulfillmentId)}/events.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates a fulfillment for one or many fulfillment orders
    #
    # + headers - Headers to be sent with the request 
    # + return - Create a fulfillment for the fulfillment order line items specified / Creates a fulfillment for all fulfillment order line items if `fulfillment_order_line_items` is left blank / Create a fulfillment for the fulfillment order line items specified / Creates a fulfillment for all fulfillment order line items if `fulfillment_order_line_items` is left blank 
    remote isolated function createsAFulfillmentForOneOrManyFulfillmentOrders(CreateOrderFulfillment payload, map<string|string[]> headers = {}) returns CreateFulfillmentOrder|error {
        string resourcePath = string `/admin/api/2025-01/fulfillments.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates a gift card
    #
    # + headers - Headers to be sent with the request 
    # + return - Create a gift card with a custom code / Create a gift card with an automatically generated code / Create a gift card with a custom code / Create a gift card with an automatically generated code 
    remote isolated function createsAGiftCard(ApiVersionGiftCardsJsonBody payload, map<string|string[]> headers = {}) returns GiftCard|error {
        string resourcePath = string `/admin/api/2025-01/gift_cards.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates a marketing event
    #
    # + headers - Headers to be sent with the request 
    # + return - Create a marketing event / Create a marketing event 
    remote isolated function createsAMarketingEvent(ApiVersionMarketingEventsJsonBody payload, map<string|string[]> headers = {}) returns CreateMarketingEvent|error {
        string resourcePath = string `/admin/api/2025-01/marketing_events.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates a new address for a customer
    #
    # + headers - Headers to be sent with the request 
    # + return - Create a new address for a customer / Create a new address for a customer 
    remote isolated function createsANewAddressForACustomer(string customerId, CustomerIdAddressesJsonBody payload, map<string|string[]> headers = {}) returns CustomerAddress|error {
        string resourcePath = string `/admin/api/2025-01/customers/${getEncodedUri(customerId)}/addresses.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates a new payment
    #
    # + headers - Headers to be sent with the request 
    # + return - Create an authorization using a valid <code>session_id</code> stored in the vault / Create an authorization using a valid <code>session_id</code> stored in the vault 
    remote isolated function createsANewPayment(string token, TokenPaymentsJsonBody payload, map<string|string[]> headers = {}) returns CreateAuthorizationResponse|error {
        string resourcePath = string `/admin/api/2025-01/checkouts/${getEncodedUri(token)}/payments.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates a new product
    #
    # + headers - Headers to be sent with the request 
    # + return - Create a new product with multiple product variants and multiple options / Create a new product with multiple product variants / Create a new product with the default variant and base64 encoded image / Create a product with a metafield / Create a new product with the default product variant / Create a new product with the default variant and a product image that will be downloaded by Shopify / Create a new unpublished product / Create a new product with multiple product variants and multiple options / Create a new product with multiple product variants / Create a new product with the default variant and base64 encoded image / Create a product with a metafield / Create a new product with the default product variant / Create a new product with the default variant and a product image that will be downloaded by Shopify / Create a new unpublished product 
    remote isolated function createsANewProduct(CreateProduct payload, map<string|string[]> headers = {}) returns CreateProductResponse|error {
        string resourcePath = string `/admin/api/2025-01/products.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates a new report
    #
    # + headers - Headers to be sent with the request 
    # + return - Creates a new report 
    remote isolated function createsANewReport(ApiVersionReportsJsonBody payload, map<string|string[]> headers = {}) returns ReportResponse|error {
        string resourcePath = string `/admin/api/2025-01/reports.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates a new script tag
    #
    # + headers - Headers to be sent with the request 
    # + return - Create a new script tag / Create a new script tag 
    remote isolated function createsANewScriptTag(ApiVersionScriptTagsJsonBody payload, map<string|string[]> headers = {}) returns ScriptTagResponse|error {
        string resourcePath = string `/admin/api/2025-01/script_tags.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates a new StorefrontAccessToken
    #
    # + headers - Headers to be sent with the request 
    # + return - Create a new storefront access token / Create a new storefront access token 
    remote isolated function createsANewStorefrontaccesstoken(ApiVersionStorefrontAccessTokensJsonBody payload, map<string|string[]> headers = {}) returns StorefrontAccessToken|error {
        string resourcePath = string `/admin/api/2025-01/storefront_access_tokens.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates a price rule
    #
    # + headers - Headers to be sent with the request 
    # + return - Create a price rule that gives the buyer 15% off a specific collection / Create a price rule that gives a select group of customers $5 off their order / Create a price rule that gives the buyer free shipping on orders         over $50.00 that can be used up to 20 times / Create a Buy X Get Y price rule that gives one free ipod touch if customer buys 2 ipods  / Create a price rule that gives the buyer $10.00 off an order / Create a price rule that gives the buyer 15% off a specific collection / Create a price rule that gives a select group of customers $5 off their order / Create a price rule that gives the buyer free shipping on orders         over $50.00 that can be used up to 20 times / Create a Buy X Get Y price rule that gives one free ipod touch if customer buys 2 ipods  / Create a price rule that gives the buyer $10.00 off an order 
    remote isolated function createsAPriceRule(ApiVersionPriceRulesJsonBody payload, map<string|string[]> headers = {}) returns PriceRule|error {
        string resourcePath = string `/admin/api/2025-01/price_rules.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates a recurring application charge
    #
    # + headers - Headers to be sent with the request 
    # + return - Create a new charge with a trial period. The trial period will go into effect at the time the recurring charge is activated. / Create a new charge with terms and a capped amount / Create a recurring application charge / Create a recurring test charge that will not cause a credit card to be charged / Create a new charge with a trial period. The trial period will go into effect at the time the recurring charge is activated. / Create a new charge with terms and a capped amount / Create a recurring application charge / Create a recurring test charge that will not cause a credit card to be charged 
    remote isolated function createsARecurringApplicationCharge(ApiVersionRecurringApplicationChargesJsonBody payload, map<string|string[]> headers = {}) returns ApplicationChargeResponse|error {
        string resourcePath = string `/admin/api/2025-01/recurring_application_charges.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates a redirect
    #
    # + headers - Headers to be sent with the request 
    # + return - Create a redirect using a full URL for the path, which will be saved as an absolute path without a domain / Create a redirect / Create a redirect using a full URL for the path, which will be saved as an absolute path without a domain / Create a redirect 
    remote isolated function createsARedirect(ApiVersionRedirectsJsonBody payload, map<string|string[]> headers = {}) returns RedirectResponse|error {
        string resourcePath = string `/admin/api/2025-01/redirects.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates a refund
    #
    # + headers - Headers to be sent with the request 
    # + return - Create a refund for an order / Refund a specific amount of shipping / Create a refund for an order / Refund a specific amount of shipping 
    remote isolated function createsARefund(string orderId, CreateRefund payload, map<string|string[]> headers = {}) returns RefundObject|error {
        string resourcePath = string `/admin/api/2025-01/orders/${getEncodedUri(orderId)}/refunds.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates a smart collection
    #
    # + headers - Headers to be sent with the request 
    # + return - Create a new smart collection with a base64 encoded image / Create a smart collection of all products starting with the specified term / Create a smart collection with a specified title / Create a new smart collection with an image that will be downloaded by Shopify / Create a new unpublished smart collection / Create a new smart collection with a base64 encoded image / Create a smart collection of all products starting with the specified term / Create a smart collection with a specified title / Create a new smart collection with an image that will be downloaded by Shopify / Create a new unpublished smart collection 
    remote isolated function createsASmartCollection(ApiVersionSmartCollectionsJsonBody payload, map<string|string[]> headers = {}) returns CreatSmartCollection|error {
        string resourcePath = string `/admin/api/2025-01/smart_collections.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates a theme
    #
    # + headers - Headers to be sent with the request 
    # + return - Create a theme that has a custom name and is published / Create a theme that has a custom name and is published 
    remote isolated function createsATheme(ApiVersionThemesJsonBody payload, map<string|string[]> headers = {}) returns CreateThemeResponse|error {
        string resourcePath = string `/admin/api/2025-01/themes.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates a transaction for an order
    #
    # + headers - Headers to be sent with the request 
    # + return - Capture the full amount for an authorized order, and associate the capture with an authorization by including its authorization code / Create a test transaction. / Capture a specified amount on an authorized order, and associate the capture with an authorization by including its ID / Capture the full amount for an authorized order, and associate the capture with an authorization by including its authorization code / Create a test transaction. / Capture a specified amount on an authorized order, and associate the capture with an authorization by including its ID 
    remote isolated function createsATransactionForAnOrder(string orderId, CreateTransaction payload, map<string|string[]> headers = {}) returns TransactionObject|error {
        string resourcePath = string `/admin/api/2025-01/orders/${getEncodedUri(orderId)}/transactions.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates a usage charge
    #
    # + recurringApplicationChargeId - The ID of the recurring application charge.
    # + headers - Headers to be sent with the request 
    # + return - Create a new usage charge / Create a new usage charge 
    remote isolated function createsAUsageCharge(string recurringApplicationChargeId, RecurringApplicationChargeIdUsageChargesJsonBody payload, map<string|string[]> headers = {}) returns UsageChargeResponse|error {
        string resourcePath = string `/admin/api/2025-01/recurring_application_charges/${getEncodedUri(recurringApplicationChargeId)}/usage_charges.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates an account activation URL for a customer
    #
    # + headers - Headers to be sent with the request 
    # + return - Create an account activation URL for an invited or disabled customer / Create an account activation URL for an invited or disabled customer 
    remote isolated function createsAnAccountActivationUrlForACustomer(string customerId, CustomerInvite payload, map<string|string[]> headers = {}) returns AccountActivationUrl|error {
        string resourcePath = string `/admin/api/2025-01/customers/${getEncodedUri(customerId)}/account_activation_url.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates an application charge
    #
    # + headers - Headers to be sent with the request 
    # + return - Create a test charge that will not cause a credit card to be charged / Creates an application charge / Create a test charge that will not cause a credit card to be charged / Creates an application charge 
    remote isolated function createsAnApplicationCharge(ApiVersionApplicationChargesJsonBody payload, map<string|string[]> headers = {}) returns ApplicationCharge|error {
        string resourcePath = string `/admin/api/2025-01/application_charges.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates an article for a blog
    #
    # + headers - Headers to be sent with the request 
    # + return - Create an article with a metafield / Create an article with an image, which will be downloaded by Shopify / Create an article with HTML markup for a blog / Create an article with a base64 encoded image / Create an unpublished article for a blog / Create an article with a metafield / Create an article with an image, which will be downloaded by Shopify / Create an article with HTML markup for a blog / Create an article with a base64 encoded image / Create an unpublished article for a blog 
    remote isolated function createsAnArticleForABlog(string blogId, BlogIdArticlesJsonBody payload, map<string|string[]> headers = {}) returns Article|error {
        string resourcePath = string `/admin/api/2025-01/blogs/${getEncodedUri(blogId)}/articles.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates an order risk for an order
    #
    # + headers - Headers to be sent with the request 
    # + return - Create an order risk showing a fraud risk for proxy detection / Create an order risk showing a fraud risk for proxy detection 
    remote isolated function createsAnOrderRiskForAnOrder(string orderId, CreateOrderRisk payload, map<string|string[]> headers = {}) returns CreateOrderRisk|error {
        string resourcePath = string `/admin/api/2025-01/orders/${getEncodedUri(orderId)}/risks.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates marketing engagements on a marketing event
    #
    # + headers - Headers to be sent with the request 
    # + return - Add engagements to a marketing engagement / Add engagements to a marketing engagement 
    remote isolated function createsMarketingEngagementsOnAMarketingEvent(string marketingEventId, MarketingEventIdEngagementsJsonBody payload, map<string|string[]> headers = {}) returns Engagements|error {
        string resourcePath = string `/admin/api/2025-01/marketing_events/${getEncodedUri(marketingEventId)}/engagements.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates or updates an asset for a theme
    #
    # + headers - Headers to be sent with the request 
    # + return - Create an image asset by providing a base64-encoded attachment / Create an image asset by providing a source URL from which to upload the image / Change an existing Liquid template's value / Duplicate an existing asset by providing a source key / Create an image asset by providing a base64-encoded attachment / Create an image asset by providing a source URL from which to upload the image / Change an existing Liquid template's value / Duplicate an existing asset by providing a source key 
    remote isolated function createsOrUpdatesAnAssetForATheme(string themeId, ThemeIdAssetsJsonBody payload, map<string|string[]> headers = {}) returns ImageAsset|error {
        string resourcePath = string `/admin/api/2025-01/themes/${getEncodedUri(themeId)}/assets.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete a collection listing to unpublish a collection from your app
    #
    # + collectionListingId - The ID of the product collection
    # + headers - Headers to be sent with the request 
    # + return - Delete a collection listing to unpublish a collection from your app / Delete a collection listing to unpublish a collection from your app 
    remote isolated function deleteACollectionListingToUnpublishACollectionFromYourApp(string collectionListingId, string payload, map<string|string[]> headers = {}) returns string|error {
        string resourcePath = string `/admin/api/2025-01/collection_listings/${getEncodedUri(collectionListingId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        return self.clientEp->delete(resourcePath, request, headers);
    }

    # Delete a dispute evidence file
    #
    # + headers - Headers to be sent with the request 
    remote isolated function deleteADisputeEvidenceFile(string disputeId, string disputeFileUploadId, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/admin/api/2025-01/shopify_payments/disputes/${getEncodedUri(disputeId)}/dispute_file_uploads/${getEncodedUri(disputeFileUploadId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Delete a mobile platform application
    #
    # + headers - Headers to be sent with the request 
    remote isolated function deleteAMobilePlatformApplication(string mobilePlatformApplicationId, string payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/admin/api/2025-01/mobile_platform_applications/${getEncodedUri(mobilePlatformApplicationId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        return self.clientEp->delete(resourcePath, request, headers);
    }

    # Delete a product listing to unpublish a product from your app
    #
    # + headers - Headers to be sent with the request 
    # + return - Delete a product listing to unpublish a product from your app / Delete a product listing to unpublish a product from your app 
    remote isolated function deleteAProductListingToUnpublishAProductFromYourApp(string productListingId, string payload, map<string|string[]> headers = {}) returns string|error {
        string resourcePath = string `/admin/api/2025-01/product_listings/${getEncodedUri(productListingId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        return self.clientEp->delete(resourcePath, request, headers);
    }

    # Deletes a carrier service
    #
    # + headers - Headers to be sent with the request 
    # + return - Delete a carrier service / Delete a carrier service 
    remote isolated function deletesACarrierService(string carrierServiceId, string payload, map<string|string[]> headers = {}) returns record {}|error {
        string resourcePath = string `/admin/api/2025-01/carrier_services/${getEncodedUri(carrierServiceId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        return self.clientEp->delete(resourcePath, request, headers);
    }

    # Deletes a custom collection
    #
    # + headers - Headers to be sent with the request 
    # + return - Delete a custom collection / Delete a custom collection 
    remote isolated function deletesACustomCollection(string customCollectionId, string payload, map<string|string[]> headers = {}) returns record {}|error {
        string resourcePath = string `/admin/api/2025-01/custom_collections/${getEncodedUri(customCollectionId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        return self.clientEp->delete(resourcePath, request, headers);
    }

    # Deletes a customer.
    #
    # + headers - Headers to be sent with the request 
    # + return - Retrieves a single customer 
    remote isolated function deletesACustomer(string customerId, string payload, map<string|string[]> headers = {}) returns CustomerResponse|error {
        string resourcePath = string `/admin/api/2025-01/customers/${getEncodedUri(customerId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        return self.clientEp->delete(resourcePath, request, headers);
    }

    # Deletes a discount code
    #
    # + priceRuleId - The ID of the price rule
    # + headers - Headers to be sent with the request 
    # + return - Delete a discount code / Delete a discount code 
    remote isolated function deletesADiscountCode(string priceRuleId, string discountCodeId, string payload, map<string|string[]> headers = {}) returns string|error {
        string resourcePath = string `/admin/api/2025-01/price_rules/${getEncodedUri(priceRuleId)}/discount_codes/${getEncodedUri(discountCodeId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        return self.clientEp->delete(resourcePath, request, headers);
    }

    # Deletes a fulfillment event
    #
    # + headers - Headers to be sent with the request 
    # + return - Delete a fulfillment event / Delete a fulfillment event 
    remote isolated function deletesAFulfillmentEvent(string orderId, string fulfillmentId, string eventId, string payload, map<string|string[]> headers = {}) returns record {}|error {
        string resourcePath = string `/admin/api/2025-01/orders/${getEncodedUri(orderId)}/fulfillments/${getEncodedUri(fulfillmentId)}/events/${getEncodedUri(eventId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        return self.clientEp->delete(resourcePath, request, headers);
    }

    # Deletes a marketing event
    #
    # + headers - Headers to be sent with the request 
    # + return - Delete a marketing event / Delete a marketing event 
    remote isolated function deletesAMarketingEvent(string marketingEventId, string payload, map<string|string[]> headers = {}) returns record {}|error {
        string resourcePath = string `/admin/api/2025-01/marketing_events/${getEncodedUri(marketingEventId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        return self.clientEp->delete(resourcePath, request, headers);
    }

    # Deletes a metafield by its ID
    #
    # + headers - Headers to be sent with the request 
    remote isolated function deletesAMetafieldByItsId(string ownerId, string ownerResource, string metafieldId, string payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/admin/api/2025-01/${getEncodedUri(ownerId)}/${getEncodedUri(ownerResource)}/metafields/${getEncodedUri(metafieldId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        return self.clientEp->delete(resourcePath, request, headers);
    }

    # Deletes a page
    #
    # + headers - Headers to be sent with the request 
    # + return - Delete a page / Delete a page 
    remote isolated function deletesAPage(string pageId, string payload, map<string|string[]> headers = {}) returns record {}|error {
        string resourcePath = string `/admin/api/2025-01/pages/${getEncodedUri(pageId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        return self.clientEp->delete(resourcePath, request, headers);
    }

    # Deletes a product
    #
    # + headers - Headers to be sent with the request 
    # + return - Delete a product along with all its variants and images / Delete a product along with all its variants and images 
    remote isolated function deletesAProduct(string productId, string payload, map<string|string[]> headers = {}) returns record {}|error {
        string resourcePath = string `/admin/api/2025-01/products/${getEncodedUri(productId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        return self.clientEp->delete(resourcePath, request, headers);
    }

    # Deletes a redirect
    #
    # + headers - Headers to be sent with the request 
    # + return - Delete an existing redirect / Delete an existing redirect 
    remote isolated function deletesARedirect(string redirectId, string payload, map<string|string[]> headers = {}) returns record {}|error {
        string resourcePath = string `/admin/api/2025-01/redirects/${getEncodedUri(redirectId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        return self.clientEp->delete(resourcePath, request, headers);
    }

    # Deletes a report
    #
    # + headers - Headers to be sent with the request 
    # + return - Deletes a report 
    remote isolated function deletesAReport(string reportId, string payload, map<string|string[]> headers = {}) returns record {}|error {
        string resourcePath = string `/admin/api/2025-01/reports/${getEncodedUri(reportId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        return self.clientEp->delete(resourcePath, request, headers);
    }

    # Deletes a script tag
    #
    # + headers - Headers to be sent with the request 
    # + return - Delete an existing script tag / Delete an existing script tag 
    remote isolated function deletesAScriptTag(string scriptTagId, string payload, map<string|string[]> headers = {}) returns record {}|error {
        string resourcePath = string `/admin/api/2025-01/script_tags/${getEncodedUri(scriptTagId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        return self.clientEp->delete(resourcePath, request, headers);
    }

    # Deletes an article
    #
    # + headers - Headers to be sent with the request 
    # + return - Delete an existing article from a blog / Delete an existing article from a blog 
    remote isolated function deletesAnArticle(string blogId, string articleId, string payload, map<string|string[]> headers = {}) returns record {}|error {
        string resourcePath = string `/admin/api/2025-01/blogs/${getEncodedUri(blogId)}/articles/${getEncodedUri(articleId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        return self.clientEp->delete(resourcePath, request, headers);
    }

    # Deletes an asset from a theme
    #
    # + headers - Headers to be sent with the request 
    # + return - Delete an image from a theme / Delete an image from a theme 
    remote isolated function deletesAnAssetFromATheme(string themeId, string payload, map<string|string[]> headers = {}) returns DeleteAssetResponse|error {
        string resourcePath = string `/admin/api/2025-01/themes/${getEncodedUri(themeId)}/assets.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        return self.clientEp->delete(resourcePath, request, headers);
    }

    # Deletes an existing storefront access token
    #
    # + headers - Headers to be sent with the request 
    # + return - Deletes an existing storefront access token / Deletes an existing storefront access token 
    remote isolated function deletesAnExistingStorefrontAccessToken(string storefrontAccessTokenId, string payload, map<string|string[]> headers = {}) returns string|error {
        string resourcePath = string `/admin/api/2025-01/storefront_access_tokens/${getEncodedUri(storefrontAccessTokenId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        return self.clientEp->delete(resourcePath, request, headers);
    }

    # Deletes an inventory level from a location
    #
    # + headers - Headers to be sent with the request 
    # + return - Delete an inventory level / Delete an inventory level 
    remote isolated function deletesAnInventoryLevelFromALocation(string payload, map<string|string[]> headers = {}) returns string|error {
        string resourcePath = string `/admin/api/2025-01/inventory_levels.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        return self.clientEp->delete(resourcePath, request, headers);
    }

    # Deletes an order
    #
    # + headers - Headers to be sent with the request 
    # + return - Delete an order / Delete an order 
    remote isolated function deletesAnOrder(string orderId, string payload, map<string|string[]> headers = {}) returns record {}|error {
        string resourcePath = string `/admin/api/2025-01/orders/${getEncodedUri(orderId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        return self.clientEp->delete(resourcePath, request, headers);
    }

    # Deletes an order risk for an order
    #
    # + headers - Headers to be sent with the request 
    # + return - Delete an order risk for an order / Delete an order risk for an order 
    remote isolated function deletesAnOrderRiskForAnOrder(string orderId, string riskId, string payload, map<string|string[]> headers = {}) returns record {}|error {
        string resourcePath = string `/admin/api/2025-01/orders/${getEncodedUri(orderId)}/risks/${getEncodedUri(riskId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        return self.clientEp->delete(resourcePath, request, headers);
    }

    # Disables a gift card
    #
    # + headers - Headers to be sent with the request 
    # + return - Disable a gift card / Disable a gift card 
    remote isolated function disablesAGiftCard(string giftCardId, GiftCardIdDisableJsonBody payload, map<string|string[]> headers = {}) returns DisableGiftCard|error {
        string resourcePath = string `/admin/api/2025-01/gift_cards/${getEncodedUri(giftCardId)}/disable.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get a list of access scopes
    #
    # + headers - Headers to be sent with the request 
    # + return - List all scopes / List all scopes 
    remote isolated function getAListOfAccessScopes(map<string|string[]> headers = {}) returns AccessScopes|error {
        string resourcePath = string `/admin/oauth/access_scopes.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get a mobile platform application
    #
    # + headers - Headers to be sent with the request 
    # + return - Get a mobile platform application / Get a mobile platform application 
    remote isolated function getAMobilePlatformApplication(string mobilePlatformApplicationId, map<string|string[]> headers = {}) returns MobilePlatformApplicationResponse|error {
        string resourcePath = string `/admin/api/2025-01/mobile_platform_applications/${getEncodedUri(mobilePlatformApplicationId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # List all of the mobile platform applications associated with the app
    #
    # + headers - Headers to be sent with the request 
    # + return - List all of the mobile platform applications associated with the app / List all of the mobile platform applications associated with the app 
    remote isolated function listAllOfTheMobilePlatformApplicationsAssociatedWithTheApp(map<string|string[]> headers = {}) returns MobilePlatformApplications|error {
        string resourcePath = string `/admin/api/2025-01/mobile_platform_applications.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Marks a comment as not spam
    #
    # + headers - Headers to be sent with the request 
    # + return - Mark a comment as not spam, restoring it to an unapproved or published state / Mark a comment as not spam, restoring it to an unapproved or published state 
    remote isolated function marksACommentAsNotSpam(string commentId, record {} payload, map<string|string[]> headers = {}) returns MarkCommentResponse|error {
        string resourcePath = string `/admin/api/2025-01/comments/${getEncodedUri(commentId)}/not_spam.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Marks a comment as spam
    #
    # + headers - Headers to be sent with the request 
    # + return - Mark a comment as spam / Mark a comment as spam 
    remote isolated function marksACommentAsSpam(string commentId, record {} payload, map<string|string[]> headers = {}) returns SpamCommentResponse|error {
        string resourcePath = string `/admin/api/2025-01/comments/${getEncodedUri(commentId)}/spam.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Marks a fulfillment order as incomplete
    #
    # + fulfillmentOrderId - The ID of the fulfillment order
    # + headers - Headers to be sent with the request 
    # + return - Transition a fulfillment order from in progress to incomplete / Transition a fulfillment order from in progress to incomplete 
    remote isolated function marksAFulfillmentOrderAsIncomplete(string fulfillmentOrderId, FulfillmentOrderIdCloseJsonBody payload, map<string|string[]> headers = {}) returns TransitionFulfillmentOrder|error {
        string resourcePath = string `/admin/api/2025-01/fulfillment_orders/${getEncodedUri(fulfillmentOrderId)}/close.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Marks the fulfillment order as open
    #
    # + fulfillmentOrderId - The ID of the fulfillment order
    # + headers - Headers to be sent with the request 
    # + return - Move a fulfillment order to a new location / Move a fulfillment order to a new location 
    remote isolated function marksTheFulfillmentOrderAsOpen(string fulfillmentOrderId, FulfillmentOrderIdOpenJsonBody payload, map<string|string[]> headers = {}) returns MoveFulfillmentOrderResponse|error {
        string resourcePath = string `/admin/api/2025-01/fulfillment_orders/${getEncodedUri(fulfillmentOrderId)}/open.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Modifies an existing checkout
    #
    # + headers - Headers to be sent with the request 
    # + return - Select a shipping rate / Select a shipping rate 
    remote isolated function modifiesAnExistingCheckout(string token, CheckoutstokenJsonBody payload, map<string|string[]> headers = {}) returns ShippingRateResponse|UpdateCheckoutResponse|error {
        string resourcePath = string `/admin/api/2025-01/checkouts/${getEncodedUri(token)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Modify an existing Blog
    #
    # + headers - Headers to be sent with the request 
    # + return - Add a metafield to an existing blog / Update an existing blog title and handle and also activate comments / Update an existing blog title / Add a metafield to an existing blog / Update an existing blog title and handle and also activate comments / Update an existing blog title 
    remote isolated function modifyAnExistingBlog(string blogId, BlogsblogIdJsonBody payload, map<string|string[]> headers = {}) returns UpdateBlogResponse|error {
        string resourcePath = string `/admin/api/2025-01/blogs/${getEncodedUri(blogId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Modify an existing CarrierService
    #
    # + headers - Headers to be sent with the request 
    # + return - Update a carrier service / Update a carrier service 
    remote isolated function modifyAnExistingCarrierservice(string carrierServiceId, CarrierServicescarrierServiceIdJsonBody payload, map<string|string[]> headers = {}) returns UpdateCarrierService|error {
        string resourcePath = string `/admin/api/2025-01/carrier_services/${getEncodedUri(carrierServiceId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Modify an existing DraftOrder
    #
    # + draftOrderId - The ID of the draft order
    # + headers - Headers to be sent with the request 
    # + return - <span id="set-discount-on-a-draft-order-{{ current_version }}">Set a discount on a draft order</span> / Add a note to a draft order / <span id="set-discount-on-a-draft-order-{{ current_version }}">Set a discount on a draft order</span> / Add a note to a draft order 
    remote isolated function modifyAnExistingDraftorder(string draftOrderId, DraftOrdersdraftOrderIdJsonBody payload, map<string|string[]> headers = {}) returns ModifyDraftOrder|error {
        string resourcePath = string `/admin/api/2025-01/draft_orders/${getEncodedUri(draftOrderId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Modify an existing FulfillmentService
    #
    # + headers - Headers to be sent with the request 
    # + return - Update a fulfillment service / Update a fulfillment service 
    remote isolated function modifyAnExistingFulfillmentservice(string fulfillmentServiceId, FulfillmentServicesfulfillmentServiceIdJsonBody payload, map<string|string[]> headers = {}) returns UpdateFulfillmentService|error {
        string resourcePath = string `/admin/api/2025-01/fulfillment_services/${getEncodedUri(fulfillmentServiceId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Modify an existing Product Image
    #
    # + headers - Headers to be sent with the request 
    # + return - Modify an image; add a metafield / Modify an image; change its position and alt tag content / Modify an image; add it to product variants / Modify an image; add a metafield / Modify an image; change its position and alt tag content / Modify an image; add it to product variants 
    remote isolated function modifyAnExistingProductImage(string productId, string imageId, ImagesimageIdJsonBody payload, map<string|string[]> headers = {}) returns ModifyProductImage|error {
        string resourcePath = string `/admin/api/2025-01/products/${getEncodedUri(productId)}/images/${getEncodedUri(imageId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Modify an existing Product Variant
    #
    # + headers - Headers to be sent with the request 
    # + return - Add a metafield to an existing variant / Add an existing image to an existing variant / Update the title and price of an existing variant / Add a metafield to an existing variant / Add an existing image to an existing variant / Update the title and price of an existing variant 
    remote isolated function modifyAnExistingProductVariant(string variantId, UpdateProductVariant payload, map<string|string[]> headers = {}) returns ModifyProductVariant|error {
        string resourcePath = string `/admin/api/2025-01/variants/${getEncodedUri(variantId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Modify an existing Theme
    #
    # + headers - Headers to be sent with the request 
    # + return - Publish an unpublished theme / Update a theme's name / Publish an unpublished theme / Update a theme's name 
    remote isolated function modifyAnExistingTheme(string themeId, ThemesthemeIdJsonBody payload, map<string|string[]> headers = {}) returns PublishThemeResponse|error {
        string resourcePath = string `/admin/api/2025-01/themes/${getEncodedUri(themeId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Modify an existing Webhook
    #
    # + headers - Headers to be sent with the request 
    # + return - Update a webhook subscription so that it POSTs to a different address / Update a webhook subscription so that it POSTs to a different address 
    remote isolated function modifyAnExistingWebhook(string webhookId, UpdateWebhook payload, map<string|string[]> headers = {}) returns WebhookObject|error {
        string resourcePath = string `/admin/api/2025-01/webhooks/${getEncodedUri(webhookId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Moves a fulfillment order to a new location
    #
    # + fulfillmentOrderId - The ID of the fulfillment order
    # + headers - Headers to be sent with the request 
    # + return - Move a fulfillment order to a new location / Move a fulfillment order to a new location 
    remote isolated function movesAFulfillmentOrderToANewLocation(string fulfillmentOrderId, FulfillmentOrderIdMoveJsonBody payload, map<string|string[]> headers = {}) returns MoveFulfillmentOrderResponse|error {
        string resourcePath = string `/admin/api/2025-01/fulfillment_orders/${getEncodedUri(fulfillmentOrderId)}/move.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Performs bulk operations for multiple customer addresses
    #
    # + headers - Headers to be sent with the request 
    # + return - Destroy multiple customer addresses / Destroy multiple customer addresses 
    remote isolated function performsBulkOperationsForMultipleCustomerAddresses(string customerId, string payload, map<string|string[]> headers = {}) returns json|error {
        string resourcePath = string `/admin/api/2025-01/customers/${getEncodedUri(customerId)}/addresses/set.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Re-open a closed order
    #
    # + headers - Headers to be sent with the request 
    # + return - Re-open a closed order / Re-open a closed order 
    remote isolated function reOpenAClosedOrder(string orderId, record {} payload, map<string|string[]> headers = {}) returns ReopenCloseOrder|error {
        string resourcePath = string `/admin/api/2025-01/orders/${getEncodedUri(orderId)}/open.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Receive a count of all Blogs
    #
    # + headers - Headers to be sent with the request 
    # + return - Get all blogs for a shop / Get all blogs for a shop 
    remote isolated function receiveACountOfAllBlogs(map<string|string[]> headers = {}) returns BlogsCount|error {
        string resourcePath = string `/admin/api/2025-01/blogs/count.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Receive a count of all DraftOrders
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Count all draft orders / Count all draft orders 
    remote isolated function receiveACountOfAllDraftorders(map<string|string[]> headers = {}, *ReceiveACountOfAllDraftordersQueries queries) returns StoreLocationCount|error {
        string resourcePath = string `/admin/api/2025-01/draft_orders/count.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Receive a count of all Product Images
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Get a count all product images / Get a count of all product images after a specified ID / Get a count all product images / Get a count of all product images after a specified ID 
    remote isolated function receiveACountOfAllProductImages(string productId, map<string|string[]> headers = {}, *ReceiveACountOfAllProductImagesQueries queries) returns BlogsCount|error {
        string resourcePath = string `/admin/api/2025-01/products/${getEncodedUri(productId)}/images/count.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Receive a count of all Product Variants
    #
    # + headers - Headers to be sent with the request 
    # + return - Retrieve a count all variants for a product / Retrieve a count all variants for a product 
    remote isolated function receiveACountOfAllProductVariants(string productId, map<string|string[]> headers = {}) returns ArticlesCount|error {
        string resourcePath = string `/admin/api/2025-01/products/${getEncodedUri(productId)}/variants/count.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Receive a count of all Webhooks
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Count all of the webhook subscriptions for the topic <code>orders/create</code> / Count all of the webhook subscriptions for your shop / Count all of the webhook subscriptions for the topic <code>orders/create</code> / Count all of the webhook subscriptions for your shop 
    remote isolated function receiveACountOfAllWebhooks(map<string|string[]> headers = {}, *ReceiveACountOfAllWebhooksQueries queries) returns ObjectCount|error {
        string resourcePath = string `/admin/api/2025-01/webhooks/count.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Receive a list of all Countries
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieve all countries after the specified ID / Retrieve all countries / Retrieve all countries after the specified ID / Retrieve all countries 
    remote isolated function receiveAListOfAllCountries(map<string|string[]> headers = {}, *ReceiveAListOfAllCountriesQueries queries) returns CountriesList|error {
        string resourcePath = string `/admin/api/2025-01/countries.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Receive a list of all FulfillmentServices
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - List your app's fulfillment services / List all of the shop's fulfillment services / List your app's fulfillment services / List all of the shop's fulfillment services 
    remote isolated function receiveAListOfAllFulfillmentservices(map<string|string[]> headers = {}, *ReceiveAListOfAllFulfillmentservicesQueries queries) returns FulfillmentServicesList|error {
        string resourcePath = string `/admin/api/2025-01/fulfillment_services.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Receive a list of all Product Images
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Get all product images for a product / Get all product images for a product after a specified ID / Get all product images for a product / Get all product images for a product after a specified ID 
    remote isolated function receiveAListOfAllProductImages(string productId, map<string|string[]> headers = {}, *ReceiveAListOfAllProductImagesQueries queries) returns ProductImages|error {
        string resourcePath = string `/admin/api/2025-01/products/${getEncodedUri(productId)}/images.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Receive a list of all Product ResourceFeedbacks
    #
    # + headers - Headers to be sent with the request 
    # + return - Receive a list of all Product ResourceFeedbacks 
    remote isolated function receiveAListOfAllProductResourcefeedbacks(string productId, map<string|string[]> headers = {}) returns ResourceFeedbackList|error {
        string resourcePath = string `/admin/api/2025-01/products/${getEncodedUri(productId)}/resource_feedback.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Receive a list of all ResourceFeedbacks
    #
    # + headers - Headers to be sent with the request 
    # + return - Get a list of resource feedback records for a specific shop / Get a list of resource feedback records for a specific shop 
    remote isolated function receiveAListOfAllResourcefeedbacks(map<string|string[]> headers = {}) returns ResourceFeedbackList|error {
        string resourcePath = string `/admin/api/2025-01/resource_feedback.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Receive a list of all ShippingZones
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    remote isolated function receiveAListOfAllShippingzones(map<string|string[]> headers = {}, *ReceiveAListOfAllShippingzonesQueries queries) returns ShippingZonesList|error {
        string resourcePath = string `/admin/api/2025-01/shipping_zones.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Receive a single Article
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieve a single article / Retrieve a single article 
    remote isolated function receiveASingleArticle(string blogId, string articleId, map<string|string[]> headers = {}, *ReceiveASingleArticleQueries queries) returns SingleArticle|error {
        string resourcePath = string `/admin/api/2025-01/blogs/${getEncodedUri(blogId)}/articles/${getEncodedUri(articleId)}.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Receive a single Blog
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Get a single blog / Get a single blog 
    remote isolated function receiveASingleBlog(string blogId, map<string|string[]> headers = {}, *ReceiveASingleBlogQueries queries) returns SingleBlog|error {
        string resourcePath = string `/admin/api/2025-01/blogs/${getEncodedUri(blogId)}.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Receive a single DraftOrder
    #
    # + draftOrderId - The ID of the draft order
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Get a representation of a single draft order / Get a representation of a single draft order 
    remote isolated function receiveASingleDraftorder(string draftOrderId, map<string|string[]> headers = {}, *ReceiveASingleDraftorderQueries queries) returns SingleDraftOrder|error {
        string resourcePath = string `/admin/api/2025-01/draft_orders/${getEncodedUri(draftOrderId)}.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Receive a single Fulfillment
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieve a specific fulfillment / Retrieve a specific fulfillment 
    remote isolated function receiveASingleFulfillment(string orderId, string fulfillmentId, map<string|string[]> headers = {}, *ReceiveASingleFulfillmentQueries queries) returns SingleFulfillment|error {
        string resourcePath = string `/admin/api/2025-01/orders/${getEncodedUri(orderId)}/fulfillments/${getEncodedUri(fulfillmentId)}.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Receive a single FulfillmentService
    #
    # + headers - Headers to be sent with the request 
    # + return - Get a single fulfillment service by its ID / Get a single fulfillment service by its ID 
    remote isolated function receiveASingleFulfillmentservice(string fulfillmentServiceId, map<string|string[]> headers = {}) returns SingleFulfillmentService|error {
        string resourcePath = string `/admin/api/2025-01/fulfillment_services/${getEncodedUri(fulfillmentServiceId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Receive a single Product Image
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Show product image / Show product image 
    remote isolated function receiveASingleProductImage(string productId, string imageId, map<string|string[]> headers = {}, *ReceiveASingleProductImageQueries queries) returns SingleProductImage|error {
        string resourcePath = string `/admin/api/2025-01/products/${getEncodedUri(productId)}/images/${getEncodedUri(imageId)}.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Receive a single Product Variant
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieve a product variant by ID / Retrieve a product variant by ID 
    remote isolated function receiveASingleProductVariant(string variantId, map<string|string[]> headers = {}, *ReceiveASingleProductVariantQueries queries) returns ProductVariantResponse|error {
        string resourcePath = string `/admin/api/2025-01/variants/${getEncodedUri(variantId)}.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Receive a single Webhook
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieve a single webhook by its <code>id</code> / Retrieve a single webhook by its <code>id</code> 
    remote isolated function receiveASingleWebhook(string webhookId, map<string|string[]> headers = {}, *ReceiveASingleWebhookQueries queries) returns SingleWebhook|error {
        string resourcePath = string `/admin/api/2025-01/webhooks/${getEncodedUri(webhookId)}.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Rejects a cancellation request
    #
    # + fulfillmentOrderId - The ID of the fulfillment order
    # + headers - Headers to be sent with the request 
    # + return - Rejects a cancellation request sent to a fulfillment service and updates the fulfillment order / Rejects a cancellation request sent to a fulfillment service and updates the fulfillment order 
    remote isolated function rejectsACancellationRequest(string fulfillmentOrderId, CancellationRequestRejectJsonBody payload, map<string|string[]> headers = {}) returns RejectCancellationRequestResponse|error {
        string resourcePath = string `/admin/api/2025-01/fulfillment_orders/${getEncodedUri(fulfillmentOrderId)}/cancellation_request/reject.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Rejects a fulfillment request
    #
    # + fulfillmentOrderId - The ID of the fulfillment order
    # + headers - Headers to be sent with the request 
    # + return - Rejects a fulfillment request sent to a fulfillment service and updates the fulfillment order / Rejects a fulfillment request sent to a fulfillment service and updates the fulfillment order 
    remote isolated function rejectsAFulfillmentRequest(string fulfillmentOrderId, FulfillmentRequestRejectJsonBody payload, map<string|string[]> headers = {}) returns RejectFulfillmentResponse|error {
        string resourcePath = string `/admin/api/2025-01/fulfillment_orders/${getEncodedUri(fulfillmentOrderId)}/fulfillment_request/reject.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Releases the fulfillment hold on a fulfillment order
    #
    # + fulfillmentOrderId - The ID of the fulfillment order
    # + headers - Headers to be sent with the request 
    # + return - Move a fulfillment order to a new location / Move a fulfillment order to a new location 
    remote isolated function releasesTheFulfillmentHoldOnAFulfillmentOrder(string fulfillmentOrderId, FulfillmentOrderIdReleaseHoldJsonBody payload, map<string|string[]> headers = {}) returns MoveFulfillmentOrderResponse|error {
        string resourcePath = string `/admin/api/2025-01/fulfillment_orders/${getEncodedUri(fulfillmentOrderId)}/release_hold.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Remove an existing Blog
    #
    # + headers - Headers to be sent with the request 
    # + return - Remove an existing blog from a shop / Remove an existing blog from a shop 
    remote isolated function removeAnExistingBlog(string blogId, string payload, map<string|string[]> headers = {}) returns record {}|error {
        string resourcePath = string `/admin/api/2025-01/blogs/${getEncodedUri(blogId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        return self.clientEp->delete(resourcePath, request, headers);
    }

    # Remove an existing Country
    #
    # + headers - Headers to be sent with the request 
    # + return - Delete a country / Delete a country 
    remote isolated function removeAnExistingCountry(string countryId, string payload, map<string|string[]> headers = {}) returns record {}|error {
        string resourcePath = string `/admin/api/2025-01/countries/${getEncodedUri(countryId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        return self.clientEp->delete(resourcePath, request, headers);
    }

    # Remove an existing DraftOrder
    #
    # + draftOrderId - The ID of the draft order
    # + headers - Headers to be sent with the request 
    # + return - Permanently delete a draft order / Permanently delete a draft order 
    remote isolated function removeAnExistingDraftorder(string draftOrderId, string payload, map<string|string[]> headers = {}) returns record {}|error {
        string resourcePath = string `/admin/api/2025-01/draft_orders/${getEncodedUri(draftOrderId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        return self.clientEp->delete(resourcePath, request, headers);
    }

    # Remove an existing FulfillmentService
    #
    # + headers - Headers to be sent with the request 
    # + return - Destroy a fulfillment service / Destroy a fulfillment service 
    remote isolated function removeAnExistingFulfillmentservice(string fulfillmentServiceId, string payload, map<string|string[]> headers = {}) returns record {}|error {
        string resourcePath = string `/admin/api/2025-01/fulfillment_services/${getEncodedUri(fulfillmentServiceId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        return self.clientEp->delete(resourcePath, request, headers);
    }

    # Remove an existing PriceRule
    #
    # + priceRuleId - The ID of the price rule
    # + headers - Headers to be sent with the request 
    # + return - Delete a price rule / Delete a price rule 
    remote isolated function removeAnExistingPriceRule(string priceRuleId, string payload, map<string|string[]> headers = {}) returns string|error {
        string resourcePath = string `/admin/api/2025-01/price_rules/${getEncodedUri(priceRuleId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        return self.clientEp->delete(resourcePath, request, headers);
    }

    # Remove an existing Product Image
    #
    # + headers - Headers to be sent with the request 
    # + return - Delete a product image / Delete a product image 
    remote isolated function removeAnExistingProductImage(string productId, string imageId, string payload, map<string|string[]> headers = {}) returns record {}|error {
        string resourcePath = string `/admin/api/2025-01/products/${getEncodedUri(productId)}/images/${getEncodedUri(imageId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        return self.clientEp->delete(resourcePath, request, headers);
    }

    # Remove an existing Product Variant
    #
    # + headers - Headers to be sent with the request 
    # + return - Delete a product variant / Delete a product variant 
    remote isolated function removeAnExistingProductVariant(string productId, string variantId, string payload, map<string|string[]> headers = {}) returns record {}|error {
        string resourcePath = string `/admin/api/2025-01/products/${getEncodedUri(productId)}/variants/${getEncodedUri(variantId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        return self.clientEp->delete(resourcePath, request, headers);
    }

    # Remove an existing Theme
    #
    # + headers - Headers to be sent with the request 
    # + return - Delete a theme / Delete a theme 
    remote isolated function removeAnExistingTheme(string themeId, string payload, map<string|string[]> headers = {}) returns DeleteThemeResponse|error {
        string resourcePath = string `/admin/api/2025-01/themes/${getEncodedUri(themeId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        return self.clientEp->delete(resourcePath, request, headers);
    }

    # Remove an existing Webhook
    #
    # + headers - Headers to be sent with the request 
    # + return - Delete an existing webhook from a shop / Delete an existing webhook from a shop 
    remote isolated function removeAnExistingWebhook(string webhookId, string payload, map<string|string[]> headers = {}) returns record {}|error {
        string resourcePath = string `/admin/api/2025-01/webhooks/${getEncodedUri(webhookId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        return self.clientEp->delete(resourcePath, request, headers);
    }

    # Removes a comment
    #
    # + headers - Headers to be sent with the request 
    # + return - Remove a comment / Remove a comment 
    remote isolated function removesAComment(string commentId, record {} payload, map<string|string[]> headers = {}) returns RemoveCommentResponse|error {
        string resourcePath = string `/admin/api/2025-01/comments/${getEncodedUri(commentId)}/remove.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Removes a product from a collection
    #
    # + headers - Headers to be sent with the request 
    # + return - Delete the link between a product an a collection / Delete the link between a product an a collection 
    remote isolated function removesAProductFromACollection(string collectId, string payload, map<string|string[]> headers = {}) returns record {}|error {
        string resourcePath = string `/admin/api/2025-01/collects/${getEncodedUri(collectId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        return self.clientEp->delete(resourcePath, request, headers);
    }

    # Removes a smart collection
    #
    # + headers - Headers to be sent with the request 
    # + return - Remove a smart collection / Remove a smart collection 
    remote isolated function removesASmartCollection(string smartCollectionId, string payload, map<string|string[]> headers = {}) returns record {}|error {
        string resourcePath = string `/admin/api/2025-01/smart_collections/${getEncodedUri(smartCollectionId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        return self.clientEp->delete(resourcePath, request, headers);
    }

    # Removes an address from a customerâ€™s address list
    #
    # + headers - Headers to be sent with the request 
    # + return - Remove a customer address / Remove a customer address 
    remote isolated function removesAnAddressFromACustomerSAddressList(string customerId, string addressId, string payload, map<string|string[]> headers = {}) returns record {}|error {
        string resourcePath = string `/admin/api/2025-01/customers/${getEncodedUri(customerId)}/addresses/${getEncodedUri(addressId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        return self.clientEp->delete(resourcePath, request, headers);
    }

    # Reschedules the fulfill_at time of a scheduled fulfillment order
    #
    # + fulfillmentOrderId - The ID of the fulfillment order
    # + headers - Headers to be sent with the request 
    # + return - Move a fulfillment order to a new location / Move a fulfillment order to a new location 
    remote isolated function reschedulesTheFulfillAtTimeOfAScheduledFulfillmentOrder(string fulfillmentOrderId, FulfillmentOrderIdRescheduleJsonBody payload, map<string|string[]> headers = {}) returns MoveFulfillmentOrderResponse|error {
        string resourcePath = string `/admin/api/2025-01/fulfillment_orders/${getEncodedUri(fulfillmentOrderId)}/reschedule.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Restores a previously removed comment
    #
    # + headers - Headers to be sent with the request 
    # + return - Restore a removed comment / Restore a removed comment 
    remote isolated function restoresAPreviouslyRemovedComment(string commentId, record {} payload, map<string|string[]> headers = {}) returns RestoreRemoveComment|error {
        string resourcePath = string `/admin/api/2025-01/comments/${getEncodedUri(commentId)}/restore.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Retrieve a count of a resource's metafields.
    #
    # + headers - Headers to be sent with the request 
    remote isolated function retrieveACountOfAResourceSMetafields(string ownerId, string ownerResource, map<string|string[]> headers = {}) returns ObjectCount|error {
        string resourcePath = string `/admin/api/2025-01/${getEncodedUri(ownerId)}/${getEncodedUri(ownerResource)}/metafields/count.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieve a count of products that are published to your app
    #
    # + headers - Headers to be sent with the request 
    # + return - Retrieve a count of products that are published to your app / Retrieve a count of products that are published to your app 
    remote isolated function retrieveACountOfProductsThatArePublishedToYourApp(map<string|string[]> headers = {}) returns BlogsCount|error {
        string resourcePath = string `/admin/api/2025-01/product_listings/count.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieve a list of all blogs
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Get all blogs for a shop after a specified ID / Get all blogs for a shop / Get all blogs for a shop after a specified ID / Get all blogs for a shop 
    remote isolated function retrieveAListOfAllBlogs(map<string|string[]> headers = {}, *RetrieveAListOfAllBlogsQueries queries) returns Blogs|error {
        string resourcePath = string `/admin/api/2025-01/blogs.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieve a list of metafields from the resource's endpoint
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieve a list of metafields from the resource's endpoint 
    remote isolated function retrieveAListOfMetafieldsFromTheResourceSEndpoint(string ownerId, string ownerResource, map<string|string[]> headers = {}, *RetrieveAListOfMetafieldsFromTheResourceSEndpointQueries queries) returns MetafieldList|error {
        string resourcePath = string `/admin/api/2025-01/${getEncodedUri(ownerId)}/${getEncodedUri(ownerResource)}/metafields.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieve a list of products belonging to a collection
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieve a list of products belonging to a collection / Retrieve a list of products belonging to a collection 
    remote isolated function retrieveAListOfProductsBelongingToACollection(string collectionId, map<string|string[]> headers = {}, *RetrieveAListOfProductsBelongingToACollectionQueries queries) returns ProductsList|error {
        string resourcePath = string `/admin/api/2025-01/collections/${getEncodedUri(collectionId)}/products.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieve a specific collection listing that is published to your app
    #
    # + collectionListingId - The ID of the product collection
    # + headers - Headers to be sent with the request 
    # + return - Retrieve a specific collection listing that is published to your app / Retrieve a specific collection listing that is published to your app 
    remote isolated function retrieveASpecificCollectionListingThatIsPublishedToYourApp(string collectionListingId, map<string|string[]> headers = {}) returns CollectionListing|error {
        string resourcePath = string `/admin/api/2025-01/collection_listings/${getEncodedUri(collectionListingId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieve a specific metafield
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieve a specific metafield 
    remote isolated function retrieveASpecificMetafield(string ownerId, string ownerResource, string metafieldId, map<string|string[]> headers = {}, *RetrieveASpecificMetafieldQueries queries) returns MetafieldResponse|error {
        string resourcePath = string `/admin/api/2025-01/${getEncodedUri(ownerId)}/${getEncodedUri(ownerResource)}/metafields/${getEncodedUri(metafieldId)}.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieve a specific product listing that is published to your app
    #
    # + headers - Headers to be sent with the request 
    # + return - Retrieve a specific product listing that is published to your app / Retrieve a specific product listing that is published to your app 
    remote isolated function retrieveASpecificProductListingThatIsPublishedToYourApp(string productListingId, map<string|string[]> headers = {}) returns ProductListingAppResponse|error {
        string resourcePath = string `/admin/api/2025-01/product_listings/${getEncodedUri(productListingId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieve collection listings that are published to your app
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieve collection listings that are published to your app / Retrieve collection listings that are published to your app 
    remote isolated function retrieveCollectionListingsThatArePublishedToYourApp(map<string|string[]> headers = {}, *RetrieveCollectionListingsThatArePublishedToYourAppQueries queries) returns CollectionListingResponse|error {
        string resourcePath = string `/admin/api/2025-01/collection_listings.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieve product_ids that are published to a collection_id
    #
    # + collectionListingId - The ID of the product collection
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieve <code>product_ids</code> that are published to a <code>collection_id</code> / Retrieve <code>product_ids</code> that are published to a <code>collection_id</code> 
    remote isolated function retrieveProductIdsThatArePublishedToACollectionId(string collectionListingId, map<string|string[]> headers = {}, *RetrieveProductIdsThatArePublishedToACollectionIdQueries queries) returns ProductIds|error {
        string resourcePath = string `/admin/api/2025-01/collection_listings/${getEncodedUri(collectionListingId)}/product_ids.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieve product_ids that are published to your app
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieve <code>product_ids</code> that are published to your app / Retrieve <code>product_ids</code> that are published to your app 
    remote isolated function retrieveProductIdsThatArePublishedToYourApp(map<string|string[]> headers = {}, *RetrieveProductIdsThatArePublishedToYourAppQueries queries) returns ProductIdAppResponse|error {
        string resourcePath = string `/admin/api/2025-01/product_listings/product_ids.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieve product listings that are published to your app
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieve product listings that are published to your app / Retrieve product listings that are published to your app 
    remote isolated function retrieveProductListingsThatArePublishedToYourApp(map<string|string[]> headers = {}, *RetrieveProductListingsThatArePublishedToYourAppQueries queries) returns ProductListings|error {
        string resourcePath = string `/admin/api/2025-01/product_listings.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a checkout
    #
    # + headers - Headers to be sent with the request 
    # + return - Retrieve a completed checkout / Retrieve a completed checkout 
    remote isolated function retrievesACheckout(string token, map<string|string[]> headers = {}) returns CompleteCheckout|CheckoutResponse|error {
        string resourcePath = string `/admin/api/2025-01/checkouts/${getEncodedUri(token)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a count of all articles from a blog
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Count all a blog's articles / Count all a blog's articles 
    remote isolated function retrievesACountOfAllArticlesFromABlog(string blogId, map<string|string[]> headers = {}, *RetrievesACountOfAllArticlesFromABlogQueries queries) returns ArticlesCount|error {
        string resourcePath = string `/admin/api/2025-01/blogs/${getEncodedUri(blogId)}/articles/count.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a count of all marketing events
    #
    # + headers - Headers to be sent with the request 
    # + return - Retrieve a count all marketing events / Retrieve a count all marketing events 
    remote isolated function retrievesACountOfAllMarketingEvents(map<string|string[]> headers = {}) returns ObjectCount|error {
        string resourcePath = string `/admin/api/2025-01/marketing_events/count.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a count of all price rules
    #
    # + headers - Headers to be sent with the request 
    # + return - Retrieve a count of all price rules / Retrieve a count of all price rules 
    remote isolated function retrievesACountOfAllPriceRules(map<string|string[]> headers = {}) returns ObjectCount|error {
        string resourcePath = string `/admin/api/2025-01/price_rules/count.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a count of all script tags
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieve a count of all script tags for your shop / Retrieve a count of all script tags for your shop 
    remote isolated function retrievesACountOfAllScriptTags(map<string|string[]> headers = {}, *RetrievesACountOfAllScriptTagsQueries queries) returns BlogsCount|error {
        string resourcePath = string `/admin/api/2025-01/script_tags/count.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a count of an order's transactions
    #
    # + headers - Headers to be sent with the request 
    # + return - Count an order's transactions / Count an order's transactions 
    remote isolated function retrievesACountOfAnOrderSTransactions(string orderId, map<string|string[]> headers = {}) returns EventsCount|error {
        string resourcePath = string `/admin/api/2025-01/orders/${getEncodedUri(orderId)}/transactions/count.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a count of checkouts
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Count all checkouts / Count all checkouts 
    remote isolated function retrievesACountOfCheckouts(map<string|string[]> headers = {}, *RetrievesACountOfCheckoutsQueries queries) returns CheckoutCount|error {
        string resourcePath = string `/admin/api/2025-01/checkouts/count.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a count of collects
    #
    # + headers - Headers to be sent with the request 
    # + return - Count only collects for a certain collection / Count only collects for a certain product / Count all collects for the shop / Count only collects for a certain collection / Count only collects for a certain product / Count all collects for the shop 
    remote isolated function retrievesACountOfCollects(map<string|string[]> headers = {}) returns ObjectCount|error {
        string resourcePath = string `/admin/api/2025-01/collects/count.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a count of comments
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Count all comments for a certain article of a blog / Count all the comments for all the articles of a blog / Count all the comments for this shop / Count all comments for a certain article of a blog / Count all the comments for all the articles of a blog / Count all the comments for this shop 
    remote isolated function retrievesACountOfComments(map<string|string[]> headers = {}, *RetrievesACountOfCommentsQueries queries) returns BlogsCount|error {
        string resourcePath = string `/admin/api/2025-01/comments/count.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a count of countries
    #
    # + headers - Headers to be sent with the request 
    # + return - Count all countries / Count all countries 
    remote isolated function retrievesACountOfCountries(map<string|string[]> headers = {}) returns CountriesCount|error {
        string resourcePath = string `/admin/api/2025-01/countries/count.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a count of custom collections
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Count all custom collections that contain a given product / Count all custom collections / Count all custom collections that contain a given product / Count all custom collections 
    remote isolated function retrievesACountOfCustomCollections(map<string|string[]> headers = {}, *RetrievesACountOfCustomCollectionsQueries queries) returns BlogsCount|error {
        string resourcePath = string `/admin/api/2025-01/custom_collections/count.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a count of customers
    #
    # + headers - Headers to be sent with the request 
    remote isolated function retrievesACountOfCustomers(map<string|string[]> headers = {}) returns EventsCount|error {
        string resourcePath = string `/admin/api/2025-01/customers/count.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a count of discount codes for a shop
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    remote isolated function retrievesACountOfDiscountCodesForAShop(map<string|string[]> headers = {}, *RetrievesACountOfDiscountCodesForAShopQueries queries) returns EventsCount|error {
        string resourcePath = string `/admin/api/2025-01/discount_codes/count.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a count of events
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Count all events / Count of the number of events since a particular time / Count all events / Count of the number of events since a particular time 
    remote isolated function retrievesACountOfEvents(map<string|string[]> headers = {}, *RetrievesACountOfEventsQueries queries) returns EventsCount|error {
        string resourcePath = string `/admin/api/2025-01/events/count.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    #         Retrieves a count of fulfillments associated with a specific order
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Count the total number of fulfillments for an order / Count the total number of fulfillments for an order 
    remote isolated function retrievesACountOfFulfillmentsAssociatedWithASpecificOrder(string orderId, map<string|string[]> headers = {}, *RetrievesACountOfFulfillmentsAssociatedWithASpecificOrderQueries queries) returns ObjectCount|error {
        string resourcePath = string `/admin/api/2025-01/orders/${getEncodedUri(orderId)}/fulfillments/count.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a count of gift cards
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieve a count of enabled gift cards / Retrieve a count of all gift cards / Retrieve a count of enabled gift cards / Retrieve a count of all gift cards 
    remote isolated function retrievesACountOfGiftCards(map<string|string[]> headers = {}, *RetrievesACountOfGiftCardsQueries queries) returns EventsCount|error {
        string resourcePath = string `/admin/api/2025-01/gift_cards/count.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a count of locations
    #
    # + headers - Headers to be sent with the request 
    # + return - Count all store locations / Count all store locations 
    remote isolated function retrievesACountOfLocations(map<string|string[]> headers = {}) returns StoreLocationCount|error {
        string resourcePath = string `/admin/api/2025-01/locations/count.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a count of products
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieve a count of all products of a given collection / Retrieve a count of all products / Retrieve a count of all products of a given collection / Retrieve a count of all products 
    remote isolated function retrievesACountOfProducts(map<string|string[]> headers = {}, *RetrievesACountOfProductsQueries queries) returns ObjectCount|error {
        string resourcePath = string `/admin/api/2025-01/products/count.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a count of provinces for a country
    #
    # + headers - Headers to be sent with the request 
    # + return - Count all provinces / Count all provinces 
    remote isolated function retrievesACountOfProvincesForACountry(string countryId, map<string|string[]> headers = {}) returns ProvincesCount|error {
        string resourcePath = string `/admin/api/2025-01/countries/${getEncodedUri(countryId)}/provinces/count.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a count of smart collections
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieve a count of all smart collections for a certain product_id / Retrieve a count of all smart collections / Retrieve a count of all smart collections for a certain product_id / Retrieve a count of all smart collections 
    remote isolated function retrievesACountOfSmartCollections(map<string|string[]> headers = {}, *RetrievesACountOfSmartCollectionsQueries queries) returns ObjectCount|error {
        string resourcePath = string `/admin/api/2025-01/smart_collections/count.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a count of URL redirects
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Count all redirects / Count all redirects 
    remote isolated function retrievesACountOfUrlRedirects(map<string|string[]> headers = {}, *RetrievesACountOfUrlRedirectsQueries queries) returns EventsCount|error {
        string resourcePath = string `/admin/api/2025-01/redirects/count.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a detailed list for inventory items by IDs
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    remote isolated function retrievesADetailedListForInventoryItemsByIds(map<string|string[]> headers = {}, *RetrievesADetailedListForInventoryItemsByIdsQueries queries) returns error? {
        string resourcePath = string `/admin/api/2025-01/inventory_items.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a discount code creation job
    #
    # + priceRuleId - The ID of the price rule
    # + headers - Headers to be sent with the request 
    # + return - Retrieve a discount code creation job / Retrieve a discount code creation job 
    remote isolated function retrievesADiscountCodeCreationJob(string priceRuleId, string batchId, map<string|string[]> headers = {}) returns DiscountCodeResponse|error {
        string resourcePath = string `/admin/api/2025-01/price_rules/${getEncodedUri(priceRuleId)}/batch/${getEncodedUri(batchId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a list of abandoned checkouts
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieve all abandoned checkouts / Retrieve all abandoned checkouts 
    remote isolated function retrievesAListOfAbandonedCheckouts(map<string|string[]> headers = {}, *RetrievesAListOfAbandonedCheckoutsQueries queries) returns AbandonedCheckouts|error {
        string resourcePath = string `/admin/api/2025-01/checkouts.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a list of addresses for a customer
    #
    # + headers - Headers to be sent with the request 
    # + return - Retrieve all of a customerâ€™s addresses / Retrieve a limited number of addresses for a customer / Retrieve all of a customerâ€™s addresses / Retrieve a limited number of addresses for a customer 
    remote isolated function retrievesAListOfAddressesForACustomer(string customerId, map<string|string[]> headers = {}) returns AddressList|error {
        string resourcePath = string `/admin/api/2025-01/customers/${getEncodedUri(customerId)}/addresses.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a list of all article authors
    #
    # + headers - Headers to be sent with the request 
    # + return - Retrieve a list of all article authors / Retrieve a list of all article authors 
    remote isolated function retrievesAListOfAllArticleAuthors(map<string|string[]> headers = {}) returns ArticleAuthors|error {
        string resourcePath = string `/admin/api/2025-01/articles/authors.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a list of all article tags
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieve a list of all tags from a specific blog / Retrieve a list of the most popular tags / Retrieve a list of all tags for all articles / Retrieve a list of the most popular tags from a specific blog / Retrieve a list of all tags from a specific blog / Retrieve a list of the most popular tags / Retrieve a list of all tags for all articles / Retrieve a list of the most popular tags from a specific blog 
    remote isolated function retrievesAListOfAllArticleTags(map<string|string[]> headers = {}, *RetrievesAListOfAllArticleTagsQueries queries) returns TagsList|error {
        string resourcePath = string `/admin/api/2025-01/articles/tags.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a list of all article tags from a specific blog
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieves a list of all article tags from a specific blog 
    remote isolated function retrievesAListOfAllArticleTagsFromASpecificBlog(string blogId, map<string|string[]> headers = {}, *RetrievesAListOfAllArticleTagsFromASpecificBlogQueries queries) returns Articles|error {
        string resourcePath = string `/admin/api/2025-01/blogs/${getEncodedUri(blogId)}/articles/tags.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a list of all articles from a blog
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieve all articles from a blog after a specified ID / Retrieve a list of articles from a blog / Retrieve all articles from a blog after a specified ID / Retrieve a list of articles from a blog 
    remote isolated function retrievesAListOfAllArticlesFromABlog(string blogId, map<string|string[]> headers = {}, *RetrievesAListOfAllArticlesFromABlogQueries queries) returns Articles|error {
        string resourcePath = string `/admin/api/2025-01/blogs/${getEncodedUri(blogId)}/articles.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a list of all marketing events
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieve all marketing events / Retrieve all marketing events 
    remote isolated function retrievesAListOfAllMarketingEvents(map<string|string[]> headers = {}, *RetrievesAListOfAllMarketingEventsQueries queries) returns MarketingEvents|error {
        string resourcePath = string `/admin/api/2025-01/marketing_events.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a list of all order risks for an order
    #
    # + headers - Headers to be sent with the request 
    # + return - Retrieve all order risks for an order / Retrieve all order risks for an order 
    remote isolated function retrievesAListOfAllOrderRisksForAnOrder(string orderId, map<string|string[]> headers = {}) returns OrderRisks|error {
        string resourcePath = string `/admin/api/2025-01/orders/${getEncodedUri(orderId)}/risks.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a list of all script tags
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieve a list of all script tags after the specified ID / Retrieve a list of all script tags / Retrieve a list of all script tags with a particular URL / Retrieve a list of all script tags after the specified ID / Retrieve a list of all script tags / Retrieve a list of all script tags with a particular URL 
    remote isolated function retrievesAListOfAllScriptTags(map<string|string[]> headers = {}, *RetrievesAListOfAllScriptTagsQueries queries) returns ScriptTagsList|error {
        string resourcePath = string `/admin/api/2025-01/script_tags.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a list of all users
    #
    # + headers - Headers to be sent with the request 
    # + return - Retrieve a list of all users / Retrieve a list of all users 
    remote isolated function retrievesAListOfAllUsers(map<string|string[]> headers = {}) returns UsersList|error {
        string resourcePath = string `/admin/api/2025-01/users.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a list of application charges
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieves a list of application charges / Retrieves a list of application charges 
    remote isolated function retrievesAListOfApplicationCharges(map<string|string[]> headers = {}, *RetrievesAListOfApplicationChargesQueries queries) returns ApplicationChargesList|error {
        string resourcePath = string `/admin/api/2025-01/application_charges.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a list of assets for a theme
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieve a list of all assets for a theme / Retrieve a theme image / Retrieve a Liquid template / Retrieve a list of all assets for a theme / Retrieve a theme image / Retrieve a Liquid template 
    remote isolated function retrievesAListOfAssetsForATheme(string themeId, map<string|string[]> headers = {}, *RetrievesAListOfAssetsForAThemeQueries queries) returns AssetsList|error {
        string resourcePath = string `/admin/api/2025-01/themes/${getEncodedUri(themeId)}/assets.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a list of carrier services
    #
    # + headers - Headers to be sent with the request 
    # + return - Retrieve a list of carrier services / Retrieve a list of carrier services 
    remote isolated function retrievesAListOfCarrierServices(map<string|string[]> headers = {}) returns CarrierServiceList|error {
        string resourcePath = string `/admin/api/2025-01/carrier_services.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a list of collects
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieve only collects for a certain product / Retrieve all collects for the shop / Retrieve only collects for a certain collection / Retrieve only collects for a certain product / Retrieve all collects for the shop / Retrieve only collects for a certain collection 
    remote isolated function retrievesAListOfCollects(map<string|string[]> headers = {}, *RetrievesAListOfCollectsQueries queries) returns CollectsList|error {
        string resourcePath = string `/admin/api/2025-01/collects.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a list of comments
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieve all the comments for a certain article of a blog / Retrieve all the comments for this shop / Retrieve all comments for this shop after the specified ID / Retrieve all the comments for all the articles of a blog / Retrieve all the comments for a certain article of a blog / Retrieve all the comments for this shop / Retrieve all comments for this shop after the specified ID / Retrieve all the comments for all the articles of a blog 
    remote isolated function retrievesAListOfComments(map<string|string[]> headers = {}, *RetrievesAListOfCommentsQueries queries) returns ArticleComments|error {
        string resourcePath = string `/admin/api/2025-01/comments.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a list of currencies enabled on a shop
    #
    # + headers - Headers to be sent with the request 
    # + return - Retrieve a list of currencies enabled on a shop / Retrieve a list of currencies enabled on a shop 
    remote isolated function retrievesAListOfCurrenciesEnabledOnAShop(map<string|string[]> headers = {}) returns CurrenciesList|error {
        string resourcePath = string `/admin/api/2025-01/currencies.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a list of custom collections
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieve all collections / Retrieve all collections after the specified ID / Retrieve a list of specific custom collections / Retrieve all custom collections that contain a given product / Retrieve all collections / Retrieve all collections after the specified ID / Retrieve a list of specific custom collections / Retrieve all custom collections that contain a given product 
    remote isolated function retrievesAListOfCustomCollections(map<string|string[]> headers = {}, *RetrievesAListOfCustomCollectionsQueries queries) returns CollectionList|error {
        string resourcePath = string `/admin/api/2025-01/custom_collections.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a list of customers
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieve a list of customers / Retrieve a list of customers 
    remote isolated function retrievesAListOfCustomers(map<string|string[]> headers = {}, *RetrievesAListOfCustomersQueries queries) returns Customers|error {
        string resourcePath = string `/admin/api/2025-01/customers.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a list of discount codes
    #
    # + priceRuleId - The ID of the price rule
    # + headers - Headers to be sent with the request 
    # + return - Retrieve a list of all discount codes / Retrieve a list of all discount codes 
    remote isolated function retrievesAListOfDiscountCodes(string priceRuleId, map<string|string[]> headers = {}) returns DiscountCodes|error {
        string resourcePath = string `/admin/api/2025-01/price_rules/${getEncodedUri(priceRuleId)}/discount_codes.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a list of discount codes for a discount code creation job
    #
    # + priceRuleId - The ID of the price rule
    # + headers - Headers to be sent with the request 
    # + return - Retrieve a list of discount codes for a discount code creation job / Retrieve a list of discount codes for a discount code creation job 
    remote isolated function retrievesAListOfDiscountCodesForADiscountCodeCreationJob(string priceRuleId, string batchId, map<string|string[]> headers = {}) returns DiscountCodeList|error {
        string resourcePath = string `/admin/api/2025-01/price_rules/${getEncodedUri(priceRuleId)}/batch/${getEncodedUri(batchId)}/discount_codes.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a list of draft orders
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - List all draft orders / List all draft orders 
    remote isolated function retrievesAListOfDraftOrders(map<string|string[]> headers = {}, *RetrievesAListOfDraftOrdersQueries queries) returns DraftOrders|error {
        string resourcePath = string `/admin/api/2025-01/draft_orders.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a list of events
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieve a list of events related to products that were deleted / Retrieve a list of all events from a specific order / Retrieve all events after the specified ID / Retrieve an event after a specific ID using <code>since_id</code> / Retrieve a list of all events related to products and orders / Retrieve all events from a specific product / Retrieve a list of events that occured at the specified time / Retrieve a list of all events for a shop / Retrieve a list of events related to products that were deleted / Retrieve a list of all events from a specific order / Retrieve all events after the specified ID / Retrieve an event after a specific ID using <code>since_id</code> / Retrieve a list of all events related to products and orders / Retrieve all events from a specific product / Retrieve a list of events that occured at the specified time / Retrieve a list of all events for a shop 
    remote isolated function retrievesAListOfEvents(map<string|string[]> headers = {}, *RetrievesAListOfEventsQueries queries) returns EventsList|error {
        string resourcePath = string `/admin/api/2025-01/events.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a list of fulfillment events for a specific fulfillment
    #
    # + headers - Headers to be sent with the request 
    # + return - Retrieve a list of all the fulfillment events that are associated with a specific fulfillment / Retrieve a list of all the fulfillment events that are associated with a specific fulfillment 
    remote isolated function retrievesAListOfFulfillmentEventsForASpecificFulfillment(string orderId, string fulfillmentId, map<string|string[]> headers = {}) returns FulfillmentEvents|error {
        string resourcePath = string `/admin/api/2025-01/orders/${getEncodedUri(orderId)}/fulfillments/${getEncodedUri(fulfillmentId)}/events.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a list of fulfillment orders assigned to the shop locations that are owned by the app
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieve a list of fulfillment orders in cancellation_requested state at a location for an app / Retrieve a list of fulfillment orders in cancellation_requested state at a location for an app 
    remote isolated function retrievesAListOfFulfillmentOrdersAssignedToTheShopLocationsThatAreOwnedByTheApp(map<string|string[]> headers = {}, *RetrievesAListOfFulfillmentOrdersAssignedToTheShopLocationsThatAreOwnedByTheAppQueries queries) returns FulfillmentOrders|error {
        string resourcePath = string `/admin/api/2025-01/assigned_fulfillment_orders.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a list of fulfillment orders for a specific order
    #
    # + headers - Headers to be sent with the request 
    # + return - Retrieve a list of all fulfillment orders for an order / Retrieve a list of all fulfillment orders for an order 
    remote isolated function retrievesAListOfFulfillmentOrdersForASpecificOrder(string orderId, map<string|string[]> headers = {}) returns FulfillmentOrdersList|error {
        string resourcePath = string `/admin/api/2025-01/orders/${getEncodedUri(orderId)}/fulfillment_orders.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a list of gift cards
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieve a list of all gift cards / Retrieve a list of all enabled gift cards / Retrieve a list of all gift cards / Retrieve a list of all enabled gift cards 
    remote isolated function retrievesAListOfGiftCards(map<string|string[]> headers = {}, *RetrievesAListOfGiftCardsQueries queries) returns GiftCardsList|error {
        string resourcePath = string `/admin/api/2025-01/gift_cards.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a list of inventory levels
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieve inventory levels for the specified inventory items and locations / Retrieve inventory levels at a single location / Retrieve inventory levels for a single inventory item / Retrieve inventory levels for the specified inventory items and locations / Retrieve inventory levels at a single location / Retrieve inventory levels for a single inventory item 
    remote isolated function retrievesAListOfInventoryLevels(map<string|string[]> headers = {}, *RetrievesAListOfInventoryLevelsQueries queries) returns InventoryLevels|error {
        string resourcePath = string `/admin/api/2025-01/inventory_levels.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a list of inventory levels for a location.
    #
    # + headers - Headers to be sent with the request 
    # + return - Retrieve a list of all inventory for a location by its ID / Retrieve a list of all inventory for a location by its ID 
    remote isolated function retrievesAListOfInventoryLevelsForALocation(string locationId, map<string|string[]> headers = {}) returns InventoryListResponse|error {
        string resourcePath = string `/admin/api/2025-01/locations/${getEncodedUri(locationId)}/inventory_levels.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a list of locations
    #
    # + headers - Headers to be sent with the request 
    # + return - Retrieve a list of all locations / Retrieve a list of all locations 
    remote isolated function retrievesAListOfLocations(map<string|string[]> headers = {}) returns LocationList|error {
        string resourcePath = string `/admin/api/2025-01/locations.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a list of locations that a fulfillment order can potentially move to.
    #
    # + fulfillmentOrderId - The ID of the fulfillment order
    # + headers - Headers to be sent with the request 
    # + return - Retrieve a list of locations that a fulfillment order can potentially move to. / Retrieve a list of locations that a fulfillment order can potentially move to. 
    remote isolated function retrievesAListOfLocationsThatAFulfillmentOrderCanPotentiallyMoveTo(string fulfillmentOrderId, map<string|string[]> headers = {}) returns LocationsList|error {
        string resourcePath = string `/admin/api/2025-01/fulfillment_orders/${getEncodedUri(fulfillmentOrderId)}/locations_for_move.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a list of orders
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieve all orders but show only certain properties / Retrieve specific orders / Retrieve orders that have authorized payments ready to be captured / Retrieve all orders / Retrieve orders last updated after 2005-07-31 15:57:11 in the EDT timezone / Retrieve all orders after the specified ID / Retrieve all orders but show only certain properties / Retrieve specific orders / Retrieve orders that have authorized payments ready to be captured / Retrieve all orders / Retrieve orders last updated after 2005-07-31 15:57:11 in the EDT timezone / Retrieve all orders after the specified ID 
    remote isolated function retrievesAListOfOrders(map<string|string[]> headers = {}, *RetrievesAListOfOrdersQueries queries) returns OrdersList|error {
        string resourcePath = string `/admin/api/2025-01/orders.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a list of pages
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieve a list of all pages after the specified ID / Get all pages for a shop / Retrieve a list of all pages after the specified ID / Get all pages for a shop 
    remote isolated function retrievesAListOfPages(map<string|string[]> headers = {}, *RetrievesAListOfPagesQueries queries) returns PagesListResponse|error {
        string resourcePath = string `/admin/api/2025-01/pages.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a list of payments on a particular checkout
    #
    # + headers - Headers to be sent with the request 
    # + return - Retrieve all the payments on a checkout 
    remote isolated function retrievesAListOfPaymentsOnAParticularCheckout(string token, map<string|string[]> headers = {}) returns PaymentsResponse|error {
        string resourcePath = string `/admin/api/2025-01/checkouts/${getEncodedUri(token)}/payments.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a list of price rules
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieve all price rules / Retrieve all price rules 
    remote isolated function retrievesAListOfPriceRules(map<string|string[]> headers = {}, *RetrievesAListOfPriceRulesQueries queries) returns PriceRules|error {
        string resourcePath = string `/admin/api/2025-01/price_rules.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a list of product variants
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieve all variants for a product / Retrieve all variants for a product with prices in specified presentment currencies / Retrieve all variants for a product after a specified ID / Retrieve all variants for a product / Retrieve all variants for a product with prices in specified presentment currencies / Retrieve all variants for a product after a specified ID 
    remote isolated function retrievesAListOfProductVariants(string productId, map<string|string[]> headers = {}, *RetrievesAListOfProductVariantsQueries queries) returns ProductVariants|error {
        string resourcePath = string `/admin/api/2025-01/products/${getEncodedUri(productId)}/variants.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a list of products
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieve all products, showing only some attributes / Retrieve all products with prices in selected presentment currencies / Retrieve all products that belong to a certain collection / Retrieve all products / Retrieve all products after the specified ID / Retrieve a list of specific products. / Retrieve all products, showing only some attributes / Retrieve all products with prices in selected presentment currencies / Retrieve all products that belong to a certain collection / Retrieve all products / Retrieve all products after the specified ID / Retrieve a list of specific products. 
    remote isolated function retrievesAListOfProducts(map<string|string[]> headers = {}, *RetrievesAListOfProductsQueries queries) returns ProductsResponse|error {
        string resourcePath = string `/admin/api/2025-01/products.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a list of provinces for a country
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieve all provinces for a country / Retrieve all provinces for a country after the specified ID / Retrieve all provinces for a country / Retrieve all provinces for a country after the specified ID 
    remote isolated function retrievesAListOfProvincesForACountry(string countryId, map<string|string[]> headers = {}, *RetrievesAListOfProvincesForACountryQueries queries) returns ProvincesList|error {
        string resourcePath = string `/admin/api/2025-01/countries/${getEncodedUri(countryId)}/provinces.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a list of recurring application charges
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieves a list of recurring application charges / Retrieves a list of recurring application charges 
    remote isolated function retrievesAListOfRecurringApplicationCharges(map<string|string[]> headers = {}, *RetrievesAListOfRecurringApplicationChargesQueries queries) returns RecurringApplicationCharges|error {
        string resourcePath = string `/admin/api/2025-01/recurring_application_charges.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a list of refunds for an order
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieve all refunds from a specific order / Retrieve all refunds from a specific order 
    remote isolated function retrievesAListOfRefundsForAnOrder(string orderId, map<string|string[]> headers = {}, *RetrievesAListOfRefundsForAnOrderQueries queries) returns Refunds|error {
        string resourcePath = string `/admin/api/2025-01/orders/${getEncodedUri(orderId)}/refunds.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a list of reports
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieves a list of reports 
    remote isolated function retrievesAListOfReports(map<string|string[]> headers = {}, *RetrievesAListOfReportsQueries queries) returns ReportList|error {
        string resourcePath = string `/admin/api/2025-01/reports.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a list of shipping rates
    #
    # + headers - Headers to be sent with the request 
    # + return - Retrieve available shipping rates / Retrieving shipping rates when none are available for the current shipping address or cart returns an empty array / Retrieve available shipping rates / Retrieving shipping rates when none are available for the current shipping address or cart returns an empty array 
    remote isolated function retrievesAListOfShippingRates(string token, map<string|string[]> headers = {}) returns AvailableShippingRates|ShippingRates|error {
        string resourcePath = string `/admin/api/2025-01/checkouts/${getEncodedUri(token)}/shipping_rates.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a list of smart collections
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieve a list of all smart collections for a certain product_id / Retrieve a list of specific smart collections / Retrieve a list of all smart collections / Retrieve a list all smart collections after a specified ID / Retrieve a list of all smart collections for a certain product_id / Retrieve a list of specific smart collections / Retrieve a list of all smart collections / Retrieve a list all smart collections after a specified ID 
    remote isolated function retrievesAListOfSmartCollections(map<string|string[]> headers = {}, *RetrievesAListOfSmartCollectionsQueries queries) returns SmartCollectionList|error {
        string resourcePath = string `/admin/api/2025-01/smart_collections.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a list of storefront access tokens that have been issued
    #
    # + headers - Headers to be sent with the request 
    # + return - Retrieve a list of storefront access tokens that have been issued / Retrieve a list of storefront access tokens that have been issued 
    remote isolated function retrievesAListOfStorefrontAccessTokensThatHaveBeenIssued(map<string|string[]> headers = {}) returns StorefrontAccessTokens|error {
        string resourcePath = string `/admin/api/2025-01/storefront_access_tokens.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a list of tender transactions
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieve tender transactions processed_at the specified date / Retrieve tender transactions after the specified ID / Retrieve tender transactions ordered by <code>processed_at</code> / Retrieve tender transactions processed_at or after the specified date / Retrieve all tender transactions / Retrieve tender transactions processed_at or before the specified date / Retrieve tender transactions processed_at the specified date / Retrieve tender transactions after the specified ID / Retrieve tender transactions ordered by <code>processed_at</code> / Retrieve tender transactions processed_at or after the specified date / Retrieve all tender transactions / Retrieve tender transactions processed_at or before the specified date 
    remote isolated function retrievesAListOfTenderTransactions(map<string|string[]> headers = {}, *RetrievesAListOfTenderTransactionsQueries queries) returns TenderTransactions|error {
        string resourcePath = string `/admin/api/2025-01/tender_transactions.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a list of the shop's policies
    #
    # + headers - Headers to be sent with the request 
    # + return - Retrieve a list of the shop's policies / Retrieve a list of the shop's policies 
    remote isolated function retrievesAListOfTheShopSPolicies(map<string|string[]> headers = {}) returns ShopPoliciesList|error {
        string resourcePath = string `/admin/api/2025-01/policies.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a list of themes
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieve a list of themes / Retrieve a list of themes 
    remote isolated function retrievesAListOfThemes(map<string|string[]> headers = {}, *RetrievesAListOfThemesQueries queries) returns ThemesList|error {
        string resourcePath = string `/admin/api/2025-01/themes.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a list of transactions
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieve an order's transactions / Retrieve an order's transactions after a specified ID / Retrieve an order's transactions / Retrieve an order's transactions after a specified ID 
    remote isolated function retrievesAListOfTransactions(string orderId, map<string|string[]> headers = {}, *RetrievesAListOfTransactionsQueries queries) returns TransactionsList|error {
        string resourcePath = string `/admin/api/2025-01/orders/${getEncodedUri(orderId)}/transactions.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a list of URL redirects
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieve a list of URL redirects after a specified ID / Retrieve a list of all redirects / Retrieve a list of URL redirects after a specified ID / Retrieve a list of all redirects 
    remote isolated function retrievesAListOfUrlRedirects(map<string|string[]> headers = {}, *RetrievesAListOfUrlRedirectsQueries queries) returns UrlList|error {
        string resourcePath = string `/admin/api/2025-01/redirects.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a list of usage charges
    #
    # + recurringApplicationChargeId - The ID of the recurring application charge.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieve all usage charges / Retrieve all usage charges 
    remote isolated function retrievesAListOfUsageCharges(string recurringApplicationChargeId, map<string|string[]> headers = {}, *RetrievesAListOfUsageChargesQueries queries) returns UsageChargeList|error {
        string resourcePath = string `/admin/api/2025-01/recurring_application_charges/${getEncodedUri(recurringApplicationChargeId)}/usage_charges.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a list of webhooks
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieve a list of all webhook subscriptions for your shop / Retrieve a list of all webhook subscriptions for your shop after a specified <code>id</code> / Retrieve a list of all webhook subscriptions for your shop / Retrieve a list of all webhook subscriptions for your shop after a specified <code>id</code> 
    remote isolated function retrievesAListOfWebhooks(map<string|string[]> headers = {}, *RetrievesAListOfWebhooksQueries queries) returns SubscriptionsList|error {
        string resourcePath = string `/admin/api/2025-01/webhooks.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a page count
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieve a count of all pages / Retrieve a count of all pages 
    remote isolated function retrievesAPageCount(map<string|string[]> headers = {}, *RetrievesAPageCountQueries queries) returns ArticlesCount|error {
        string resourcePath = string `/admin/api/2025-01/pages/count.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a single application credit
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieves a single application credit / Retrieves a single application credit 
    remote isolated function retrievesASingleApplicationCredit(string aplicationCreditId, map<string|string[]> headers = {}, *RetrievesASingleApplicationCreditQueries queries) returns ApplicationCredit|error {
        string resourcePath = string `/admin/api/2025-01/application_credits/${getEncodedUri(aplicationCreditId)}.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a single carrier service
    #
    # + headers - Headers to be sent with the request 
    # + return - Retrieve a single carrier service / Retrieve a single carrier service 
    remote isolated function retrievesASingleCarrierService(string carrierServiceId, map<string|string[]> headers = {}) returns SingleCarrierService|error {
        string resourcePath = string `/admin/api/2025-01/carrier_services/${getEncodedUri(carrierServiceId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a single charge
    #
    # + recurringApplicationChargeId - The ID of the recurring application charge.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieves a single charge / Retrieves a single charge 
    remote isolated function retrievesASingleCharge(string recurringApplicationChargeId, map<string|string[]> headers = {}, *RetrievesASingleChargeQueries queries) returns SingleCharge|error {
        string resourcePath = string `/admin/api/2025-01/recurring_application_charges/${getEncodedUri(recurringApplicationChargeId)}.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a single charge
    #
    # + recurringApplicationChargeId - The ID of the recurring application charge.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieves a single charge / Retrieves a single charge 
    remote isolated function retrievesASingleCharge1(string recurringApplicationChargeId, string usageChargeId, map<string|string[]> headers = {}, *RetrievesASingleCharge1Queries queries) returns SingleUsageCharge|error {
        string resourcePath = string `/admin/api/2025-01/recurring_application_charges/${getEncodedUri(recurringApplicationChargeId)}/usage_charges/${getEncodedUri(usageChargeId)}.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a single collection
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieve a specific collection by its ID / Retrieve a specific collection by its ID 
    remote isolated function retrievesASingleCollection(string collectionId, map<string|string[]> headers = {}, *RetrievesASingleCollectionQueries queries) returns SingleCollection|error {
        string resourcePath = string `/admin/api/2025-01/collections/${getEncodedUri(collectionId)}.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a single comment by its ID
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieve a single comment / Retrieve a single comment 
    remote isolated function retrievesASingleCommentByItsId(string commentId, map<string|string[]> headers = {}, *RetrievesASingleCommentByItsIdQueries queries) returns SingleCommentResponse|error {
        string resourcePath = string `/admin/api/2025-01/comments/${getEncodedUri(commentId)}.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a single custom collection
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieve a specific collection by its ID / Retrieve a specific collection by its ID 
    remote isolated function retrievesASingleCustomCollection(string customCollectionId, map<string|string[]> headers = {}, *RetrievesASingleCustomCollectionQueries queries) returns SingleCustomCollection|error {
        string resourcePath = string `/admin/api/2025-01/custom_collections/${getEncodedUri(customCollectionId)}.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a single customer
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieves a single customer 
    remote isolated function retrievesASingleCustomer(string customerId, map<string|string[]> headers = {}, *RetrievesASingleCustomerQueries queries) returns CustomerResponse|error {
        string resourcePath = string `/admin/api/2025-01/customers/${getEncodedUri(customerId)}.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a single discount code
    #
    # + priceRuleId - The ID of the price rule
    # + headers - Headers to be sent with the request 
    # + return - Retrieve a single discount code / Retrieve a single discount code 
    remote isolated function retrievesASingleDiscountCode(string priceRuleId, string discountCodeId, map<string|string[]> headers = {}) returns SingleDiscountCode|error {
        string resourcePath = string `/admin/api/2025-01/price_rules/${getEncodedUri(priceRuleId)}/discount_codes/${getEncodedUri(discountCodeId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a single event
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieves a single event by its ID / Retrieves a single event by its ID 
    remote isolated function retrievesASingleEvent(string eventId, map<string|string[]> headers = {}, *RetrievesASingleEventQueries queries) returns SingleEvent|error {
        string resourcePath = string `/admin/api/2025-01/events/${getEncodedUri(eventId)}.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a single gift card
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieve a single gift card / Retrieve a single gift card 
    remote isolated function retrievesASingleGiftCard(string giftCardId, map<string|string[]> headers = {}, *RetrievesASingleGiftCardQueries queries) returns SingleGiftCard|error {
        string resourcePath = string `/admin/api/2025-01/gift_cards/${getEncodedUri(giftCardId)}.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a single inventory item by ID
    #
    # + headers - Headers to be sent with the request 
    # + return - Retrieve an inventory item by ID / Retrieve an inventory item by ID 
    remote isolated function retrievesASingleInventoryItemById(string inventoryItemId, map<string|string[]> headers = {}) returns InventoryItem|error {
        string resourcePath = string `/admin/api/2025-01/inventory_items/${getEncodedUri(inventoryItemId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a single location by its ID
    #
    # + headers - Headers to be sent with the request 
    # + return - Retrieve a single location / Retrieve a single location 
    remote isolated function retrievesASingleLocationByItsId(string locationId, map<string|string[]> headers = {}) returns SingleLocation|error {
        string resourcePath = string `/admin/api/2025-01/locations/${getEncodedUri(locationId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a single marketing event
    #
    # + headers - Headers to be sent with the request 
    # + return - Retrieve a single marketing event by its ID / Retrieve a single marketing event by its ID 
    remote isolated function retrievesASingleMarketingEvent(string marketingEventId, map<string|string[]> headers = {}) returns MarketingEvent|error {
        string resourcePath = string `/admin/api/2025-01/marketing_events/${getEncodedUri(marketingEventId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a single order risk by its ID
    #
    # + headers - Headers to be sent with the request 
    # + return - Retrieve a single order risk / Retrieve a single order risk 
    remote isolated function retrievesASingleOrderRiskByItsId(string orderId, string riskId, map<string|string[]> headers = {}) returns SingleOrderRisk|error {
        string resourcePath = string `/admin/api/2025-01/orders/${getEncodedUri(orderId)}/risks/${getEncodedUri(riskId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a single page by its ID
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieve a single page / Retrieve a single page 
    remote isolated function retrievesASinglePageByItsId(string pageId, map<string|string[]> headers = {}, *RetrievesASinglePageByItsIdQueries queries) returns SinglePageResponse|error {
        string resourcePath = string `/admin/api/2025-01/pages/${getEncodedUri(pageId)}.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a single payment
    #
    # + headers - Headers to be sent with the request 
    # + return - Retrieve a payment with a succesful transaction / Retrieve a payment with a failed transaction / Retrieve a payment with a succesful transaction / Retrieve a payment with a failed transaction 
    remote isolated function retrievesASinglePayment(string token, string paymentId, map<string|string[]> headers = {}) returns SinglePaymentResponse|error {
        string resourcePath = string `/admin/api/2025-01/checkouts/${getEncodedUri(token)}/payments/${getEncodedUri(paymentId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a single price rule
    #
    # + priceRuleId - The ID of the price rule
    # + headers - Headers to be sent with the request 
    # + return - Retrieve a single price rule by its ID / Retrieve a single price rule by its ID 
    remote isolated function retrievesASinglePriceRule(string priceRuleId, map<string|string[]> headers = {}) returns SinglePriceRule|error {
        string resourcePath = string `/admin/api/2025-01/price_rules/${getEncodedUri(priceRuleId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a single product
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieve only particular fields / Retrieve a single product by ID / Retrieve only particular fields / Retrieve a single product by ID 
    remote isolated function retrievesASingleProduct(string productId, map<string|string[]> headers = {}, *RetrievesASingleProductQueries queries) returns SingleProduct|error {
        string resourcePath = string `/admin/api/2025-01/products/${getEncodedUri(productId)}.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a single province for a country
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieve a single province / Retrieve a single province 
    remote isolated function retrievesASingleProvinceForACountry(string countryId, string provinceId, map<string|string[]> headers = {}, *RetrievesASingleProvinceForACountryQueries queries) returns SingleProvince|error {
        string resourcePath = string `/admin/api/2025-01/countries/${getEncodedUri(countryId)}/provinces/${getEncodedUri(provinceId)}.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a single redirect
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieve a single redirect by its ID / Retrieve a single redirect by its ID 
    remote isolated function retrievesASingleRedirect(string redirectId, map<string|string[]> headers = {}, *RetrievesASingleRedirectQueries queries) returns SingleRedirect|error {
        string resourcePath = string `/admin/api/2025-01/redirects/${getEncodedUri(redirectId)}.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a single report
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieves a single report 
    remote isolated function retrievesASingleReport(string reportId, map<string|string[]> headers = {}, *RetrievesASingleReportQueries queries) returns SingleReportResponse|error {
        string resourcePath = string `/admin/api/2025-01/reports/${getEncodedUri(reportId)}.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a single script tag
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieve a single script tag by its ID / Retrieve a single script tag by its ID 
    remote isolated function retrievesASingleScriptTag(string scriptTagId, map<string|string[]> headers = {}, *RetrievesASingleScriptTagQueries queries) returns SingleScriptTag|error {
        string resourcePath = string `/admin/api/2025-01/script_tags/${getEncodedUri(scriptTagId)}.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a single smart collection
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieve a specific collection by ID / Retrieve a specific collection by ID 
    remote isolated function retrievesASingleSmartCollection(string smartCollectionId, map<string|string[]> headers = {}, *RetrievesASingleSmartCollectionQueries queries) returns SmartCollectionResponse|error {
        string resourcePath = string `/admin/api/2025-01/smart_collections/${getEncodedUri(smartCollectionId)}.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a single theme
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieve a single theme / Retrieve a single theme 
    remote isolated function retrievesASingleTheme(string themeId, map<string|string[]> headers = {}, *RetrievesASingleThemeQueries queries) returns SingleTheme|error {
        string resourcePath = string `/admin/api/2025-01/themes/${getEncodedUri(themeId)}.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a single user
    #
    # + headers - Headers to be sent with the request 
    # + return - Retrieve a single user / Retrieve a single user 
    remote isolated function retrievesASingleUser(string userId, map<string|string[]> headers = {}) returns SingleUser|error {
        string resourcePath = string `/admin/api/2025-01/users/${getEncodedUri(userId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a specific collect by its ID
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieve a collect with a certain ID / Retrieve a collect with a certain ID 
    remote isolated function retrievesASpecificCollectByItsId(string collectId, map<string|string[]> headers = {}, *RetrievesASpecificCollectByItsIdQueries queries) returns CollectResponse|error {
        string resourcePath = string `/admin/api/2025-01/collects/${getEncodedUri(collectId)}.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a specific county
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieve a specific country by its ID / Retrieve a specific country by its ID 
    remote isolated function retrievesASpecificCounty(string countryId, map<string|string[]> headers = {}, *RetrievesASpecificCountyQueries queries) returns CountryResponse|error {
        string resourcePath = string `/admin/api/2025-01/countries/${getEncodedUri(countryId)}.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a specific fulfillment event
    #
    # + headers - Headers to be sent with the request 
    # + return - Retrieve a specific fulfillment event / Retrieve a specific fulfillment event 
    remote isolated function retrievesASpecificFulfillmentEvent(string orderId, string fulfillmentId, string eventId, map<string|string[]> headers = {}) returns FulfillmentEventResponse|error {
        string resourcePath = string `/admin/api/2025-01/orders/${getEncodedUri(orderId)}/fulfillments/${getEncodedUri(fulfillmentId)}/events/${getEncodedUri(eventId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a specific fulfillment order
    #
    # + fulfillmentOrderId - The ID of the fulfillment order
    # + headers - Headers to be sent with the request 
    # + return - Get a single fulfillment order by its ID / Get a single fulfillment order by its ID 
    remote isolated function retrievesASpecificFulfillmentOrder(string fulfillmentOrderId, map<string|string[]> headers = {}) returns SingleFulfillmentOrder|error {
        string resourcePath = string `/admin/api/2025-01/fulfillment_orders/${getEncodedUri(fulfillmentOrderId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a specific order
    #
    # + headers - Headers to be sent with the request 
    # + return - Retrieve a single order / Get only particular fields / Retrieve a single order / Get only particular fields 
    remote isolated function retrievesASpecificOrder(string orderId, map<string|string[]> headers = {}) returns SingleOrderResponse|error {
        string resourcePath = string `/admin/api/2025-01/orders/${getEncodedUri(orderId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a specific refund
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieve a specific refund / Retrieve a specific refund 
    remote isolated function retrievesASpecificRefund(string orderId, string refundId, map<string|string[]> headers = {}, *RetrievesASpecificRefundQueries queries) returns RefundResponse|error {
        string resourcePath = string `/admin/api/2025-01/orders/${getEncodedUri(orderId)}/refunds/${getEncodedUri(refundId)}.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a specific transaction
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieve a specific transaction for an order / Retrieve a specific transaction for an order 
    remote isolated function retrievesASpecificTransaction(string orderId, string transactionId, map<string|string[]> headers = {}, *RetrievesASpecificTransactionQueries queries) returns TransactionResponse|error {
        string resourcePath = string `/admin/api/2025-01/orders/${getEncodedUri(orderId)}/transactions/${getEncodedUri(transactionId)}.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves all application credits
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieves all application credits / Retrieves all application credits 
    remote isolated function retrievesAllApplicationCredits(map<string|string[]> headers = {}, *RetrievesAllApplicationCreditsQueries queries) returns ApplicationCredits|error {
        string resourcePath = string `/admin/api/2025-01/application_credits.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves all orders belonging to a customer
    #
    # + headers - Headers to be sent with the request 
    remote isolated function retrievesAllOrdersBelongingToACustomer(string customerId, map<string|string[]> headers = {}) returns Orders|error {
        string resourcePath = string `/admin/api/2025-01/customers/${getEncodedUri(customerId)}/orders.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves an application charge
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieves an application charge / Retrieves an application charge 
    remote isolated function retrievesAnApplicationCharge(string applicationChargeId, map<string|string[]> headers = {}, *RetrievesAnApplicationChargeQueries queries) returns ApplicationChargeResult|error {
        string resourcePath = string `/admin/api/2025-01/application_charges/${getEncodedUri(applicationChargeId)}.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves an order count
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Count orders that have authorized payments ready to be captured / Count all orders / Count orders that have authorized payments ready to be captured / Count all orders 
    remote isolated function retrievesAnOrderCount(map<string|string[]> headers = {}, *RetrievesAnOrderCountQueries queries) returns ObjectCount|error {
        string resourcePath = string `/admin/api/2025-01/orders/count.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves details for a single customer address
    #
    # + headers - Headers to be sent with the request 
    # + return - Retrieve a single customer address / Retrieve a single customer address 
    remote isolated function retrievesDetailsForASingleCustomerAddress(string customerId, string addressId, map<string|string[]> headers = {}) returns SingleCustomerAddress|error {
        string resourcePath = string `/admin/api/2025-01/customers/${getEncodedUri(customerId)}/addresses/${getEncodedUri(addressId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves fulfillments associated with a fulfillment order
    #
    # + fulfillmentOrderId - The ID of the fulfillment order
    # + headers - Headers to be sent with the request 
    # + return - Retrieve a list of all fulfillments for a fulfillment order / Retrieve a list of all fulfillments for a fulfillment order 
    remote isolated function retrievesFulfillmentsAssociatedWithAFulfillmentOrder(string fulfillmentOrderId, map<string|string[]> headers = {}) returns FulfillmentList|error {
        string resourcePath = string `/admin/api/2025-01/fulfillment_orders/${getEncodedUri(fulfillmentOrderId)}/fulfillments.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves fulfillments associated with an order
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieve a list of all fulfillments for an order / Retrieve all fulfillments after the specified ID / Retrieve a list of all fulfillments for an order / Retrieve all fulfillments after the specified ID 
    remote isolated function retrievesFulfillmentsAssociatedWithAnOrder(string orderId, map<string|string[]> headers = {}, *RetrievesFulfillmentsAssociatedWithAnOrderQueries queries) returns FulfillmentListForOrder|error {
        string resourcePath = string `/admin/api/2025-01/orders/${getEncodedUri(orderId)}/fulfillments.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves the currently logged-in user
    #
    # + headers - Headers to be sent with the request 
    # + return - Retrieve the the currently logged-in user / Retrieve the the currently logged-in user 
    remote isolated function retrievesTheCurrentlyLoggedInUser(map<string|string[]> headers = {}) returns SingleUser|error {
        string resourcePath = string `/admin/api/2025-01/users/current.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves the location of a discount code
    #
    # + headers - Headers to be sent with the request 
    remote isolated function retrievesTheLocationOfADiscountCode(map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/admin/api/2025-01/discount_codes/lookup.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves the shop's configuration
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieve the shop's configuration / Retrieve the shop's configuration 
    remote isolated function retrievesTheShopSConfiguration(map<string|string[]> headers = {}, *RetrievesTheShopSConfigurationQueries queries) returns ShopConfigurations|error {
        string resourcePath = string `/admin/api/2025-01/shop.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Return a list of all balance transactions
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - List all transactions associated with a payout. / List all transactions associated with a payout. 
    remote isolated function returnAListOfAllBalanceTransactions(map<string|string[]> headers = {}, *ReturnAListOfAllBalanceTransactionsQueries queries) returns TransactionsListForPayout|error {
        string resourcePath = string `/admin/api/2025-01/shopify_payments/balance/transactions.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Return a list of all disputes
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieve all disputes ordered newest to oldest / Retrieve all won disputes / Retrieve all disputes initiated on 2013-05-03 / Retrieve all disputes ordered newest to oldest / Retrieve all won disputes / Retrieve all disputes initiated on 2013-05-03 
    remote isolated function returnAListOfAllDisputes(map<string|string[]> headers = {}, *ReturnAListOfAllDisputesQueries queries) returns Disputes|error {
        string resourcePath = string `/admin/api/2025-01/shopify_payments/disputes.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Return a list of all payouts
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - List all payouts up to a specific date / List all payouts ordered newest to oldest / List all payouts up to a specific date / List all payouts ordered newest to oldest 
    remote isolated function returnAListOfAllPayouts(map<string|string[]> headers = {}, *ReturnAListOfAllPayoutsQueries queries) returns PayoutsList|error {
        string resourcePath = string `/admin/api/2025-01/shopify_payments/payouts.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Return a single dispute
    #
    # + headers - Headers to be sent with the request 
    # + return - Retrieves a single dispute by ID / Retrieves a single dispute by ID 
    remote isolated function returnASingleDispute(string disputeId, map<string|string[]> headers = {}) returns SingleDispute|error {
        string resourcePath = string `/admin/api/2025-01/shopify_payments/disputes/${getEncodedUri(disputeId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Return a single payout
    #
    # + headers - Headers to be sent with the request 
    # + return - Retrieves a single payout by id. / Retrieves a single payout by id. 
    remote isolated function returnASinglePayout(string payoutId, map<string|string[]> headers = {}) returns SinglePayout|error {
        string resourcePath = string `/admin/api/2025-01/shopify_payments/payouts/${getEncodedUri(payoutId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Return the current balance
    #
    # + headers - Headers to be sent with the request 
    # + return - Retrieves the account's current balance. / Retrieves the account's current balance. 
    remote isolated function returnTheCurrentBalance(map<string|string[]> headers = {}) returns AccountCurrentBalance|error {
        string resourcePath = string `/admin/api/2025-01/shopify_payments/balance.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Returns evidence associated with the dispute
    #
    # + headers - Headers to be sent with the request 
    # + return - Returns evidence associated with the dispute 
    remote isolated function returnsEvidenceAssociatedWithTheDispute(string disputeId, map<string|string[]> headers = {}) returns DisputeEvidenceResponse|error {
        string resourcePath = string `/admin/api/2025-01/shopify_payments/disputes/${getEncodedUri(disputeId)}/dispute_evidences.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Updates dispute evidence associated with the dispute ID.
    #
    # + headers - Headers to be sent with the request 
    # + return - Updates dispute evidence associated with the dispute ID 
    remote isolated function returnsEvidenceAssociatedWithTheDisputeCopy(string disputeId, DisputeIdDisputeEvidencesJsonBody payload, map<string|string[]> headers = {}) returns DisputeEvidenceResponse|error {
        string resourcePath = string `/admin/api/2025-01/shopify_payments/disputes/${getEncodedUri(disputeId)}/dispute_evidences.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Searches for customers that match a supplied query
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Searches for customers that match a supplied query 
    remote isolated function searchesForCustomersThatMatchASuppliedQuery(map<string|string[]> headers = {}, *SearchesForCustomersThatMatchASuppliedQueryQueries queries) returns Customers|error {
        string resourcePath = string `/admin/api/2025-01/customers/search.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Searches for gift cards
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieve all gift cards with the last characters "mnop" / Retrieve all gift cards with the last characters "mnop" 
    remote isolated function searchesForGiftCards(map<string|string[]> headers = {}, *SearchesForGiftCardsQueries queries) returns GiftCardSearch|error {
        string resourcePath = string `/admin/api/2025-01/gift_cards/search.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Send an invoice
    #
    # + draftOrderId - The ID of the draft order
    # + headers - Headers to be sent with the request 
    # + return - Send a customized invoice / Send the default invoice / Send a customized invoice / Send the default invoice 
    remote isolated function sendAnInvoice(string draftOrderId, DraftOrderIdSendInvoiceJsonBody payload, map<string|string[]> headers = {}) returns InvoiceResponse|error {
        string resourcePath = string `/admin/api/2025-01/draft_orders/${getEncodedUri(draftOrderId)}/send_invoice.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Sends a cancellation request
    #
    # + fulfillmentOrderId - The ID of the fulfillment order
    # + headers - Headers to be sent with the request 
    # + return - Sends a cancellation request to the fulfillment service of a fulfillment order and updates the fulfillment order / Sends a cancellation request to the fulfillment service of a fulfillment order and updates the fulfillment order 
    remote isolated function sendsACancellationRequest(string fulfillmentOrderId, FulfillmentOrderIdCancellationRequestJsonBody payload, map<string|string[]> headers = {}) returns FulfillmentOrder|error {
        string resourcePath = string `/admin/api/2025-01/fulfillment_orders/${getEncodedUri(fulfillmentOrderId)}/cancellation_request.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Sends a fulfillment request
    #
    # + fulfillmentOrderId - The ID of the fulfillment order
    # + headers - Headers to be sent with the request 
    # + return - Sends a fulfillment request to the fulfillment service of a fulfillment order for the specified line items / Sends a fulfillment request to the fulfillment service for all line items on the fulfillment order if fulfillment_order_line_items is left blank / Sends a fulfillment request to the fulfillment service of a fulfillment order for the specified line items / Sends a fulfillment request to the fulfillment service for all line items on the fulfillment order if fulfillment_order_line_items is left blank 
    remote isolated function sendsAFulfillmentRequest(string fulfillmentOrderId, FulfillmentOrderIdFulfillmentRequestJsonBody payload, map<string|string[]> headers = {}) returns OriginalFulfillmentOrder|error {
        string resourcePath = string `/admin/api/2025-01/fulfillment_orders/${getEncodedUri(fulfillmentOrderId)}/fulfillment_request.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Sends an account invite to a customer
    #
    # + headers - Headers to be sent with the request 
    # + return - Send a customized invite / Send the default invite / Send a customized invite / Send the default invite 
    remote isolated function sendsAnAccountInviteToACustomer(string customerId, CustomerIdSendInviteJsonBody payload, map<string|string[]> headers = {}) returns AccountInvite|error {
        string resourcePath = string `/admin/api/2025-01/customers/${getEncodedUri(customerId)}/send_invite.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Sets deadline for fulfillment orders
    #
    # + headers - Headers to be sent with the request 
    # + return - Move a fulfillment order to a new location / Move a fulfillment order to a new location 
    remote isolated function setsDeadlineForFulfillmentOrders(FulfillmentOrdersSetFulfillmentOrdersDeadlineJsonBody payload, map<string|string[]> headers = {}) returns MoveFulfillmentOrderResponse|error {
        string resourcePath = string `/admin/api/2025-01/fulfillment_orders/set_fulfillment_orders_deadline.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Sets the default address for a customer
    #
    # + headers - Headers to be sent with the request 
    # + return - Set a default address for a customer / Set a default address for a customer 
    remote isolated function setsTheDefaultAddressForACustomer(string customerId, string addressId, string payload, map<string|string[]> headers = {}) returns CustomerDefaultAddress|error {
        string resourcePath = string `/admin/api/2025-01/customers/${getEncodedUri(customerId)}/addresses/${getEncodedUri(addressId)}/default.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Sets the inventory level for an inventory item at a location
    #
    # + headers - Headers to be sent with the request 
    # + return - Set the available inventory at a location / Set the available inventory at a location 
    remote isolated function setsTheInventoryLevelForAnInventoryItemAtALocation(InventoryLevelsSetJsonBody payload, map<string|string[]> headers = {}) returns AvailableInventory|error {
        string resourcePath = string `/admin/api/2025-01/inventory_levels/set.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # [Shop] Create a metafield
    #
    # + headers - Headers to be sent with the request 
    remote isolated function shopCreateAMetafield(ApiVersionMetafieldsJsonBody payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/admin/api/2025-01/metafields.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # [Shop] Deletes a metafield by its ID.
    #
    # + headers - Headers to be sent with the request 
    remote isolated function shopDeletesAMetafieldByItsId(string metafieldId, string payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/admin/api/2025-01/metafields/${getEncodedUri(metafieldId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        return self.clientEp->delete(resourcePath, request, headers);
    }

    # [Shop] Retrieve a count of a resource's metafields.
    #
    # + headers - Headers to be sent with the request 
    remote isolated function shopRetrieveACountOfAResourceSMetafields(map<string|string[]> headers = {}) returns ObjectCount|error {
        string resourcePath = string `/admin/api/2025-01/metafields/count.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # [Shop] Retrieve a list of metafields from the resource's endpoint
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    remote isolated function shopRetrieveAListOfMetafieldsFromTheResourceSEndpoint(map<string|string[]> headers = {}, *ShopRetrieveAListOfMetafieldsFromTheResourceSEndpointQueries queries) returns error? {
        string resourcePath = string `/admin/api/2025-01/metafields.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # [Shop] Retrieve a specific metafield
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    remote isolated function shopRetrieveASpecificMetafield(string metafieldId, map<string|string[]> headers = {}, *ShopRetrieveASpecificMetafieldQueries queries) returns MetafieldResponse|error {
        string resourcePath = string `/admin/api/2025-01/metafields/${getEncodedUri(metafieldId)}.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # [Shop] Updates a metafield
    #
    # + headers - Headers to be sent with the request 
    # + return - Updates a metafield 
    remote isolated function shopUpdatesAMetafield(string metafieldId, string payload, map<string|string[]> headers = {}) returns Metafield|error {
        string resourcePath = string `/admin/api/2025-01/metafields/${getEncodedUri(metafieldId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Update a mobile platform application
    #
    # + headers - Headers to be sent with the request 
    # + return - Update a mobile platform application 
    remote isolated function updateAMobilePlatformApplication(string mobilePlatformApplicationId, MobilePlatformApplicationsmobilePlatformApplicationIdJsonBody payload, map<string|string[]> headers = {}) returns MobilePlatformApplicationResponse|error {
        string resourcePath = string `/admin/api/2025-01/mobile_platform_applications/${getEncodedUri(mobilePlatformApplicationId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Updates a comment of an article
    #
    # + headers - Headers to be sent with the request 
    # + return - Update the body of an existing comment / Update the body of an existing comment 
    remote isolated function updatesACommentOfAnArticle(string commentId, CommentscommentIdJsonBody payload, map<string|string[]> headers = {}) returns UpdateCommentResponse|error {
        string resourcePath = string `/admin/api/2025-01/comments/${getEncodedUri(commentId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Updates a customer
    #
    # + headers - Headers to be sent with the request 
    # + return - Retrieves a single customer 
    remote isolated function updatesACustomer(string customerId, UpdateCustomer payload, map<string|string[]> headers = {}) returns CustomerResponse|error {
        string resourcePath = string `/admin/api/2025-01/customers/${getEncodedUri(customerId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Updates a marketing event
    #
    # + headers - Headers to be sent with the request 
    # + return - Update a marketing event. Can modify only timestamps, remote_id, and budget/currency. / Update a marketing event. Can modify only timestamps, remote_id, and budget/currency. 
    remote isolated function updatesAMarketingEvent(string marketingEventId, MarketingEventsmarketingEventIdJsonBody payload, map<string|string[]> headers = {}) returns UpdateMarketingEvent|error {
        string resourcePath = string `/admin/api/2025-01/marketing_events/${getEncodedUri(marketingEventId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Updates a metafield
    #
    # + headers - Headers to be sent with the request 
    remote isolated function updatesAMetafield(string ownerId, string ownerResource, string metafieldId, string payload, map<string|string[]> headers = {}) returns MetafieldResponse|error {
        string resourcePath = string `/admin/api/2025-01/${getEncodedUri(ownerId)}/${getEncodedUri(ownerResource)}/metafields/${getEncodedUri(metafieldId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Updates a page
    #
    # + headers - Headers to be sent with the request 
    # + return - Update an existing page completely / Add a metafield to a page / Show a hidden page / Update the body HTML of an existing page / Hide a published page / Update an existing page completely / Add a metafield to a page / Show a hidden page / Update the body HTML of an existing page / Hide a published page 
    remote isolated function updatesAPage(string pageId, PagespageIdJsonBody payload, map<string|string[]> headers = {}) returns UpdatePageResponse|error {
        string resourcePath = string `/admin/api/2025-01/pages/${getEncodedUri(pageId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Updates a product
    #
    # + headers - Headers to be sent with the request 
    # + return - Add a metafield to an existing product / Update a product by adding a new product image / Update a product by reordering product image / Update a product's title / Update a product by clearing product images / Hide a published product by changing the published attribute to false / Update a product's SEO title and description / Update a product and one of its variants / Update a product by reordering the product variants / Show a hidden product by changing the published attribute to true / Update a product's tags / Add a metafield to an existing product / Update a product by adding a new product image / Update a product by reordering product image / Update a product's title / Update a product by clearing product images / Hide a published product by changing the published attribute to false / Update a product's SEO title and description / Update a product and one of its variants / Update a product by reordering the product variants / Show a hidden product by changing the published attribute to true / Update a product's tags 
    remote isolated function updatesAProduct(string productId, UpdateProduct payload, map<string|string[]> headers = {}) returns ProductObject|error {
        string resourcePath = string `/admin/api/2025-01/products/${getEncodedUri(productId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Updates a report
    #
    # + headers - Headers to be sent with the request 
    # + return - Updates a report 
    remote isolated function updatesAReport(string reportId, ReportsreportIdJsonBody payload, map<string|string[]> headers = {}) returns UpdateReportResponse|error {
        string resourcePath = string `/admin/api/2025-01/reports/${getEncodedUri(reportId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Updates a script tag
    #
    # + headers - Headers to be sent with the request 
    # + return - Update a script tag's URL / Update a script tag's URL 
    remote isolated function updatesAScriptTag(string scriptTagId, ScriptTagsscriptTagIdJsonBody payload, map<string|string[]> headers = {}) returns UpdateScriptTagResponse|error {
        string resourcePath = string `/admin/api/2025-01/script_tags/${getEncodedUri(scriptTagId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Updates an article
    #
    # + headers - Headers to be sent with the request 
    # + return - Updates an article 
    remote isolated function updatesAnArticle(string blogId, string articleId, ArticlesarticleIdJsonBody payload, map<string|string[]> headers = {}) returns SingleArticle|error {
        string resourcePath = string `/admin/api/2025-01/blogs/${getEncodedUri(blogId)}/articles/${getEncodedUri(articleId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Updates an existing a price rule
    #
    # + priceRuleId - The ID of the price rule
    # + headers - Headers to be sent with the request 
    # + return - Update the title of a price rule / Update the title of a price rule 
    remote isolated function updatesAnExistingAPriceRule(string priceRuleId, PriceRulespriceRuleIdJsonBody payload, map<string|string[]> headers = {}) returns UpdatePriceRule|error {
        string resourcePath = string `/admin/api/2025-01/price_rules/${getEncodedUri(priceRuleId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Updates an existing country
    #
    # + headers - Headers to be sent with the request 
    # + return - Update a country's tax rate / Update a country's tax rate 
    remote isolated function updatesAnExistingCountry(string countryId, CountriescountryIdJsonBody payload, map<string|string[]> headers = {}) returns UpdateCountryTaxRate|error {
        string resourcePath = string `/admin/api/2025-01/countries/${getEncodedUri(countryId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Updates an existing custom collection
    #
    # + headers - Headers to be sent with the request 
    # + return - Update the description of a custom collection / Update a collection to remove its image / Update a collection with a new collection image / Update a collection with new alt text for its image / Publish a hidden collection / Add a collect to an existing collection by providing a product ID, and update an existing collect by its own ID to change its sort position / Add a metafield to an existing collection / Hide a published collection / Update the description of a custom collection / Update a collection to remove its image / Update a collection with a new collection image / Update a collection with new alt text for its image / Publish a hidden collection / Add a collect to an existing collection by providing a product ID, and update an existing collect by its own ID to change its sort position / Add a metafield to an existing collection / Hide a published collection 
    remote isolated function updatesAnExistingCustomCollection(string customCollectionId, CustomCollectionscustomCollectionIdJsonBody payload, map<string|string[]> headers = {}) returns UpdateCustomCollection|error {
        string resourcePath = string `/admin/api/2025-01/custom_collections/${getEncodedUri(customCollectionId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Updates an existing customer address
    #
    # + headers - Headers to be sent with the request 
    # + return - Update the postal code of a customer address / Update the postal code of a customer address 
    remote isolated function updatesAnExistingCustomerAddress(string customerId, string addressId, AddressesaddressIdJsonBody payload, map<string|string[]> headers = {}) returns PostalCodeResult|error {
        string resourcePath = string `/admin/api/2025-01/customers/${getEncodedUri(customerId)}/addresses/${getEncodedUri(addressId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Updates an existing discount code
    #
    # + priceRuleId - The ID of the price rule
    # + headers - Headers to be sent with the request 
    # + return - Update the code for a discount / Update the code for a discount 
    remote isolated function updatesAnExistingDiscountCode(string priceRuleId, string discountCodeId, DiscountCodesdiscountCodeIdJsonBody payload, map<string|string[]> headers = {}) returns UpdateDiscountCode|error {
        string resourcePath = string `/admin/api/2025-01/price_rules/${getEncodedUri(priceRuleId)}/discount_codes/${getEncodedUri(discountCodeId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Updates an existing gift card
    #
    # + headers - Headers to be sent with the request 
    # + return - Update the expiry date of a gift card / Update the note of a gift card / Update the expiry date of a gift card / Update the note of a gift card 
    remote isolated function updatesAnExistingGiftCard(string giftCardId, GiftCardsgiftCardIdJsonBody payload, map<string|string[]> headers = {}) returns UpdateGiftCard|error {
        string resourcePath = string `/admin/api/2025-01/gift_cards/${getEncodedUri(giftCardId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Updates an existing inventory item
    #
    # + headers - Headers to be sent with the request 
    # + return - Update an inventory item's SKU / Update an inventory item's unit cost / Update an inventory item's SKU / Update an inventory item's unit cost 
    remote isolated function updatesAnExistingInventoryItem(string inventoryItemId, InventoryItemsinventoryItemIdJsonBody payload, map<string|string[]> headers = {}) returns UpdateInventoryItem|error {
        string resourcePath = string `/admin/api/2025-01/inventory_items/${getEncodedUri(inventoryItemId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Updates an existing province for a country
    #
    # + headers - Headers to be sent with the request 
    # + return - Update a province's tax rate / Update a province's tax rate 
    remote isolated function updatesAnExistingProvinceForACountry(string countryId, string provinceId, ProvincesprovinceIdJsonBody payload, map<string|string[]> headers = {}) returns UpdateProvinceResponse|error {
        string resourcePath = string `/admin/api/2025-01/countries/${getEncodedUri(countryId)}/provinces/${getEncodedUri(provinceId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Updates an existing redirect
    #
    # + headers - Headers to be sent with the request 
    # + return - Update the path URI of a redirect / Update both the path and target URIs of a redirect / Update the path URI of a redirect / Update both the path and target URIs of a redirect 
    remote isolated function updatesAnExistingRedirect(string redirectId, RedirectsredirectIdJsonBody payload, map<string|string[]> headers = {}) returns UpdateRedirect|error {
        string resourcePath = string `/admin/api/2025-01/redirects/${getEncodedUri(redirectId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Updates an existing smart collection
    #
    # + headers - Headers to be sent with the request 
    # + return - Update the description of a smart collection / Hide a published smart collection / Update a smart collection by setting a new collection image alternative text / Update a smart collection by clearing the collection image / Publish a hidden collection / Update a smart collection by setting a new collection image / Update the description of a smart collection / Hide a published smart collection / Update a smart collection by setting a new collection image alternative text / Update a smart collection by clearing the collection image / Publish a hidden collection / Update a smart collection by setting a new collection image 
    remote isolated function updatesAnExistingSmartCollection(string smartCollectionId, SmartCollectionssmartCollectionIdJsonBody payload, map<string|string[]> headers = {}) returns UpdateSmartCollection|error {
        string resourcePath = string `/admin/api/2025-01/smart_collections/${getEncodedUri(smartCollectionId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Updates an order
    #
    # + headers - Headers to be sent with the request 
    # + return - Add note attributes to an order / Update the shipping address of an order / Update an order's tags / Add a note to order / Change an order's phone number / Add a metafield to an order / Change an order's email address / Remove the customer from an order / Change whether the buyer accepts marketing / Add note attributes to an order / Update the shipping address of an order / Update an order's tags / Add a note to order / Change an order's phone number / Add a metafield to an order / Change an order's email address / Remove the customer from an order / Change whether the buyer accepts marketing 
    remote isolated function updatesAnOrder(string orderId, UpdateOrder payload, map<string|string[]> headers = {}) returns UpdateOrderResponse|error {
        string resourcePath = string `/admin/api/2025-01/orders/${getEncodedUri(orderId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Updates an order risk
    #
    # + headers - Headers to be sent with the request 
    # + return - Update an existing order risk for an order / Update an existing order risk for an order 
    remote isolated function updatesAnOrderRisk(string orderId, string riskId, UpdateOrderRisk payload, map<string|string[]> headers = {}) returns OrderRiskObject|error {
        string resourcePath = string `/admin/api/2025-01/orders/${getEncodedUri(orderId)}/risks/${getEncodedUri(riskId)}.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Updates the capped amount of a recurring application charge
    #
    # + recurringApplicationChargeId - The ID of the recurring application charge.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Increase the capped amount for a shop / Increase the capped amount for a shop 
    remote isolated function updatesTheCappedAmountOfARecurringApplicationCharge(string recurringApplicationChargeId, string payload, map<string|string[]> headers = {}, *UpdatesTheCappedAmountOfARecurringApplicationChargeQueries queries) returns CappedAmountCharge|error {
        string resourcePath = string `/admin/api/2025-01/recurring_application_charges/${getEncodedUri(recurringApplicationChargeId)}/customize.json`;
        map<anydata> queryParam = {...queries};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Updates the ordering type of products in a smart collection
    #
    # + headers - Headers to be sent with the request 
    # + return - Update the type of ordering applied to the smart collection / Update manually-sorted products in the smart collection / Update the type of ordering applied to the smart collection / Update manually-sorted products in the smart collection 
    remote isolated function updatesTheOrderingTypeOfProductsInASmartCollection(string smartCollectionId, record {} payload, map<string|string[]> headers = {}) returns record {}|error {
        string resourcePath = string `/admin/api/2025-01/smart_collections/${getEncodedUri(smartCollectionId)}/order.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Updates the tracking information for a fulfillment
    #
    # + headers - Headers to be sent with the request 
    # + return - Update the tracking information for a fulfillment / Update the tracking information for a fulfillment 
    remote isolated function updatesTheTrackingInformationForAFulfillment(string fulfillmentId, FulfillmentIdUpdateTrackingJsonBody payload, map<string|string[]> headers = {}) returns Fulfillment|error {
        string resourcePath = string `/admin/api/2025-01/fulfillments/${getEncodedUri(fulfillmentId)}/update_tracking.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Upload a file to a dispute
    #
    # + headers - Headers to be sent with the request 
    # + return - Upload a file to a dispute 
    remote isolated function uploadAFileToADispute(string disputeId, DisputeIdDisputeFileUploadsJsonBody payload, map<string|string[]> headers = {}) returns DisputeFileUpload|error {
        string resourcePath = string `/admin/api/2025-01/shopify_payments/disputes/${getEncodedUri(disputeId)}/dispute_file_uploads.json`;
        map<anydata> queryParam = {};
        queryParam["x-shopify-access-token"] = self.apiKeyConfig.x\-shopify\-access\-token;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }
}
