// Copyright (c) 2025, WSO2 LLC. (http://www.wso2.com).
//
// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

import ballerina/http;

# As the primary way that apps interact with Shopify, the Admin API allows you to add your own features to the Shopify user experience. Considerations when using the Shopify Admin include:
# 
# - The Admin API supports both [GraphQL](https://shopify.dev/docs/api/admin-graphql) and [REST](https://shopify.dev/docs/api/admin-rest).
# - This is a [versioned API](https://shopify.dev/docs/api/usage/versioning). Updates are released quarterly and supported API versions are listed in the [release notes](https://shopify.dev/docs/api/release-notes).
# - Apps must explicitly request the relevant [access scopes](https://shopify.dev/docs/api/usage/access-scopes) from the user during installation.
# - Apps must [authenticate](https://shopify.dev/docs/apps/auth) to interact with the Admin API.
# - The Admin API enforces [rate limits](https://shopify.dev/docs/api/usage/rate-limits) on all requests. Note that there are different rate-limiting methods for GraphQL and REST. All apps connecting to the Admin API are subject to [Shopifyâ€™s API Terms of Service](https://www.shopify.com/legal/api-terms).
#     
# 
# ---
public isolated client class Client {
    final http:Client clientEp;
    # Gets invoked to initialize the `connector`.
    #
    # + config - The configurations to be used when initializing the `connector` 
    # + serviceUrl - URL of the target service 
    # + return - An error if connector initialization failed 
    public isolated function init(ConnectionConfig config =  {}, string serviceUrl = "https://{store_name}.myshopify.com") returns error? {
        http:ClientConfiguration httpClientConfig = {httpVersion: config.httpVersion, timeout: config.timeout, forwarded: config.forwarded, poolConfig: config.poolConfig, compression: config.compression, circuitBreaker: config.circuitBreaker, retryConfig: config.retryConfig, validation: config.validation};
        do {
            if config.http1Settings is ClientHttp1Settings {
                ClientHttp1Settings settings = check config.http1Settings.ensureType(ClientHttp1Settings);
                httpClientConfig.http1Settings = {...settings};
            }
            if config.http2Settings is http:ClientHttp2Settings {
                httpClientConfig.http2Settings = check config.http2Settings.ensureType(http:ClientHttp2Settings);
            }
            if config.cache is http:CacheConfig {
                httpClientConfig.cache = check config.cache.ensureType(http:CacheConfig);
            }
            if config.responseLimits is http:ResponseLimitConfigs {
                httpClientConfig.responseLimits = check config.responseLimits.ensureType(http:ResponseLimitConfigs);
            }
            if config.secureSocket is http:ClientSecureSocket {
                httpClientConfig.secureSocket = check config.secureSocket.ensureType(http:ClientSecureSocket);
            }
            if config.proxy is http:ProxyConfig {
                httpClientConfig.proxy = check config.proxy.ensureType(http:ProxyConfig);
            }
        }
        http:Client httpEp = check new (serviceUrl, httpClientConfig);
        self.clientEp = httpEp;
        return;
    }
    # Get a list of access scopes
    #
    # + xShopifyAccessToken - The access token for the shop
    # + return - List all scopes / List all scopes 
    remote isolated function getAListOfAccessScopes(string? xShopifyAccessToken = ()) returns AccessScopes|error {
        string resourcePath = string `/admin/oauth/access_scopes.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        AccessScopes response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Retrieves a list of storefront access tokens that have been issued
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve a list of storefront access tokens that have been issued / Retrieve a list of storefront access tokens that have been issued 
    remote isolated function retrievesAListOfStorefrontAccessTokensThatHaveBeenIssued(string apiVersion, string? xShopifyAccessToken = ()) returns StorefrontAccessTokens|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/storefront_access_tokens.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        StorefrontAccessTokens response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Creates a new StorefrontAccessToken
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Create a new storefront access token / Create a new storefront access token 
    remote isolated function createsANewStorefrontaccesstoken(string apiVersion, ApiVersionStorefrontAccessTokensJsonBody payload, string? xShopifyAccessToken = ()) returns StorefrontAccessToken|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/storefront_access_tokens.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        StorefrontAccessToken response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Deletes an existing storefront access token
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Deletes an existing storefront access token / Deletes an existing storefront access token 
    remote isolated function deletesAnExistingStorefrontAccessToken(string apiVersion, string storefrontAccessTokenId, string payload, string? xShopifyAccessToken = ()) returns string|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/storefront_access_tokens/${getEncodedUri(storefrontAccessTokenId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        string response = check self.clientEp->delete(resourcePath, request, httpHeaders);
        return response;
    }
    # Retrieves a list of application charges
    #
    # + apiVersion - The API version
    # + fields - A comma-separated list of fields to include in the response.
    # + since_id - Restrict results to after the specified ID.
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieves a list of application charges / Retrieves a list of application charges 
    remote isolated function retrievesAListOfApplicationCharges(string apiVersion, string? fields = (), string? since_id = (), string? xShopifyAccessToken = ()) returns ApplicationChargesList|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/application_charges.json`;
        map<anydata> queryParam = {"fields": fields, "since_id": since_id};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        ApplicationChargesList response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Creates an application charge
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Create a test charge that will not cause a credit card to be charged / Creates an application charge / Create a test charge that will not cause a credit card to be charged / Creates an application charge 
    remote isolated function createsAnApplicationCharge(string apiVersion, ApiVersionApplicationChargesJsonBody payload, string? xShopifyAccessToken = ()) returns ApplicationCharge|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/application_charges.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        ApplicationCharge response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Retrieves an application charge
    #
    # + apiVersion - The API version
    # + fields - A comma-separated list of fields to include in the response.
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieves an application charge / Retrieves an application charge 
    remote isolated function retrievesAnApplicationCharge(string apiVersion, string applicationChargeId, string? fields = (), string? xShopifyAccessToken = ()) returns ApplicationChargeResult|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/application_charges/${getEncodedUri(applicationChargeId)}.json`;
        map<anydata> queryParam = {"fields": fields};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        ApplicationChargeResult response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Retrieves all application credits
    #
    # + apiVersion - The API version
    # + fields - A comma-separated list of fields to include in the response. 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieves all application credits / Retrieves all application credits 
    remote isolated function retrievesAllApplicationCredits(string apiVersion, string? fields = (), string? xShopifyAccessToken = ()) returns ApplicationCredits|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/application_credits.json`;
        map<anydata> queryParam = {"fields": fields};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        ApplicationCredits response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Retrieves a single application credit
    #
    # + apiVersion - The API version
    # + fields - A comma-separated list of fields to include in the response. 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieves a single application credit / Retrieves a single application credit 
    remote isolated function retrievesASingleApplicationCredit(string apiVersion, string aplicationCreditId, string? fields = (), string? xShopifyAccessToken = ()) returns ApplicationCredit|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/application_credits/${getEncodedUri(aplicationCreditId)}.json`;
        map<anydata> queryParam = {"fields": fields};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        ApplicationCredit response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Retrieves a list of recurring application charges
    #
    # + apiVersion - The API version
    # + fields - A comma-separated list of fields to include in the response. 
    # + since_id - Restrict results to after the specified ID. 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieves a list of recurring application charges / Retrieves a list of recurring application charges 
    remote isolated function retrievesAListOfRecurringApplicationCharges(string apiVersion, string? fields = (), string? since_id = (), string? xShopifyAccessToken = ()) returns RecurringApplicationCharges|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/recurring_application_charges.json`;
        map<anydata> queryParam = {"fields": fields, "since_id": since_id};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        RecurringApplicationCharges response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Creates a recurring application charge
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Create a new charge with a trial period. The trial period will go into effect at the time the recurring charge is activated. / Create a new charge with terms and a capped amount / Create a recurring application charge / Create a recurring test charge that will not cause a credit card to be charged / Create a new charge with a trial period. The trial period will go into effect at the time the recurring charge is activated. / Create a new charge with terms and a capped amount / Create a recurring application charge / Create a recurring test charge that will not cause a credit card to be charged 
    remote isolated function createsARecurringApplicationCharge(string apiVersion, ApiVersionRecurringApplicationChargesJsonBody payload, string? xShopifyAccessToken = ()) returns ApplicationChargeResponse|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/recurring_application_charges.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        ApplicationChargeResponse response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Retrieves a single charge
    #
    # + apiVersion - The API version
    # + recurringApplicationChargeId - The ID of the recurring application charge.
    # + fields - A comma-separated list of fields to include in the response. 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieves a single charge / Retrieves a single charge 
    remote isolated function retrievesASingleCharge(string apiVersion, string recurringApplicationChargeId, string? fields = (), string? xShopifyAccessToken = ()) returns SingleCharge|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/recurring_application_charges/${getEncodedUri(recurringApplicationChargeId)}.json`;
        map<anydata> queryParam = {"fields": fields};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        SingleCharge response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Cancels a recurring application charge
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Cancel the current recurring charge for a shop / Cancel the current recurring charge for a shop 
    remote isolated function cancelsARecurringApplicationCharge(string apiVersion, string recurringApplicationChargeId, string payload, string? xShopifyAccessToken = ()) returns string|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/recurring_application_charges/${getEncodedUri(recurringApplicationChargeId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        string response = check self.clientEp->delete(resourcePath, request, httpHeaders);
        return response;
    }
    # Updates the capped amount of a recurring application charge
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Increase the capped amount for a shop / Increase the capped amount for a shop 
    remote isolated function updatesTheCappedAmountOfARecurringApplicationCharge(string apiVersion, string recurringApplicationChargeId, string payload, string? recurring_application_chargeCapped_amount = (), string? xShopifyAccessToken = ()) returns CappedAmountCharge|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/recurring_application_charges/${getEncodedUri(recurringApplicationChargeId)}/customize.json`;
        map<anydata> queryParam = {"recurring_application_charge[capped_amount]": recurring_application_chargeCapped_amount};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        CappedAmountCharge response = check self.clientEp->put(resourcePath, request, httpHeaders);
        return response;
    }
    # Retrieves a list of usage charges
    #
    # + apiVersion - The API version
    # + fields - A comma-separated list of fields to include in the response. 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve all usage charges / Retrieve all usage charges 
    remote isolated function retrievesAListOfUsageCharges(string apiVersion, string recurringApplicationChargeId, string? fields = (), string? xShopifyAccessToken = ()) returns UsageChargeList|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/recurring_application_charges/${getEncodedUri(recurringApplicationChargeId)}/usage_charges.json`;
        map<anydata> queryParam = {"fields": fields};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        UsageChargeList response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Creates a usage charge
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Create a new usage charge / Create a new usage charge 
    remote isolated function createsAUsageCharge(string apiVersion, string recurringApplicationChargeId, RecurringApplicationChargeIdUsageChargesJsonBody payload, string? xShopifyAccessToken = ()) returns UsageChargeResponse|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/recurring_application_charges/${getEncodedUri(recurringApplicationChargeId)}/usage_charges.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        UsageChargeResponse response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Retrieves a single charge
    #
    # + apiVersion - The API version
    # + fields - A comma-separated list of fields to include in the response. 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieves a single charge / Retrieves a single charge 
    remote isolated function retrievesASingleCharge1(string apiVersion, string recurringApplicationChargeId, string usageChargeId, string? fields = (), string? xShopifyAccessToken = ()) returns SingleUsageCharge|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/recurring_application_charges/${getEncodedUri(recurringApplicationChargeId)}/usage_charges/${getEncodedUri(usageChargeId)}.json`;
        map<anydata> queryParam = {"fields": fields};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        SingleUsageCharge response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Retrieves a list of customers
    #
    # + apiVersion - The API version
    # + created_at_max - Show customers created before a specified date.  
    # (format: 2014-04-25T16:15:47-04:00) 
    # + created_at_min - Show customers created after a specified date.  
    # (format: 2014-04-25T16:15:47-04:00) 
    # + fields - Show only certain fields, specified by a comma-separated list of field names. 
    # + ids - Restrict results to customers specified by a comma-separated list of IDs. 
    # + 'limit - The maximum number of results to show.(default: 50)(maximum: 250) 
    # + since_id - Restrict results to those after the specified ID. 
    # + updated_at_max - Show customers last updated before a specified date.  
    # (format: 2014-04-25T16:15:47-04:00) 
    # + updated_at_min - Show customers last updated after a specified date.  
    # (format: 2014-04-25T16:15:47-04:00) 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve a list of customers / Retrieve a list of customers 
    remote isolated function retrievesAListOfCustomers(string apiVersion, string? created_at_max = (), string? created_at_min = (), string? fields = (), string? ids = (), string? 'limit = (), string? since_id = (), string? updated_at_max = (), string? updated_at_min = (), string? xShopifyAccessToken = ()) returns Customers|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/customers.json`;
        map<anydata> queryParam = {"created_at_max": created_at_max, "created_at_min": created_at_min, "fields": fields, "ids": ids, "limit": 'limit, "since_id": since_id, "updated_at_max": updated_at_max, "updated_at_min": updated_at_min};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Customers response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Creates a customer
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Create a new customer record / Create a customer with password and password_confirmation and skip sending the welcome email / Create a customer with send_email_invite / Create a customer with a metafield / Create a new customer record / Create a customer with password and password_confirmation and skip sending the welcome email / Create a customer with send_email_invite / Create a customer with a metafield 
    remote isolated function createsACustomer(string apiVersion, CreateCustomer payload, string? xShopifyAccessToken = ()) returns CustomerResponse|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/customers.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        CustomerResponse response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Creates an account activation URL for a customer
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Create an account activation URL for an invited or disabled customer / Create an account activation URL for an invited or disabled customer 
    remote isolated function createsAnAccountActivationUrlForACustomer(string apiVersion, string customerId, CustomerInvite payload, string? xShopifyAccessToken = ()) returns AccountActivationUrl|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/customers/${getEncodedUri(customerId)}/account_activation_url.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        AccountActivationUrl response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Sends an account invite to a customer
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Send a customized invite / Send the default invite / Send a customized invite / Send the default invite 
    remote isolated function sendsAnAccountInviteToACustomer(string apiVersion, string customerId, CustomerIdSendInviteJsonBody payload, string? xShopifyAccessToken = ()) returns AccountInvite|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/customers/${getEncodedUri(customerId)}/send_invite.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        AccountInvite response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Retrieves a single customer
    #
    # + apiVersion - The API version
    # + fields - Show only certain fields, specified by a comma-separated list of field names. 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieves a single customer 
    remote isolated function retrievesASingleCustomer(string apiVersion, string customerId, string? fields = (), string? xShopifyAccessToken = ()) returns CustomerResponse|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/customers/${getEncodedUri(customerId)}.json`;
        map<anydata> queryParam = {"fields": fields};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        CustomerResponse response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Updates a customer
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieves a single customer 
    remote isolated function updatesACustomer(string apiVersion, string customerId, UpdateCustomer payload, string? xShopifyAccessToken = ()) returns CustomerResponse|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/customers/${getEncodedUri(customerId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        CustomerResponse response = check self.clientEp->put(resourcePath, request, httpHeaders);
        return response;
    }
    # Deletes a customer.
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieves a single customer 
    remote isolated function deletesACustomer(string apiVersion, string customerId, string payload, string? xShopifyAccessToken = ()) returns CustomerResponse|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/customers/${getEncodedUri(customerId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        CustomerResponse response = check self.clientEp->delete(resourcePath, request, httpHeaders);
        return response;
    }
    # Retrieves all orders belonging to a customer
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    remote isolated function retrievesAllOrdersBelongingToACustomer(string apiVersion, string customerId, string? xShopifyAccessToken = ()) returns Orders|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/customers/${getEncodedUri(customerId)}/orders.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Orders response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Retrieves a count of customers
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    remote isolated function retrievesACountOfCustomers(string apiVersion, string? xShopifyAccessToken = ()) returns EventsCount|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/customers/count.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        EventsCount response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Searches for customers that match a supplied query
    #
    # + apiVersion - The API version
    # + fields - Show only certain fields, specified by a comma-separated list of field names. 
    # + 'limit - The maximum number of results to show.(default: 50)(maximum: 250) 
    # + 'order - Set the field and direction by which to order results.(default: last\_order\_date DESC) 
    # + query - Text to search for in the shop\'s customer data. 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Searches for customers that match a supplied query 
    remote isolated function searchesForCustomersThatMatchASuppliedQuery(string apiVersion, string? fields = (), string? 'limit = (), string? 'order = (), string? query = (), string? xShopifyAccessToken = ()) returns Customers|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/customers/search.json`;
        map<anydata> queryParam = {"fields": fields, "limit": 'limit, "order": 'order, "query": query};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Customers response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Retrieves a list of addresses for a customer
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve all of a customerâ€™s addresses / Retrieve a limited number of addresses for a customer / Retrieve all of a customerâ€™s addresses / Retrieve a limited number of addresses for a customer 
    remote isolated function retrievesAListOfAddressesForACustomer(string apiVersion, string customerId, string? xShopifyAccessToken = ()) returns AddressList|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/customers/${getEncodedUri(customerId)}/addresses.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        AddressList response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Creates a new address for a customer
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Create a new address for a customer / Create a new address for a customer 
    remote isolated function createsANewAddressForACustomer(string apiVersion, string customerId, CustomerIdAddressesJsonBody payload, string? xShopifyAccessToken = ()) returns CustomerAddress|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/customers/${getEncodedUri(customerId)}/addresses.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        CustomerAddress response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Retrieves details for a single customer address
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve a single customer address / Retrieve a single customer address 
    remote isolated function retrievesDetailsForASingleCustomerAddress(string apiVersion, string customerId, string addressId, string? xShopifyAccessToken = ()) returns SingleCustomerAddress|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/customers/${getEncodedUri(customerId)}/addresses/${getEncodedUri(addressId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        SingleCustomerAddress response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Updates an existing customer address
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Update the postal code of a customer address / Update the postal code of a customer address 
    remote isolated function updatesAnExistingCustomerAddress(string apiVersion, string customerId, string addressId, AddressesaddressIdJsonBody payload, string? xShopifyAccessToken = ()) returns PostalCodeResult|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/customers/${getEncodedUri(customerId)}/addresses/${getEncodedUri(addressId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        PostalCodeResult response = check self.clientEp->put(resourcePath, request, httpHeaders);
        return response;
    }
    # Removes an address from a customerâ€™s address list
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Remove a customer address / Remove a customer address 
    remote isolated function removesAnAddressFromACustomerSAddressList(string apiVersion, string customerId, string addressId, string payload, string? xShopifyAccessToken = ()) returns json|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/customers/${getEncodedUri(customerId)}/addresses/${getEncodedUri(addressId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        json response = check self.clientEp->delete(resourcePath, request, httpHeaders);
        return response;
    }
    # Sets the default address for a customer
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Set a default address for a customer / Set a default address for a customer 
    remote isolated function setsTheDefaultAddressForACustomer(string apiVersion, string customerId, string addressId, string payload, string? xShopifyAccessToken = ()) returns CustomerDefaultAddress|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/customers/${getEncodedUri(customerId)}/addresses/${getEncodedUri(addressId)}/default.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        CustomerDefaultAddress response = check self.clientEp->put(resourcePath, request, httpHeaders);
        return response;
    }
    # Performs bulk operations for multiple customer addresses
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Destroy multiple customer addresses / Destroy multiple customer addresses 
    remote isolated function performsBulkOperationsForMultipleCustomerAddresses(string apiVersion, string customerId, string payload, string? xShopifyAccessToken = ()) returns json|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/customers/${getEncodedUri(customerId)}/addresses/set.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        json response = check self.clientEp->put(resourcePath, request, httpHeaders);
        return response;
    }
    # Creates a discount code creation job
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Create a discount code creation job / Create a discount code creation job 
    remote isolated function createsADiscountCodeCreationJob(string apiVersion, string priceRuleId, PriceRuleIdBatchJsonBody payload, string? xShopifyAccessToken = ()) returns DiscountCode|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/price_rules/${getEncodedUri(priceRuleId)}/batch.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        DiscountCode response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Retrieves a list of discount codes
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve a list of all discount codes / Retrieve a list of all discount codes 
    remote isolated function retrievesAListOfDiscountCodes(string apiVersion, string priceRuleId, string? xShopifyAccessToken = ()) returns DiscountCodes|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/price_rules/${getEncodedUri(priceRuleId)}/discount_codes.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        DiscountCodes response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Creates a discount code
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Create a discount code / Create a discount code 
    remote isolated function createsADiscountCode(string apiVersion, string priceRuleId, PriceRuleIdDiscountCodesJsonBody payload, string? xShopifyAccessToken = ()) returns CreateDiscountCode|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/price_rules/${getEncodedUri(priceRuleId)}/discount_codes.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        CreateDiscountCode response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Retrieves a count of discount codes for a shop
    #
    # + apiVersion - The API version
    # + times_used - Show discount codes with times used.
    # + times_used_max - Show discount codes used greater than or equal to this value.
    # + times_used_min - Show discount codes used less than or equal to this value.
    # + xShopifyAccessToken - The access token for the shop
    remote isolated function retrievesACountOfDiscountCodesForAShop(string apiVersion, string? times_used = (), string? times_used_max = (), string? times_used_min = (), string? xShopifyAccessToken = ()) returns EventsCount|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/discount_codes/count.json`;
        map<anydata> queryParam = {"times_used": times_used, "times_used_max": times_used_max, "times_used_min": times_used_min};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        EventsCount response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Retrieves the location of a discount code
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    remote isolated function retrievesTheLocationOfADiscountCode(string apiVersion, string? xShopifyAccessToken = ()) returns http:Response|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/discount_codes/lookup.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Response response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Retrieves a discount code creation job
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve a discount code creation job / Retrieve a discount code creation job 
    remote isolated function retrievesADiscountCodeCreationJob(string apiVersion, string priceRuleId, string batchId, string? xShopifyAccessToken = ()) returns DiscountCodeResponse|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/price_rules/${getEncodedUri(priceRuleId)}/batch/${getEncodedUri(batchId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        DiscountCodeResponse response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Retrieves a list of discount codes for a discount code creation job
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve a list of discount codes for a discount code creation job / Retrieve a list of discount codes for a discount code creation job 
    remote isolated function retrievesAListOfDiscountCodesForADiscountCodeCreationJob(string apiVersion, string priceRuleId, string batchId, string? xShopifyAccessToken = ()) returns DiscountCodeList|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/price_rules/${getEncodedUri(priceRuleId)}/batch/${getEncodedUri(batchId)}/discount_codes.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        DiscountCodeList response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Retrieves a single discount code
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve a single discount code / Retrieve a single discount code 
    remote isolated function retrievesASingleDiscountCode(string apiVersion, string priceRuleId, string discountCodeId, string? xShopifyAccessToken = ()) returns SingleDiscountCode|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/price_rules/${getEncodedUri(priceRuleId)}/discount_codes/${getEncodedUri(discountCodeId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        SingleDiscountCode response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Updates an existing discount code
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Update the code for a discount / Update the code for a discount 
    remote isolated function updatesAnExistingDiscountCode(string apiVersion, string priceRuleId, string discountCodeId, DiscountCodesdiscountCodeIdJsonBody payload, string? xShopifyAccessToken = ()) returns UpdateDiscountCode|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/price_rules/${getEncodedUri(priceRuleId)}/discount_codes/${getEncodedUri(discountCodeId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        UpdateDiscountCode response = check self.clientEp->put(resourcePath, request, httpHeaders);
        return response;
    }
    # Deletes a discount code
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Delete a discount code / Delete a discount code 
    remote isolated function deletesADiscountCode(string apiVersion, string priceRuleId, string discountCodeId, string payload, string? xShopifyAccessToken = ()) returns string|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/price_rules/${getEncodedUri(priceRuleId)}/discount_codes/${getEncodedUri(discountCodeId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        string response = check self.clientEp->delete(resourcePath, request, httpHeaders);
        return response;
    }
    # Retrieves a list of price rules
    #
    # + apiVersion - The API version
    # + 'limit - The maximum number of results to retrieve.(default: 50)(maximum: 250) 
    # + since_id - Restrict results to after the specified ID. 
    # + created_at_min - Show price rules created after date (format 2017-03-25T16:15:47-04:00). 
    # + created_at_max - Show price rules created before date (format 2017-03-25T16:15:47-04:00). 
    # + updated_at_min - Show price rules last updated after date (format 2017-03-25T16:15:47-04:00). 
    # + updated_at_max - Show price rules last updated before date (format 2017-03-25T16:15:47-04:00). 
    # + starts_at_min - Show price rules starting after date (format 2017-03-25T16:15:47-04:00). 
    # + starts_at_max - Show price rules starting before date (format 2017-03-25T16:15:47-04:00). 
    # + ends_at_min - Show price rules ending after date (format 2017-03-25T16:15:47-04:00). 
    # + ends_at_max - Show price rules ending before date (format 2017-03-25T16:15:47-04:00). 
    # + times_used - Show price rules with times used. 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve all price rules / Retrieve all price rules 
    remote isolated function retrievesAListOfPriceRules(string apiVersion, string? 'limit = (), string? since_id = (), string? created_at_min = (), string? created_at_max = (), string? updated_at_min = (), string? updated_at_max = (), string? starts_at_min = (), string? starts_at_max = (), string? ends_at_min = (), string? ends_at_max = (), string? times_used = (), string? xShopifyAccessToken = ()) returns PriceRules|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/price_rules.json`;
        map<anydata> queryParam = {"limit": 'limit, "since_id": since_id, "created_at_min": created_at_min, "created_at_max": created_at_max, "updated_at_min": updated_at_min, "updated_at_max": updated_at_max, "starts_at_min": starts_at_min, "starts_at_max": starts_at_max, "ends_at_min": ends_at_min, "ends_at_max": ends_at_max, "times_used": times_used};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        PriceRules response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Creates a price rule
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Create a price rule that gives the buyer 15% off a specific collection / Create a price rule that gives a select group of customers $5 off their order / Create a price rule that gives the buyer free shipping on orders         over $50.00 that can be used up to 20 times / Create a Buy X Get Y price rule that gives one free ipod touch if customer buys 2 ipods  / Create a price rule that gives the buyer $10.00 off an order / Create a price rule that gives the buyer 15% off a specific collection / Create a price rule that gives a select group of customers $5 off their order / Create a price rule that gives the buyer free shipping on orders         over $50.00 that can be used up to 20 times / Create a Buy X Get Y price rule that gives one free ipod touch if customer buys 2 ipods  / Create a price rule that gives the buyer $10.00 off an order 
    remote isolated function createsAPriceRule(string apiVersion, ApiVersionPriceRulesJsonBody payload, string? xShopifyAccessToken = ()) returns PriceRule|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/price_rules.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        PriceRule response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Retrieves a single price rule
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve a single price rule by its ID / Retrieve a single price rule by its ID 
    remote isolated function retrievesASinglePriceRule(string apiVersion, string priceRuleId, string? xShopifyAccessToken = ()) returns SinglePriceRule|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/price_rules/${getEncodedUri(priceRuleId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        SinglePriceRule response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Updates an existing a price rule
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Update the title of a price rule / Update the title of a price rule 
    remote isolated function updatesAnExistingAPriceRule(string apiVersion, string priceRuleId, PriceRulespriceRuleIdJsonBody payload, string? xShopifyAccessToken = ()) returns UpdatePriceRule|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/price_rules/${getEncodedUri(priceRuleId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        UpdatePriceRule response = check self.clientEp->put(resourcePath, request, httpHeaders);
        return response;
    }
    # Remove an existing PriceRule
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Delete a price rule / Delete a price rule 
    remote isolated function removeAnExistingPriceRule(string apiVersion, string priceRuleId, string payload, string? xShopifyAccessToken = ()) returns string|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/price_rules/${getEncodedUri(priceRuleId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        string response = check self.clientEp->delete(resourcePath, request, httpHeaders);
        return response;
    }
    # Retrieves a count of all price rules
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve a count of all price rules / Retrieve a count of all price rules 
    remote isolated function retrievesACountOfAllPriceRules(string apiVersion, string? xShopifyAccessToken = ()) returns ObjectCount|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/price_rules/count.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        ObjectCount response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Retrieves a list of events
    #
    # + apiVersion - The API version
    # + 'limit - The number of results to show.(default: 50)(maximum: 250) 
    # + since_id - Show only results after the specified ID. 
    # + created_at_min - Show events created at or after this date and time. (format: 2014-04-25T16:15:47-04:00) 
    # + created_at_max - Show events created at or before this date and time. (format: 2014-04-25T16:15:47-04:00) 
    # + filter - Show events specified in this filter. 
    # + verb - Show events of a certain type. 
    # + fields - Show only certain fields, specified by a comma-separated list of field names. 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve a list of events related to products that were deleted / Retrieve a list of all events from a specific order / Retrieve all events after the specified ID / Retrieve an event after a specific ID using <code>since_id</code> / Retrieve a list of all events related to products and orders / Retrieve all events from a specific product / Retrieve a list of events that occured at the specified time / Retrieve a list of all events for a shop / Retrieve a list of events related to products that were deleted / Retrieve a list of all events from a specific order / Retrieve all events after the specified ID / Retrieve an event after a specific ID using <code>since_id</code> / Retrieve a list of all events related to products and orders / Retrieve all events from a specific product / Retrieve a list of events that occured at the specified time / Retrieve a list of all events for a shop 
    remote isolated function retrievesAListOfEvents(string apiVersion, string? 'limit = (), string? since_id = (), string? created_at_min = (), string? created_at_max = (), string? filter = (), string? verb = (), string? fields = (), string? xShopifyAccessToken = ()) returns EventsList|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/events.json`;
        map<anydata> queryParam = {"limit": 'limit, "since_id": since_id, "created_at_min": created_at_min, "created_at_max": created_at_max, "filter": filter, "verb": verb, "fields": fields};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        EventsList response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Retrieves a single event
    #
    # + apiVersion - The API version
    # + fields - Show only certain fields, specified by a comma-separated list of field names. 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieves a single event by its ID / Retrieves a single event by its ID 
    remote isolated function retrievesASingleEvent(string apiVersion, string eventId, string? fields = (), string? xShopifyAccessToken = ()) returns SingleEvent|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/events/${getEncodedUri(eventId)}.json`;
        map<anydata> queryParam = {"fields": fields};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        SingleEvent response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Retrieves a count of events
    #
    # + apiVersion - The API version
    # + created_at_min - Count only events created at or after this date and time. (format: 2014-04-25T16:15:47-04:00) 
    # + created_at_max - Count only events created at or before this date and time. (format: 2014-04-25T16:15:47-04:00) 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Count all events / Count of the number of events since a particular time / Count all events / Count of the number of events since a particular time 
    remote isolated function retrievesACountOfEvents(string apiVersion, string? created_at_min = (), string? created_at_max = (), string? xShopifyAccessToken = ()) returns EventsCount|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/events/count.json`;
        map<anydata> queryParam = {"created_at_min": created_at_min, "created_at_max": created_at_max};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        EventsCount response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Retrieves a list of gift cards
    #
    # + apiVersion - The API version
    # + status - Retrieve gift cards with a given status. Valid values: enabled, disabled
    # + 'limit - The maximum number of results to show.(default: 50)(maximum: 250) 
    # + since_id - Restrict results to after the specified ID. 
    # + fields - Show only certain fields, specified by a comma-separated list of field names. 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve a list of all gift cards / Retrieve a list of all enabled gift cards / Retrieve a list of all gift cards / Retrieve a list of all enabled gift cards 
    remote isolated function retrievesAListOfGiftCards(string apiVersion, string? status = (), string? 'limit = (), string? since_id = (), string? fields = (), string? xShopifyAccessToken = ()) returns GiftCardsList|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/gift_cards.json`;
        map<anydata> queryParam = {"status": status, "limit": 'limit, "since_id": since_id, "fields": fields};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        GiftCardsList response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Creates a gift card
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Create a gift card with a custom code / Create a gift card with an automatically generated code / Create a gift card with a custom code / Create a gift card with an automatically generated code 
    remote isolated function createsAGiftCard(string apiVersion, ApiVersionGiftCardsJsonBody payload, string? xShopifyAccessToken = ()) returns GiftCard|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/gift_cards.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        GiftCard response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Disables a gift card
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Disable a gift card / Disable a gift card 
    remote isolated function disablesAGiftCard(string apiVersion, string giftCardId, GiftCardIdDisableJsonBody payload, string? xShopifyAccessToken = ()) returns DisableGiftCard|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/gift_cards/${getEncodedUri(giftCardId)}/disable.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        DisableGiftCard response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Retrieves a single gift card
    #
    # + apiVersion - The API version
    # + status - Count gift cards with a given status. Valid values: enabled, disabled
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve a single gift card / Retrieve a single gift card 
    remote isolated function retrievesASingleGiftCard(string apiVersion, string giftCardId, string? status = (), string? xShopifyAccessToken = ()) returns SingleGiftCard|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/gift_cards/${getEncodedUri(giftCardId)}.json`;
        map<anydata> queryParam = {"status": status};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        SingleGiftCard response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Updates an existing gift card
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Update the expiry date of a gift card / Update the note of a gift card / Update the expiry date of a gift card / Update the note of a gift card 
    remote isolated function updatesAnExistingGiftCard(string apiVersion, string giftCardId, GiftCardsgiftCardIdJsonBody payload, string? xShopifyAccessToken = ()) returns UpdateGiftCard|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/gift_cards/${getEncodedUri(giftCardId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        UpdateGiftCard response = check self.clientEp->put(resourcePath, request, httpHeaders);
        return response;
    }
    # Retrieves a count of gift cards
    #
    # + apiVersion - The API version
    # + status - Count gift cards with a given status. Valid values: 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve a count of enabled gift cards / Retrieve a count of all gift cards / Retrieve a count of enabled gift cards / Retrieve a count of all gift cards 
    remote isolated function retrievesACountOfGiftCards(string apiVersion, string? status = (), string? xShopifyAccessToken = ()) returns EventsCount|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/gift_cards/count.json`;
        map<anydata> queryParam = {"status": status};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        EventsCount response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Searches for gift cards
    #
    # + apiVersion - The API version
    # + created_at_max - Show gift cards created at or before date.
    # + created_at_min - Show gift cards created at or after date.
    # + fields - Show only certain fields, specified by a comma-separated list of field names. 
    # + 'limit - The maximum number of results to retrieve.(default: 50)(maximum: 250) 
    # + 'order - The field and direction to order results by.(default: disabled\_at DESC) 
    # + query - The text to search for. 
    # + updated_at_max - Show gift cards last updated at or before date.
    # + updated_at_min - Show gift cards last updated at or after date.
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve all gift cards with the last characters "mnop" / Retrieve all gift cards with the last characters "mnop" 
    remote isolated function searchesForGiftCards(string apiVersion, string? created_at_max = (), string? created_at_min = (), string? fields = (), string? 'limit = (), string? 'order = (), string? query = (), string? updated_at_max = (), string? updated_at_min = (), string? xShopifyAccessToken = ()) returns GiftCardSearch|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/gift_cards/search.json`;
        map<anydata> queryParam = {"created_at_max": created_at_max, "created_at_min": created_at_min, "fields": fields, "limit": 'limit, "order": 'order, "query": query, "updated_at_max": updated_at_max, "updated_at_min": updated_at_min};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        GiftCardSearch response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Retrieves a detailed list for inventory items by IDs
    #
    # + apiVersion - The API version
    # + ids - Show only inventory items specified by a comma-separated list of IDs.(maximum: 100) 
    # + 'limit - The maximum number of results to show.(default: 50)(maximum: 250) 
    # + xShopifyAccessToken - The access token for the shop
    remote isolated function retrievesADetailedListForInventoryItemsByIds(string apiVersion, string? ids = (), string? 'limit = (), string? xShopifyAccessToken = ()) returns error? {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/inventory_items.json`;
        map<anydata> queryParam = {"ids": ids, "limit": 'limit};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }
    # Retrieves a single inventory item by ID
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve an inventory item by ID / Retrieve an inventory item by ID 
    remote isolated function retrievesASingleInventoryItemById(string apiVersion, string inventoryItemId, string? xShopifyAccessToken = ()) returns InventoryItem|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/inventory_items/${getEncodedUri(inventoryItemId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        InventoryItem response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Updates an existing inventory item
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Update an inventory item's SKU / Update an inventory item's unit cost / Update an inventory item's SKU / Update an inventory item's unit cost 
    remote isolated function updatesAnExistingInventoryItem(string apiVersion, string inventoryItemId, InventoryItemsinventoryItemIdJsonBody payload, string? xShopifyAccessToken = ()) returns UpdateInventoryItem|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/inventory_items/${getEncodedUri(inventoryItemId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        UpdateInventoryItem response = check self.clientEp->put(resourcePath, request, httpHeaders);
        return response;
    }
    # Adjusts the inventory level of an inventory item at a location
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Adjust the available quantity of an inventory item by 5 at a single location / Adjust the available quantity of an inventory item by 5 at a single location 
    remote isolated function adjustsTheInventoryLevelOfAnInventoryItemAtALocation(string apiVersion, InventoryLevelsAdjustJsonBody payload, string? xShopifyAccessToken = ()) returns InventoryLevel|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/inventory_levels/adjust.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        InventoryLevel response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Connects an inventory item to a location
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Connect an inventory item to a location / Connect an inventory item to a location 
    remote isolated function connectsAnInventoryItemToALocation(string apiVersion, InventoryLevelsConnectJsonBody payload, string? xShopifyAccessToken = ()) returns ConnectInventoryItem|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/inventory_levels/connect.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        ConnectInventoryItem response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Sets the inventory level for an inventory item at a location
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Set the available inventory at a location / Set the available inventory at a location 
    remote isolated function setsTheInventoryLevelForAnInventoryItemAtALocation(string apiVersion, InventoryLevelsSetJsonBody payload, string? xShopifyAccessToken = ()) returns AvailableInventory|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/inventory_levels/set.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        AvailableInventory response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Retrieves a list of inventory levels
    #
    # + apiVersion - The API version
    # + inventory_item_ids - A comma-separated list of inventory item IDs.(maximum: 50) 
    # + location_ids - A comma-separated list of location IDs. To find the ID of a location, use the [Location resource](/api/reference/location).(maximum: 50) 
    # + 'limit - The maximum number of results to show.(default: 50)(maximum: 250) 
    # + updated_at_min - Show inventory levels updated at or after date (format: 2019-03-19T01:21:44-04:00). 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve inventory levels for the specified inventory items and locations / Retrieve inventory levels at a single location / Retrieve inventory levels for a single inventory item / Retrieve inventory levels for the specified inventory items and locations / Retrieve inventory levels at a single location / Retrieve inventory levels for a single inventory item 
    remote isolated function retrievesAListOfInventoryLevels(string apiVersion, string? inventory_item_ids = (), string? location_ids = (), string? 'limit = (), string? updated_at_min = (), string? xShopifyAccessToken = ()) returns InventoryLevels|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/inventory_levels.json`;
        map<anydata> queryParam = {"inventory_item_ids": inventory_item_ids, "location_ids": location_ids, "limit": 'limit, "updated_at_min": updated_at_min};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        InventoryLevels response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Deletes an inventory level from a location
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Delete an inventory level / Delete an inventory level 
    remote isolated function deletesAnInventoryLevelFromALocation(string apiVersion, string payload, string? xShopifyAccessToken = ()) returns string|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/inventory_levels.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        string response = check self.clientEp->delete(resourcePath, request, httpHeaders);
        return response;
    }
    # Retrieves a list of locations
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve a list of all locations / Retrieve a list of all locations 
    remote isolated function retrievesAListOfLocations(string apiVersion, string? xShopifyAccessToken = ()) returns LocationList|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/locations.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        LocationList response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Retrieves a single location by its ID
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve a single location / Retrieve a single location 
    remote isolated function retrievesASingleLocationByItsId(string apiVersion, string locationId, string? xShopifyAccessToken = ()) returns SingleLocation|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/locations/${getEncodedUri(locationId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        SingleLocation response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Retrieves a list of inventory levels for a location.
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve a list of all inventory for a location by its ID / Retrieve a list of all inventory for a location by its ID 
    remote isolated function retrievesAListOfInventoryLevelsForALocation(string apiVersion, string locationId, string? xShopifyAccessToken = ()) returns InventoryListResponse|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/locations/${getEncodedUri(locationId)}/inventory_levels.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        InventoryListResponse response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Retrieves a count of locations
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Count all store locations / Count all store locations 
    remote isolated function retrievesACountOfLocations(string apiVersion, string? xShopifyAccessToken = ()) returns StoreLocationCount|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/locations/count.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        StoreLocationCount response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Retrieves a list of all marketing events
    #
    # + apiVersion - The API version
    # + 'limit - The amount of results to return.(default: 50)(maximum: 250) 
    # + offset - The number of marketing events to skip. 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve all marketing events / Retrieve all marketing events 
    remote isolated function retrievesAListOfAllMarketingEvents(string apiVersion, string? 'limit = (), string? offset = (), string? xShopifyAccessToken = ()) returns MarketingEvents|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/marketing_events.json`;
        map<anydata> queryParam = {"limit": 'limit, "offset": offset};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        MarketingEvents response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Creates a marketing event
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Create a marketing event / Create a marketing event 
    remote isolated function createsAMarketingEvent(string apiVersion, ApiVersionMarketingEventsJsonBody payload, string? xShopifyAccessToken = ()) returns CreateMarketingEvent|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/marketing_events.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        CreateMarketingEvent response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Creates marketing engagements on a marketing event
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Add engagements to a marketing engagement / Add engagements to a marketing engagement 
    remote isolated function createsMarketingEngagementsOnAMarketingEvent(string apiVersion, string marketingEventId, MarketingEventIdEngagementsJsonBody payload, string? xShopifyAccessToken = ()) returns Engagements|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/marketing_events/${getEncodedUri(marketingEventId)}/engagements.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        Engagements response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Retrieves a single marketing event
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve a single marketing event by its ID / Retrieve a single marketing event by its ID 
    remote isolated function retrievesASingleMarketingEvent(string apiVersion, string marketingEventId, string? xShopifyAccessToken = ()) returns MarketingEvent|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/marketing_events/${getEncodedUri(marketingEventId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        MarketingEvent response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Updates a marketing event
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Update a marketing event. Can modify only timestamps, remote_id, and budget/currency. / Update a marketing event. Can modify only timestamps, remote_id, and budget/currency. 
    remote isolated function updatesAMarketingEvent(string apiVersion, string marketingEventId, MarketingEventsmarketingEventIdJsonBody payload, string? xShopifyAccessToken = ()) returns UpdateMarketingEvent|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/marketing_events/${getEncodedUri(marketingEventId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        UpdateMarketingEvent response = check self.clientEp->put(resourcePath, request, httpHeaders);
        return response;
    }
    # Deletes a marketing event
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Delete a marketing event / Delete a marketing event 
    remote isolated function deletesAMarketingEvent(string apiVersion, string marketingEventId, string payload, string? xShopifyAccessToken = ()) returns json|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/marketing_events/${getEncodedUri(marketingEventId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        json response = check self.clientEp->delete(resourcePath, request, httpHeaders);
        return response;
    }
    # Retrieves a count of all marketing events
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve a count all marketing events / Retrieve a count all marketing events 
    remote isolated function retrievesACountOfAllMarketingEvents(string apiVersion, string? xShopifyAccessToken = ()) returns ObjectCount|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/marketing_events/count.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        ObjectCount response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Retrieve a list of metafields from the resource's endpoint
    #
    # + apiVersion - The API version
    # + created_at_max - Show metafields created before date (format: 2014-04-25T16:15:47-04:00) 
    # + created_at_min - Show metafields created after date (format: 2014-04-25T16:15:47-04:00) 
    # + fields - comma-separated list of fields to include in the response 
    # + 'key - Show metafields with given key 
    # + 'limit - Amount of results(default: 50)(maximum: 250) 
    # + namespace - Show metafields with given namespace 
    # + since_id - Restrict results to after the specified ID 
    # + 'type - The type of data that the metafield stores in the `value` field. Refer to the list of supported types.
    # + updated_at_max - Show metafields last updated before date (format: 2014-04-25T16:15:47-04:00) 
    # + updated_at_min - Show metafields last updated after date (format: 2014-04-25T16:15:47-04:00) 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve a list of metafields from the resource's endpoint 
    remote isolated function retrieveAListOfMetafieldsFromTheResourceSEndpoint(string apiVersion, string ownerId, string ownerResource, string? created_at_max = (), string? created_at_min = (), string? fields = (), string? 'key = (), string? 'limit = (), string? namespace = (), string? since_id = (), string? 'type = (), string? updated_at_max = (), string? updated_at_min = (), string? xShopifyAccessToken = ()) returns MetafieldList|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/${getEncodedUri(ownerId)}/${getEncodedUri(ownerResource)}/metafields.json`;
        map<anydata> queryParam = {"created_at_max": created_at_max, "created_at_min": created_at_min, "fields": fields, "key": 'key, "limit": 'limit, "namespace": namespace, "since_id": since_id, "type": 'type, "updated_at_max": updated_at_max, "updated_at_min": updated_at_min};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        MetafieldList response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Create a metafield
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    remote isolated function createAMetafield(string apiVersion, string ownerId, string ownerResource, OwnerResourceMetafieldsJsonBody payload, string? xShopifyAccessToken = ()) returns error? {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/${getEncodedUri(ownerId)}/${getEncodedUri(ownerResource)}/metafields.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }
    # [Shop] Retrieve a list of metafields from the resource's endpoint
    #
    # + apiVersion - The API version
    # + created_at_max - Show metafields created before date (format: 2014-04-25T16:15:47-04:00) 
    # + created_at_min - Show metafields created after date (format: 2014-04-25T16:15:47-04:00) 
    # + fields - comma-separated list of fields to include in the response 
    # + 'key - Show metafields with given key 
    # + 'limit - Amount of results(default: 50)(maximum: 250) 
    # + namespace - Show metafields with given namespace 
    # + since_id - Restrict results to after the specified ID 
    # + 'type - The type of data that the metafield stores in the `value` field. Refer to the list of supported types.
    # + updated_at_max - Show metafields last updated before date (format: 2014-04-25T16:15:47-04:00) 
    # + updated_at_min - Show metafields last updated after date (format: 2014-04-25T16:15:47-04:00) 
    # + xShopifyAccessToken - The access token for the shop
    # + metafieldOwner_id - Filter by the resource ID on which the metafield is attached to.
    # + metafieldOwner_resource - Filter by the resource name on which the metafield is attached to.
    remote isolated function shopRetrieveAListOfMetafieldsFromTheResourceSEndpoint(string apiVersion, string? created_at_max = (), string? created_at_min = (), string? fields = (), string? 'key = (), string? 'limit = (), string? namespace = (), string? since_id = (), string? 'type = (), string? updated_at_max = (), string? updated_at_min = (), string? xShopifyAccessToken = (), string? metafieldOwner_id = (), string? metafieldOwner_resource = ()) returns error? {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/metafields.json`;
        map<anydata> queryParam = {"created_at_max": created_at_max, "created_at_min": created_at_min, "fields": fields, "key": 'key, "limit": 'limit, "namespace": namespace, "since_id": since_id, "type": 'type, "updated_at_max": updated_at_max, "updated_at_min": updated_at_min, "metafield[owner_id]": metafieldOwner_id, "metafield[owner_resource]": metafieldOwner_resource};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }
    # [Shop] Create a metafield
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    remote isolated function shopCreateAMetafield(string apiVersion, ApiVersionMetafieldsJsonBody payload, string? xShopifyAccessToken = ()) returns error? {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/metafields.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }
    # Retrieve a specific metafield
    #
    # + apiVersion - The API version
    # + fields - comma-separated list of fields to include in the response 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve a specific metafield 
    remote isolated function retrieveASpecificMetafield(string apiVersion, string ownerId, string ownerResource, string metafieldId, string? fields = (), string? xShopifyAccessToken = ()) returns MetafieldResponse|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/${getEncodedUri(ownerId)}/${getEncodedUri(ownerResource)}/metafields/${getEncodedUri(metafieldId)}.json`;
        map<anydata> queryParam = {"fields": fields};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        MetafieldResponse response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Updates a metafield
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    remote isolated function updatesAMetafield(string apiVersion, string ownerId, string ownerResource, string metafieldId, string payload, string? xShopifyAccessToken = ()) returns MetafieldResponse|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/${getEncodedUri(ownerId)}/${getEncodedUri(ownerResource)}/metafields/${getEncodedUri(metafieldId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        MetafieldResponse response = check self.clientEp->put(resourcePath, request, httpHeaders);
        return response;
    }
    # Deletes a metafield by its ID
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    remote isolated function deletesAMetafieldByItsId(string apiVersion, string ownerId, string ownerResource, string metafieldId, string payload, string? xShopifyAccessToken = ()) returns error? {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/${getEncodedUri(ownerId)}/${getEncodedUri(ownerResource)}/metafields/${getEncodedUri(metafieldId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        return self.clientEp->delete(resourcePath, request, httpHeaders);
    }
    # [Shop] Retrieve a specific metafield
    #
    # + apiVersion - The API version
    # + fields - comma-separated list of fields to include in the response 
    # + xShopifyAccessToken - The access token for the shop
    remote isolated function shopRetrieveASpecificMetafield(string apiVersion, string metafieldId, string? fields = (), string? xShopifyAccessToken = ()) returns MetafieldResponse|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/metafields/${getEncodedUri(metafieldId)}.json`;
        map<anydata> queryParam = {"fields": fields};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        MetafieldResponse response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # [Shop] Updates a metafield
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Updates a metafield 
    remote isolated function shopUpdatesAMetafield(string apiVersion, string metafieldId, string payload, string? xShopifyAccessToken = ()) returns Metafield|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/metafields/${getEncodedUri(metafieldId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        Metafield response = check self.clientEp->put(resourcePath, request, httpHeaders);
        return response;
    }
    # [Shop] Deletes a metafield by its ID.
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    remote isolated function shopDeletesAMetafieldByItsId(string apiVersion, string metafieldId, string payload, string? xShopifyAccessToken = ()) returns error? {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/metafields/${getEncodedUri(metafieldId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        return self.clientEp->delete(resourcePath, request, httpHeaders);
    }
    # Retrieve a count of a resource's metafields.
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    remote isolated function retrieveACountOfAResourceSMetafields(string apiVersion, string ownerId, string ownerResource, string? xShopifyAccessToken = ()) returns ObjectCount|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/${getEncodedUri(ownerId)}/${getEncodedUri(ownerResource)}/metafields/count.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        ObjectCount response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # [Shop] Retrieve a count of a resource's metafields.
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    remote isolated function shopRetrieveACountOfAResourceSMetafields(string apiVersion, string? xShopifyAccessToken = ()) returns ObjectCount|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/metafields/count.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        ObjectCount response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # List all of the mobile platform applications associated with the app
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - List all of the mobile platform applications associated with the app / List all of the mobile platform applications associated with the app 
    remote isolated function listAllOfTheMobilePlatformApplicationsAssociatedWithTheApp(string apiVersion, string? xShopifyAccessToken = ()) returns MobilePlatformApplications|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/mobile_platform_applications.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        MobilePlatformApplications response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Create a mobile platform application
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Create a mobile platform application for Android / Create mobile platform application for iOS / Create a mobile platform application for Android / Create mobile platform application for iOS 
    remote isolated function createAMobilePlatformApplication(string apiVersion, ApiVersionMobilePlatformApplicationsJsonBody payload, string? xShopifyAccessToken = ()) returns MobilePlatformApplication|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/mobile_platform_applications.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        MobilePlatformApplication response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Get a mobile platform application
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Get a mobile platform application / Get a mobile platform application 
    remote isolated function getAMobilePlatformApplication(string apiVersion, string mobilePlatformApplicationId, string? xShopifyAccessToken = ()) returns MobilePlatformApplicationResponse|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/mobile_platform_applications/${getEncodedUri(mobilePlatformApplicationId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        MobilePlatformApplicationResponse response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Update a mobile platform application
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Update a mobile platform application 
    remote isolated function updateAMobilePlatformApplication(string apiVersion, string mobilePlatformApplicationId, MobilePlatformApplicationsmobilePlatformApplicationIdJsonBody payload, string? xShopifyAccessToken = ()) returns MobilePlatformApplicationResponse|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/mobile_platform_applications/${getEncodedUri(mobilePlatformApplicationId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        MobilePlatformApplicationResponse response = check self.clientEp->put(resourcePath, request, httpHeaders);
        return response;
    }
    # Delete a mobile platform application
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    remote isolated function deleteAMobilePlatformApplication(string apiVersion, string mobilePlatformApplicationId, string payload, string? xShopifyAccessToken = ()) returns error? {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/mobile_platform_applications/${getEncodedUri(mobilePlatformApplicationId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        return self.clientEp->delete(resourcePath, request, httpHeaders);
    }
    # Retrieves a list of all articles from a blog
    #
    # + apiVersion - The API version
    # + 'limit - The maximum number of results to retrieve.(default: 50)(maximum: 250) 
    # + since_id - Restrict results to after the specified ID. 
    # + created_at_min - Show articles created after date (format: 2014-04-25T16:15:47-04:00). 
    # + created_at_max - Show articles created before date (format: 2014-04-25T16:15:47-04:00). 
    # + updated_at_min - Show articles last updated after date (format: 2014-04-25T16:15:47-04:00). 
    # + updated_at_max - Show articles last updated before date (format: 2014-04-25T16:15:47-04:00). 
    # + published_at_min - Show articles published after date (format: 2014-04-25T16:15:47-04:00). 
    # + published_at_max - Show articles published before date (format: 2014-04-25T16:15:47-04:00). 
    # + published_status - Retrieve results based on their published status.(default: any) 
    # + 'handle - Retrieve an article with a specific handle. 
    # + tag - Filter articles with a specific tag. 
    # + author - Filter articles by article author. 
    # + fields - Show only certain fields, specified by a comma-separated list of field names. 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve all articles from a blog after a specified ID / Retrieve a list of articles from a blog / Retrieve all articles from a blog after a specified ID / Retrieve a list of articles from a blog 
    remote isolated function retrievesAListOfAllArticlesFromABlog(string apiVersion, string blogId, string? 'limit = (), string? since_id = (), string? created_at_min = (), string? created_at_max = (), string? updated_at_min = (), string? updated_at_max = (), string? published_at_min = (), string? published_at_max = (), string? published_status = (), string? 'handle = (), string? tag = (), string? author = (), string? fields = (), string? xShopifyAccessToken = ()) returns Articles|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/blogs/${getEncodedUri(blogId)}/articles.json`;
        map<anydata> queryParam = {"limit": 'limit, "since_id": since_id, "created_at_min": created_at_min, "created_at_max": created_at_max, "updated_at_min": updated_at_min, "updated_at_max": updated_at_max, "published_at_min": published_at_min, "published_at_max": published_at_max, "published_status": published_status, "handle": 'handle, "tag": tag, "author": author, "fields": fields};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Articles response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Creates an article for a blog
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Create an article with a metafield / Create an article with an image, which will be downloaded by Shopify / Create an article with HTML markup for a blog / Create an article with a base64 encoded image / Create an unpublished article for a blog / Create an article with a metafield / Create an article with an image, which will be downloaded by Shopify / Create an article with HTML markup for a blog / Create an article with a base64 encoded image / Create an unpublished article for a blog 
    remote isolated function createsAnArticleForABlog(string apiVersion, string blogId, BlogIdArticlesJsonBody payload, string? xShopifyAccessToken = ()) returns Article|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/blogs/${getEncodedUri(blogId)}/articles.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        Article response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Retrieves a list of all article authors
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve a list of all article authors / Retrieve a list of all article authors 
    remote isolated function retrievesAListOfAllArticleAuthors(string apiVersion, string? xShopifyAccessToken = ()) returns ArticleAuthors|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/articles/authors.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        ArticleAuthors response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Retrieves a list of all article tags
    #
    # + apiVersion - The API version
    # + 'limit - The maximum number of tags to retrieve. 
    # + popular - A flag for ordering retrieved tags. If present in the request, then the results will be ordered by popularity, starting with the most popular tag. 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve a list of all tags from a specific blog / Retrieve a list of the most popular tags / Retrieve a list of all tags for all articles / Retrieve a list of the most popular tags from a specific blog / Retrieve a list of all tags from a specific blog / Retrieve a list of the most popular tags / Retrieve a list of all tags for all articles / Retrieve a list of the most popular tags from a specific blog 
    remote isolated function retrievesAListOfAllArticleTags(string apiVersion, string? 'limit = (), string? popular = (), string? xShopifyAccessToken = ()) returns TagsList|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/articles/tags.json`;
        map<anydata> queryParam = {"limit": 'limit, "popular": popular};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        TagsList response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Receive a single Article
    #
    # + apiVersion - The API version
    # + fields - Show only certain fields, specifed by a comma-separated list of field names. 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve a single article / Retrieve a single article 
    remote isolated function receiveASingleArticle(string apiVersion, string blogId, string articleId, string? fields = (), string? xShopifyAccessToken = ()) returns SingleArticle|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/blogs/${getEncodedUri(blogId)}/articles/${getEncodedUri(articleId)}.json`;
        map<anydata> queryParam = {"fields": fields};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        SingleArticle response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Updates an article
    #
    # + apiVersion - The API version
    # + return - Updates an article 
    remote isolated function updatesAnArticle(string apiVersion, string blogId, string articleId, ArticlesarticleIdJsonBody payload) returns SingleArticle|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/blogs/${getEncodedUri(blogId)}/articles/${getEncodedUri(articleId)}.json`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        SingleArticle response = check self.clientEp->put(resourcePath, request);
        return response;
    }
    # Deletes an article
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Delete an existing article from a blog / Delete an existing article from a blog 
    remote isolated function deletesAnArticle(string apiVersion, string blogId, string articleId, string payload, string? xShopifyAccessToken = ()) returns json|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/blogs/${getEncodedUri(blogId)}/articles/${getEncodedUri(articleId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        json response = check self.clientEp->delete(resourcePath, request, httpHeaders);
        return response;
    }
    # Retrieves a count of all articles from a blog
    #
    # + apiVersion - The API version
    # + created_at_min - Count articles created after date (format: 2014-04-25T16:15:47-04:00). 
    # + created_at_max - Count articles created before date (format: 2014-04-25T16:15:47-04:00). 
    # + updated_at_min - Count articles last updated after date (format: 2014-04-25T16:15:47-04:00). 
    # + updated_at_max - Count articles last updated before date (format: 2014-04-25T16:15:47-04:00). 
    # + published_at_min - Count articles published after date (format: 2014-04-25T16:15:47-04:00). 
    # + published_at_max - Count articles published before date (format: 2014-04-25T16:15:47-04:00). 
    # + published_status - Count articles with a given published status.(default: any) 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Count all a blog's articles / Count all a blog's articles 
    remote isolated function retrievesACountOfAllArticlesFromABlog(string apiVersion, string blogId, string? created_at_min = (), string? created_at_max = (), string? updated_at_min = (), string? updated_at_max = (), string? published_at_min = (), string? published_at_max = (), string? published_status = (), string? xShopifyAccessToken = ()) returns ArticlesCount|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/blogs/${getEncodedUri(blogId)}/articles/count.json`;
        map<anydata> queryParam = {"created_at_min": created_at_min, "created_at_max": created_at_max, "updated_at_min": updated_at_min, "updated_at_max": updated_at_max, "published_at_min": published_at_min, "published_at_max": published_at_max, "published_status": published_status};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        ArticlesCount response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Retrieves a list of all article tags from a specific blog
    #
    # + apiVersion - The API version
    # + 'limit - The maximum number of tags to retrieve.
    # + popular - A flag for ordering retrieved tags. If present in the request, then the results will be ordered by popularity, starting with the most popular tag.
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieves a list of all article tags from a specific blog 
    remote isolated function retrievesAListOfAllArticleTagsFromASpecificBlog(string apiVersion, string blogId, string? 'limit = (), string? popular = (), string? xShopifyAccessToken = ()) returns Articles|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/blogs/${getEncodedUri(blogId)}/articles/tags.json`;
        map<anydata> queryParam = {"limit": 'limit, "popular": popular};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Articles response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Retrieves a list of assets for a theme
    #
    # + apiVersion - The API version
    # + fields - Show only certain fields, specified by a comma-separated list of field names 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve a list of all assets for a theme / Retrieve a theme image / Retrieve a Liquid template / Retrieve a list of all assets for a theme / Retrieve a theme image / Retrieve a Liquid template 
    remote isolated function retrievesAListOfAssetsForATheme(string apiVersion, string themeId, string? fields = (), string? xShopifyAccessToken = ()) returns AssetsList|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/themes/${getEncodedUri(themeId)}/assets.json`;
        map<anydata> queryParam = {"fields": fields};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        AssetsList response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Creates or updates an asset for a theme
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Create an image asset by providing a base64-encoded attachment / Create an image asset by providing a source URL from which to upload the image / Change an existing Liquid template's value / Duplicate an existing asset by providing a source key / Create an image asset by providing a base64-encoded attachment / Create an image asset by providing a source URL from which to upload the image / Change an existing Liquid template's value / Duplicate an existing asset by providing a source key 
    remote isolated function createsOrUpdatesAnAssetForATheme(string apiVersion, string themeId, ThemeIdAssetsJsonBody payload, string? xShopifyAccessToken = ()) returns ImageAsset|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/themes/${getEncodedUri(themeId)}/assets.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        ImageAsset response = check self.clientEp->put(resourcePath, request, httpHeaders);
        return response;
    }
    # Deletes an asset from a theme
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Delete an image from a theme / Delete an image from a theme 
    remote isolated function deletesAnAssetFromATheme(string apiVersion, string themeId, string payload, string? xShopifyAccessToken = ()) returns DeleteAssetResponse|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/themes/${getEncodedUri(themeId)}/assets.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        DeleteAssetResponse response = check self.clientEp->delete(resourcePath, request, httpHeaders);
        return response;
    }
    # Retrieve a list of all blogs
    #
    # + apiVersion - The API version
    # + 'limit - The maximum number of results to retrieve.(default: 50)(maximum: 250) 
    # + since_id - Restrict results to after the specified ID 
    # + 'handle - Filter by blog handle 
    # + fields - comma-separated list of fields to include in the response 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Get all blogs for a shop after a specified ID / Get all blogs for a shop / Get all blogs for a shop after a specified ID / Get all blogs for a shop 
    remote isolated function retrieveAListOfAllBlogs(string apiVersion, string? 'limit = (), string? since_id = (), string? 'handle = (), string? fields = (), string? xShopifyAccessToken = ()) returns Blogs|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/blogs.json`;
        map<anydata> queryParam = {"limit": 'limit, "since_id": since_id, "handle": 'handle, "fields": fields};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Blogs response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Create a new Blog
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Create a new empty blog / Create a new empty blog with a metafield / Create a new empty blog / Create a new empty blog with a metafield 
    remote isolated function createANewBlog(string apiVersion, ApiVersionBlogsJsonBody payload, string? xShopifyAccessToken = ()) returns CreateBlogResponse|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/blogs.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        CreateBlogResponse response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Receive a single Blog
    #
    # + apiVersion - The API version
    # + fields - comma-separated list of fields to include in the response 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Get a single blog / Get a single blog 
    remote isolated function receiveASingleBlog(string apiVersion, string blogId, string? fields = (), string? xShopifyAccessToken = ()) returns SingleBlog|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/blogs/${getEncodedUri(blogId)}.json`;
        map<anydata> queryParam = {"fields": fields};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        SingleBlog response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Modify an existing Blog
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Add a metafield to an existing blog / Update an existing blog title and handle and also activate comments / Update an existing blog title / Add a metafield to an existing blog / Update an existing blog title and handle and also activate comments / Update an existing blog title 
    remote isolated function modifyAnExistingBlog(string apiVersion, string blogId, BlogsblogIdJsonBody payload, string? xShopifyAccessToken = ()) returns UpdateBlogResponse|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/blogs/${getEncodedUri(blogId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        UpdateBlogResponse response = check self.clientEp->put(resourcePath, request, httpHeaders);
        return response;
    }
    # Remove an existing Blog
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Remove an existing blog from a shop / Remove an existing blog from a shop 
    remote isolated function removeAnExistingBlog(string apiVersion, string blogId, string payload, string? xShopifyAccessToken = ()) returns json|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/blogs/${getEncodedUri(blogId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        json response = check self.clientEp->delete(resourcePath, request, httpHeaders);
        return response;
    }
    # Receive a count of all Blogs
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Get all blogs for a shop / Get all blogs for a shop 
    remote isolated function receiveACountOfAllBlogs(string apiVersion, string? xShopifyAccessToken = ()) returns BlogsCount|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/blogs/count.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        BlogsCount response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Retrieves a list of comments
    #
    # + apiVersion - The API version
    # + 'limit - The maximum number of results to retrieve.(default: 50)(maximum: 250) 
    # + since_id - Restrict results to after the specified ID. 
    # + created_at_min - Show comments created after date (format: 2014-04-25T16:15:47-04:00). 
    # + created_at_max - Show comments created before date (format: 2014-04-25T16:15:47-04:00). 
    # + updated_at_min - Show comments last updated after date (format: 2014-04-25T16:15:47-04:00). 
    # + updated_at_max - Show comments last updated before date (format: 2014-04-25T16:15:47-04:00). 
    # + published_at_min - Show comments published after date (format: 2014-04-25T16:15:47-04:00). 
    # + published_at_max - Show comments published before date (format: 2014-04-25T16:15:47-04:00). 
    # + fields - Show only certain fields, specified by a comma-separated list of field names. 
    # + published_status - Filter results by their published status.(default: any) 
    # + status - Filter results by their status. 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve all the comments for a certain article of a blog / Retrieve all the comments for this shop / Retrieve all comments for this shop after the specified ID / Retrieve all the comments for all the articles of a blog / Retrieve all the comments for a certain article of a blog / Retrieve all the comments for this shop / Retrieve all comments for this shop after the specified ID / Retrieve all the comments for all the articles of a blog 
    remote isolated function retrievesAListOfComments(string apiVersion, string? 'limit = (), string? since_id = (), string? created_at_min = (), string? created_at_max = (), string? updated_at_min = (), string? updated_at_max = (), string? published_at_min = (), string? published_at_max = (), string? fields = (), string? published_status = (), string? status = (), string? xShopifyAccessToken = ()) returns ArticleComments|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/comments.json`;
        map<anydata> queryParam = {"limit": 'limit, "since_id": since_id, "created_at_min": created_at_min, "created_at_max": created_at_max, "updated_at_min": updated_at_min, "updated_at_max": updated_at_max, "published_at_min": published_at_min, "published_at_max": published_at_max, "fields": fields, "published_status": published_status, "status": status};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        ArticleComments response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Creates a comment for an article
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Create a comment for an article of a blog using basic Textile markup / Create a comment for an article of a blog using basic Textile markup 
    remote isolated function createsACommentForAnArticle(string apiVersion, ApiVersionCommentsJsonBody payload, string? xShopifyAccessToken = ()) returns ArticleComment|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/comments.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        ArticleComment response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Approves a comment
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Approve a comment and publish it to the blog / Approve a comment and publish it to the blog 
    remote isolated function approvesAComment(string apiVersion, string commentId, record{} payload, string? xShopifyAccessToken = ()) returns ApproveCommentResponse|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/comments/${getEncodedUri(commentId)}/approve.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        ApproveCommentResponse response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Marks a comment as not spam
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Mark a comment as not spam, restoring it to an unapproved or published state / Mark a comment as not spam, restoring it to an unapproved or published state 
    remote isolated function marksACommentAsNotSpam(string apiVersion, string commentId, record{} payload, string? xShopifyAccessToken = ()) returns MarkCommentResponse|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/comments/${getEncodedUri(commentId)}/not_spam.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        MarkCommentResponse response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Removes a comment
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Remove a comment / Remove a comment 
    remote isolated function removesAComment(string apiVersion, string commentId, record{} payload, string? xShopifyAccessToken = ()) returns InlineResponse20062|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/comments/${getEncodedUri(commentId)}/remove.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        InlineResponse20062 response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Restores a previously removed comment
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Restore a removed comment / Restore a removed comment 
    remote isolated function restoresAPreviouslyRemovedComment(string apiVersion, string commentId, record{} payload, string? xShopifyAccessToken = ()) returns RestoreRemoveComment|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/comments/${getEncodedUri(commentId)}/restore.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        RestoreRemoveComment response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Marks a comment as spam
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Mark a comment as spam / Mark a comment as spam 
    remote isolated function marksACommentAsSpam(string apiVersion, string commentId, record{} payload, string? xShopifyAccessToken = ()) returns SpamCommentResponse|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/comments/${getEncodedUri(commentId)}/spam.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        SpamCommentResponse response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Retrieves a single comment by its ID
    #
    # + apiVersion - The API version
    # + fields - Show only certain fields, specified by a comma-separated list of field names. 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve a single comment / Retrieve a single comment 
    remote isolated function retrievesASingleCommentByItsId(string apiVersion, string commentId, string? fields = (), string? xShopifyAccessToken = ()) returns SingleCommentResponse|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/comments/${getEncodedUri(commentId)}.json`;
        map<anydata> queryParam = {"fields": fields};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        SingleCommentResponse response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Updates a comment of an article
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Update the body of an existing comment / Update the body of an existing comment 
    remote isolated function updatesACommentOfAnArticle(string apiVersion, string commentId, CommentscommentIdJsonBody payload, string? xShopifyAccessToken = ()) returns UpdateCommentResponse|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/comments/${getEncodedUri(commentId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        UpdateCommentResponse response = check self.clientEp->put(resourcePath, request, httpHeaders);
        return response;
    }
    # Retrieves a count of comments
    #
    # + apiVersion - The API version
    # + created_at_min - Count comments created after date (format: 2014-04-25T16:15:47-04:00). 
    # + created_at_max - Count comments created before date (format: 2014-04-25T16:15:47-04:00). 
    # + updated_at_min - Count comments last updated after date (format: 2014-04-25T16:15:47-04:00). 
    # + updated_at_max - Count comments last updated before date (format: 2014-04-25T16:15:47-04:00). 
    # + published_at_min - Count comments published after date (format: 2014-04-25T16:15:47-04:00). 
    # + published_at_max - Count comments published before date (format: 2014-04-25T16:15:47-04:00). 
    # + published_status - Retrieve a count of comments with a given published status.(default: any) 
    # + status - Retrieve a count of comments with a given status. 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Count all comments for a certain article of a blog / Count all the comments for all the articles of a blog / Count all the comments for this shop / Count all comments for a certain article of a blog / Count all the comments for all the articles of a blog / Count all the comments for this shop 
    remote isolated function retrievesACountOfComments(string apiVersion, string? created_at_min = (), string? created_at_max = (), string? updated_at_min = (), string? updated_at_max = (), string? published_at_min = (), string? published_at_max = (), string? published_status = (), string? status = (), string? xShopifyAccessToken = ()) returns BlogsCount|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/comments/count.json`;
        map<anydata> queryParam = {"created_at_min": created_at_min, "created_at_max": created_at_max, "updated_at_min": updated_at_min, "updated_at_max": updated_at_max, "published_at_min": published_at_min, "published_at_max": published_at_max, "published_status": published_status, "status": status};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        BlogsCount response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Retrieves a list of pages
    #
    # + apiVersion - The API version
    # + 'limit - The maximum number of results to show.(default: 50)(maximum: 250) 
    # + since_id - Restrict results to after the specified ID. 
    # + title - Retrieve pages with a given title. 
    # + 'handle - Retrieve a page with a given handle. 
    # + created_at_min - Show pages created after date (format: 2008-12-31). 
    # + created_at_max - Show pages created before date (format: 2008-12-31). 
    # + updated_at_min - Show pages last updated after date (format: 2008-12-31). 
    # + updated_at_max - Show pages last updated before date (format: 2008-12-31). 
    # + published_at_min - Show pages published after date (format: 2014-04-25T16:15:47-04:00). 
    # + published_at_max - Show pages published before date (format: 2014-04-25T16:15:47-04:00). 
    # + fields - Show only certain fields, specified by a comma-separated list of field names. 
    # + published_status - Restrict results to pages with a given published status:(default: any) 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve a list of all pages after the specified ID / Get all pages for a shop / Retrieve a list of all pages after the specified ID / Get all pages for a shop 
    remote isolated function retrievesAListOfPages(string apiVersion, string? 'limit = (), string? since_id = (), string? title = (), string? 'handle = (), string? created_at_min = (), string? created_at_max = (), string? updated_at_min = (), string? updated_at_max = (), string? published_at_min = (), string? published_at_max = (), string? fields = (), string? published_status = (), string? xShopifyAccessToken = ()) returns PagesListResponse|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/pages.json`;
        map<anydata> queryParam = {"limit": 'limit, "since_id": since_id, "title": title, "handle": 'handle, "created_at_min": created_at_min, "created_at_max": created_at_max, "updated_at_min": updated_at_min, "updated_at_max": updated_at_max, "published_at_min": published_at_min, "published_at_max": published_at_max, "fields": fields, "published_status": published_status};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        PagesListResponse response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Create a new Page
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Create a page with a metafield / Create a page with HTML markup / Create an unpublished page / Create a page with a metafield / Create a page with HTML markup / Create an unpublished page 
    remote isolated function createANewPage(string apiVersion, ApiVersionPagesJsonBody payload, string? xShopifyAccessToken = ()) returns PageResponse|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/pages.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        PageResponse response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Retrieves a single page by its ID
    #
    # + apiVersion - The API version
    # + fields - Show only certain fields, specified by a comma-separated list of field names. 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve a single page / Retrieve a single page 
    remote isolated function retrievesASinglePageByItsId(string apiVersion, string pageId, string? fields = (), string? xShopifyAccessToken = ()) returns SinglePageResponse|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/pages/${getEncodedUri(pageId)}.json`;
        map<anydata> queryParam = {"fields": fields};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        SinglePageResponse response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Updates a page
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Update an existing page completely / Add a metafield to a page / Show a hidden page / Update the body HTML of an existing page / Hide a published page / Update an existing page completely / Add a metafield to a page / Show a hidden page / Update the body HTML of an existing page / Hide a published page 
    remote isolated function updatesAPage(string apiVersion, string pageId, PagespageIdJsonBody payload, string? xShopifyAccessToken = ()) returns UpdatePageResponse|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/pages/${getEncodedUri(pageId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        UpdatePageResponse response = check self.clientEp->put(resourcePath, request, httpHeaders);
        return response;
    }
    # Deletes a page
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Delete a page / Delete a page 
    remote isolated function deletesAPage(string apiVersion, string pageId, string payload, string? xShopifyAccessToken = ()) returns json|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/pages/${getEncodedUri(pageId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        json response = check self.clientEp->delete(resourcePath, request, httpHeaders);
        return response;
    }
    # Retrieves a page count
    #
    # + apiVersion - The API version
    # + title - Count pages with a given title. 
    # + created_at_min - Count pages created after date (format: 2008-12-31). 
    # + created_at_max - Count pages created before date (format: 2008-12-31). 
    # + updated_at_min - Count pages last updated after date (format: 2008-12-31). 
    # + updated_at_max - Count pages last updated before date (format: 2008-12-31). 
    # + published_at_min - Show pages published after date (format: 2014-04-25T16:15:47-04:00). 
    # + published_at_max - Show pages published before date (format: 2014-04-25T16:15:47-04:00). 
    # + published_status - Count pages with a given published status:(default: any) 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve a count of all pages / Retrieve a count of all pages 
    remote isolated function retrievesAPageCount(string apiVersion, string? title = (), string? created_at_min = (), string? created_at_max = (), string? updated_at_min = (), string? updated_at_max = (), string? published_at_min = (), string? published_at_max = (), string? published_status = (), string? xShopifyAccessToken = ()) returns ArticlesCount|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/pages/count.json`;
        map<anydata> queryParam = {"title": title, "created_at_min": created_at_min, "created_at_max": created_at_max, "updated_at_min": updated_at_min, "updated_at_max": updated_at_max, "published_at_min": published_at_min, "published_at_max": published_at_max, "published_status": published_status};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        ArticlesCount response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Retrieves a list of URL redirects
    #
    # + apiVersion - The API version
    # + 'limit - The maximum number of results to show.(default: 50)(maximum: 250) 
    # + since_id - Restrict results to after the specified ID. 
    # + path - Show redirects with a given path. 
    # + target - Show redirects with a given target. 
    # + fields - Show only certain fields, specified by a comma-separated list of field names. 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve a list of URL redirects after a specified ID / Retrieve a list of all redirects / Retrieve a list of URL redirects after a specified ID / Retrieve a list of all redirects 
    remote isolated function retrievesAListOfUrlRedirects(string apiVersion, string? 'limit = (), string? since_id = (), string? path = (), string? target = (), string? fields = (), string? xShopifyAccessToken = ()) returns UrlList|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/redirects.json`;
        map<anydata> queryParam = {"limit": 'limit, "since_id": since_id, "path": path, "target": target, "fields": fields};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        UrlList response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Creates a redirect
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Create a redirect using a full URL for the path, which will be saved as an absolute path without a domain / Create a redirect / Create a redirect using a full URL for the path, which will be saved as an absolute path without a domain / Create a redirect 
    remote isolated function createsARedirect(string apiVersion, ApiVersionRedirectsJsonBody payload, string? xShopifyAccessToken = ()) returns RedirectResponse|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/redirects.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        RedirectResponse response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Retrieves a single redirect
    #
    # + apiVersion - The API version
    # + fields - Show only certain fields, specified by a comma-separated list of field names. 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve a single redirect by its ID / Retrieve a single redirect by its ID 
    remote isolated function retrievesASingleRedirect(string apiVersion, string redirectId, string? fields = (), string? xShopifyAccessToken = ()) returns SingleRedirect|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/redirects/${getEncodedUri(redirectId)}.json`;
        map<anydata> queryParam = {"fields": fields};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        SingleRedirect response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Updates an existing redirect
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Update the path URI of a redirect / Update both the path and target URIs of a redirect / Update the path URI of a redirect / Update both the path and target URIs of a redirect 
    remote isolated function updatesAnExistingRedirect(string apiVersion, string redirectId, RedirectsredirectIdJsonBody payload, string? xShopifyAccessToken = ()) returns UpdateRedirect|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/redirects/${getEncodedUri(redirectId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        UpdateRedirect response = check self.clientEp->put(resourcePath, request, httpHeaders);
        return response;
    }
    # Deletes a redirect
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Delete an existing redirect / Delete an existing redirect 
    remote isolated function deletesARedirect(string apiVersion, string redirectId, string payload, string? xShopifyAccessToken = ()) returns json|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/redirects/${getEncodedUri(redirectId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        json response = check self.clientEp->delete(resourcePath, request, httpHeaders);
        return response;
    }
    # Retrieves a count of URL redirects
    #
    # + apiVersion - The API version
    # + path - Count redirects with given path. 
    # + target - Count redirects with given target. 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Count all redirects / Count all redirects 
    remote isolated function retrievesACountOfUrlRedirects(string apiVersion, string? path = (), string? target = (), string? xShopifyAccessToken = ()) returns EventsCount|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/redirects/count.json`;
        map<anydata> queryParam = {"path": path, "target": target};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        EventsCount response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Retrieves a list of all script tags
    #
    # + apiVersion - The API version
    # + 'limit - The number of results to return.(default: 50)(maximum: 250) 
    # + since_id - Restrict results to after the specified ID. 
    # + created_at_min - Show script tags created after this date. (format: 2014-04-25T16:15:47-04:00) 
    # + created_at_max - Show script tags created before this date. (format: 2014-04-25T16:15:47-04:00) 
    # + updated_at_min - Show script tags last updated after this date. (format: 2014-04-25T16:15:47-04:00) 
    # + updated_at_max - Show script tags last updated before this date. (format: 2014-04-25T16:15:47-04:00) 
    # + src - Show script tags with this URL. 
    # + fields - A comma-separated list of fields to include in the response. 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve a list of all script tags after the specified ID / Retrieve a list of all script tags / Retrieve a list of all script tags with a particular URL / Retrieve a list of all script tags after the specified ID / Retrieve a list of all script tags / Retrieve a list of all script tags with a particular URL 
    remote isolated function retrievesAListOfAllScriptTags(string apiVersion, string? 'limit = (), string? since_id = (), string? created_at_min = (), string? created_at_max = (), string? updated_at_min = (), string? updated_at_max = (), string? src = (), string? fields = (), string? xShopifyAccessToken = ()) returns ScriptTagsList|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/script_tags.json`;
        map<anydata> queryParam = {"limit": 'limit, "since_id": since_id, "created_at_min": created_at_min, "created_at_max": created_at_max, "updated_at_min": updated_at_min, "updated_at_max": updated_at_max, "src": src, "fields": fields};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        ScriptTagsList response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Creates a new script tag
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Create a new script tag / Create a new script tag 
    remote isolated function createsANewScriptTag(string apiVersion, ApiVersionScriptTagsJsonBody payload, string? xShopifyAccessToken = ()) returns ScriptTagResponse|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/script_tags.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        ScriptTagResponse response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Retrieves a single script tag
    #
    # + apiVersion - The API version
    # + fields - A comma-separated list of fields to include in the response. 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve a single script tag by its ID / Retrieve a single script tag by its ID 
    remote isolated function retrievesASingleScriptTag(string apiVersion, string scriptTagId, string? fields = (), string? xShopifyAccessToken = ()) returns SingleScriptTag|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/script_tags/${getEncodedUri(scriptTagId)}.json`;
        map<anydata> queryParam = {"fields": fields};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        SingleScriptTag response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Updates a script tag
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Update a script tag's URL / Update a script tag's URL 
    remote isolated function updatesAScriptTag(string apiVersion, string scriptTagId, ScriptTagsscriptTagIdJsonBody payload, string? xShopifyAccessToken = ()) returns UpdateScriptTagResponse|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/script_tags/${getEncodedUri(scriptTagId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        UpdateScriptTagResponse response = check self.clientEp->put(resourcePath, request, httpHeaders);
        return response;
    }
    # Deletes a script tag
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Delete an existing script tag / Delete an existing script tag 
    remote isolated function deletesAScriptTag(string apiVersion, string scriptTagId, string payload, string? xShopifyAccessToken = ()) returns json|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/script_tags/${getEncodedUri(scriptTagId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        json response = check self.clientEp->delete(resourcePath, request, httpHeaders);
        return response;
    }
    # Retrieves a count of all script tags
    #
    # + apiVersion - The API version
    # + src - Count only script tags with a given URL. 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve a count of all script tags for your shop / Retrieve a count of all script tags for your shop 
    remote isolated function retrievesACountOfAllScriptTags(string apiVersion, string? src = (), string? xShopifyAccessToken = ()) returns BlogsCount|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/script_tags/count.json`;
        map<anydata> queryParam = {"src": src};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        BlogsCount response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Retrieves a list of themes
    #
    # + apiVersion - The API version
    # + fields - Show only certain fields, specified by a comma-separated list of field names. 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve a list of themes / Retrieve a list of themes 
    remote isolated function retrievesAListOfThemes(string apiVersion, string? fields = (), string? xShopifyAccessToken = ()) returns ThemesList|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/themes.json`;
        map<anydata> queryParam = {"fields": fields};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        ThemesList response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Creates a theme
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Create a theme that has a custom name and is published / Create a theme that has a custom name and is published 
    remote isolated function createsATheme(string apiVersion, ApiVersionThemesJsonBody payload, string? xShopifyAccessToken = ()) returns CreateThemeResponse|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/themes.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        CreateThemeResponse response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Retrieves a single theme
    #
    # + apiVersion - The API version
    # + fields - Show only certain fields, specified by a comma-separated list of field names. 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve a single theme / Retrieve a single theme 
    remote isolated function retrievesASingleTheme(string apiVersion, string themeId, string? fields = (), string? xShopifyAccessToken = ()) returns SingleTheme|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/themes/${getEncodedUri(themeId)}.json`;
        map<anydata> queryParam = {"fields": fields};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        SingleTheme response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Modify an existing Theme
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Publish an unpublished theme / Update a theme's name / Publish an unpublished theme / Update a theme's name 
    remote isolated function modifyAnExistingTheme(string apiVersion, string themeId, ThemesthemeIdJsonBody payload, string? xShopifyAccessToken = ()) returns PublishThemeResponse|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/themes/${getEncodedUri(themeId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        PublishThemeResponse response = check self.clientEp->put(resourcePath, request, httpHeaders);
        return response;
    }
    # Remove an existing Theme
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Delete a theme / Delete a theme 
    remote isolated function removeAnExistingTheme(string apiVersion, string themeId, string payload, string? xShopifyAccessToken = ()) returns DeleteThemeResponse|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/themes/${getEncodedUri(themeId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        DeleteThemeResponse response = check self.clientEp->delete(resourcePath, request, httpHeaders);
        return response;
    }
    # Retrieves a count of checkouts
    #
    # + apiVersion - The API version
    # + since_id - Restrict results to after the specified ID. 
    # + created_at_min - Count checkouts created after the specified date. (format: 2014-04-25T16:15:47-04:00) 
    # + created_at_max - Count checkouts created before the specified date. (format: 2014-04-25T16:15:47-04:00) 
    # + updated_at_min - Count checkouts last updated after the specified date. (format: 2014-04-25T16:15:47-04:00) 
    # + updated_at_max - Count checkouts last updated before the specified date. (format: 2014-04-25T16:15:47-04:00) 
    # + status - Count checkouts with a given status.(default: open) 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Count all checkouts / Count all checkouts 
    remote isolated function retrievesACountOfCheckouts(string apiVersion, string? since_id = (), string? created_at_min = (), string? created_at_max = (), string? updated_at_min = (), string? updated_at_max = (), string? status = (), string? xShopifyAccessToken = ()) returns CheckoutCount|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/checkouts/count.json`;
        map<anydata> queryParam = {"since_id": since_id, "created_at_min": created_at_min, "created_at_max": created_at_max, "updated_at_min": updated_at_min, "updated_at_max": updated_at_max, "status": status};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        CheckoutCount response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Retrieves a list of abandoned checkouts
    #
    # + apiVersion - The API version
    # + 'limit - The maximum number of results to show.(default: 50)(maximum: 250) 
    # + since_id - Restrict results to after the specified ID. 
    # + created_at_min - Show checkouts created after the specified date. (format: 2014-04-25T16:15:47-04:00) 
    # + created_at_max - Show checkouts created before the specified date. (format: 2014-04-25T16:15:47-04:00) 
    # + updated_at_min - Show checkouts last updated after the specified date. (format: 2014-04-25T16:15:47-04:00) 
    # + updated_at_max - Show checkouts last updated before the specified date. (format: 2014-04-25T16:15:47-04:00) 
    # + status - Show only checkouts with a given status.(default: open) 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve all abandoned checkouts / Retrieve all abandoned checkouts 
    remote isolated function retrievesAListOfAbandonedCheckouts(string apiVersion, string? 'limit = (), string? since_id = (), string? created_at_min = (), string? created_at_max = (), string? updated_at_min = (), string? updated_at_max = (), string? status = (), string? xShopifyAccessToken = ()) returns AbandonedCheckouts|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/checkouts.json`;
        map<anydata> queryParam = {"limit": 'limit, "since_id": since_id, "created_at_min": created_at_min, "created_at_max": created_at_max, "updated_at_min": updated_at_min, "updated_at_max": updated_at_max, "status": status};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        AbandonedCheckouts response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Creates a checkout
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Create a checkout with a product variant and quantity / Create a checkout without any line items / Create a checkout with a product variant and quantity / Create a checkout without any line items 
    remote isolated function createsACheckout(string apiVersion, ApiVersionCheckoutsJsonBody payload, string? xShopifyAccessToken = ()) returns CreateCheckoutResponse|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/checkouts.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        CreateCheckoutResponse response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Retrieves a list of draft orders
    #
    # + apiVersion - The API version
    # + fields - A comma-separated list of fields to include in the response 
    # + 'limit - Amount of results(default: 50)(maximum: 250) 
    # + since_id - Restrict results to after the specified ID 
    # + updated_at_min - Show orders last updated after date (format: 2014-04-25T16:15:47-04:00) 
    # + updated_at_max - Show orders last updated before date (format: 2014-04-25T16:15:47-04:00) 
    # + ids - Filter by list of IDs 
    # + xShopifyAccessToken - The access token for the shop
    # + return - List all draft orders / List all draft orders 
    remote isolated function retrievesAListOfDraftOrders(string apiVersion, string? fields = (), string? 'limit = (), string? since_id = (), string? updated_at_min = (), string? updated_at_max = (), string? ids = (), string? status = (), string? xShopifyAccessToken = ()) returns DraftOrders|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/draft_orders.json`;
        map<anydata> queryParam = {"fields": fields, "limit": 'limit, "since_id": since_id, "updated_at_min": updated_at_min, "updated_at_max": updated_at_max, "ids": ids, "status": status};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        DraftOrders response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Create a new DraftOrder
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - <span id="create-a-percent-discount-on-a-line-item-{{ current_version }}">Create a draft order with a percent discount on a line item</span> / Create a simple draft order with only a product variant ID. / <span id="create-a-draft-order-with-a-discount-{{ current_version }}">Create a draft order with a discount</span> / <span id="create-custom-draft-order-{{ current_version }}">Create custom draft order</span> / Create a draft order with a discounted line item / <span id="create-a-percent-discount-on-a-line-item-{{ current_version }}">Create a draft order with a percent discount on a line item</span> / Create a simple draft order with only a product variant ID. / <span id="create-a-draft-order-with-a-discount-{{ current_version }}">Create a draft order with a discount</span> / <span id="create-custom-draft-order-{{ current_version }}">Create custom draft order</span> / Create a draft order with a discounted line item 
    remote isolated function createANewDraftorder(string apiVersion, ApiVersionDraftOrdersJsonBody payload, string? xShopifyAccessToken = ()) returns CreateDraftOrder|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/draft_orders.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        CreateDraftOrder response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Send an invoice
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Send a customized invoice / Send the default invoice / Send a customized invoice / Send the default invoice 
    remote isolated function sendAnInvoice(string apiVersion, string draftOrderId, DraftOrderIdSendInvoiceJsonBody payload, string? xShopifyAccessToken = ()) returns InvoiceResponse|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/draft_orders/${getEncodedUri(draftOrderId)}/send_invoice.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        InvoiceResponse response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Receive a single DraftOrder
    #
    # + apiVersion - The API version
    # + fields - A comma-separated list of fields to include in the response 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Get a representation of a single draft order / Get a representation of a single draft order 
    remote isolated function receiveASingleDraftorder(string apiVersion, string draftOrderId, string? fields = (), string? xShopifyAccessToken = ()) returns SingleDraftOrder|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/draft_orders/${getEncodedUri(draftOrderId)}.json`;
        map<anydata> queryParam = {"fields": fields};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        SingleDraftOrder response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Modify an existing DraftOrder
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - <span id="set-discount-on-a-draft-order-{{ current_version }}">Set a discount on a draft order</span> / Add a note to a draft order / <span id="set-discount-on-a-draft-order-{{ current_version }}">Set a discount on a draft order</span> / Add a note to a draft order 
    remote isolated function modifyAnExistingDraftorder(string apiVersion, string draftOrderId, DraftOrdersdraftOrderIdJsonBody payload, string? xShopifyAccessToken = ()) returns ModifyDraftOrder|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/draft_orders/${getEncodedUri(draftOrderId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        ModifyDraftOrder response = check self.clientEp->put(resourcePath, request, httpHeaders);
        return response;
    }
    # Remove an existing DraftOrder
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Permanently delete a draft order / Permanently delete a draft order 
    remote isolated function removeAnExistingDraftorder(string apiVersion, string draftOrderId, string payload, string? xShopifyAccessToken = ()) returns json|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/draft_orders/${getEncodedUri(draftOrderId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        json response = check self.clientEp->delete(resourcePath, request, httpHeaders);
        return response;
    }
    # Receive a count of all DraftOrders
    #
    # + apiVersion - The API version
    # + since_id - Count draft orders after the specified ID. 
    # + status - Count draft orders that have a given status.(default: open) 
    # + updated_at_max - Count draft orders last updated before the specified date (format: 2014-04-25T16:15:47-04:00). 
    # + updated_at_min - Count draft orders last updated after the specified date (format: 2014-04-25T16:15:47-04:00). 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Count all draft orders / Count all draft orders 
    remote isolated function receiveACountOfAllDraftorders(string apiVersion, string? since_id = (), string? status = (), string? updated_at_max = (), string? updated_at_min = (), string? xShopifyAccessToken = ()) returns StoreLocationCount|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/draft_orders/count.json`;
        map<anydata> queryParam = {"since_id": since_id, "status": status, "updated_at_max": updated_at_max, "updated_at_min": updated_at_min};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        StoreLocationCount response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Complete a draft order
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Complete a draft order, marking it as paid / Complete a draft order, marking it as pending / Complete a draft order, marking it as paid / Complete a draft order, marking it as pending 
    remote isolated function completeADraftOrder(string apiVersion, string draftOrderId, string payload, string? xShopifyAccessToken = ()) returns CompleteDraftOrder|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/draft_orders/${getEncodedUri(draftOrderId)}/complete.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        CompleteDraftOrder response = check self.clientEp->put(resourcePath, request, httpHeaders);
        return response;
    }
    # Retrieves a list of orders
    #
    # + apiVersion - The API version
    # + ids - Retrieve only orders specified by a comma-separated list of order IDs. 
    # + 'limit - The maximum number of results to show on a page.(default: 50)(maximum: 250) 
    # + since_id - Show orders after the specified ID. 
    # + created_at_min - Show orders created at or after date (format: 2014-04-25T16:15:47-04:00). 
    # + created_at_max - Show orders created at or before date (format: 2014-04-25T16:15:47-04:00). 
    # + updated_at_min - Show orders last updated at or after date (format: 2014-04-25T16:15:47-04:00). 
    # + updated_at_max - Show orders last updated at or before date (format: 2014-04-25T16:15:47-04:00). 
    # + processed_at_min - Show orders imported at or after date (format: 2014-04-25T16:15:47-04:00). 
    # + processed_at_max - Show orders imported at or before date (format: 2014-04-25T16:15:47-04:00). 
    # + attribution_app_id - Show orders attributed to a certain app, specified by the app ID. Set as `current` to show orders for the app currently consuming the API. 
    # + status - Filter orders by their status.(default: open) 
    # + financial_status - Filter orders by their financial status.(default: any) 
    # + fulfillment_status - Filter orders by their fulfillment status.(default: any) 
    # + fields - Retrieve only certain fields, specified by a comma-separated list of fields names. 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve all orders but show only certain properties / Retrieve specific orders / Retrieve orders that have authorized payments ready to be captured / Retrieve all orders / Retrieve orders last updated after 2005-07-31 15:57:11 in the EDT timezone / Retrieve all orders after the specified ID / Retrieve all orders but show only certain properties / Retrieve specific orders / Retrieve orders that have authorized payments ready to be captured / Retrieve all orders / Retrieve orders last updated after 2005-07-31 15:57:11 in the EDT timezone / Retrieve all orders after the specified ID 
    remote isolated function retrievesAListOfOrders(string apiVersion, string? ids = (), string? name = (), string? 'limit = (), string? since_id = (), string? created_at_min = (), string? created_at_max = (), string? updated_at_min = (), string? updated_at_max = (), string? processed_at_min = (), string? processed_at_max = (), string? attribution_app_id = (), string? status = (), string? financial_status = (), string? fulfillment_status = (), string? fields = (), string? xShopifyAccessToken = ()) returns OrdersList|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/orders.json`;
        map<anydata> queryParam = {"ids": ids, "name": name, "limit": 'limit, "since_id": since_id, "created_at_min": created_at_min, "created_at_max": created_at_max, "updated_at_min": updated_at_min, "updated_at_max": updated_at_max, "processed_at_min": processed_at_min, "processed_at_max": processed_at_max, "attribution_app_id": attribution_app_id, "status": status, "financial_status": financial_status, "fulfillment_status": fulfillment_status, "fields": fields};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        OrdersList response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Create an order
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Create a partially paid order with a new customer and addresses / Create a comprehensive order / Create an order with tax lines split across taxable line items / Create a simple order with only a product variant ID / Create a simple order without sending an order receipt or a fulfillment receipt / Create a simple order, sending an order confirmation and a shipping confirmation to the customer / Create a pending order with an existing customer / Create a simple order and fulfill it / Create a partially paid order with a new customer and addresses / Create a comprehensive order / Create an order with tax lines split across taxable line items / Create a simple order with only a product variant ID / Create a simple order without sending an order receipt or a fulfillment receipt / Create a simple order, sending an order confirmation and a shipping confirmation to the customer / Create a pending order with an existing customer / Create a simple order and fulfill it 
    remote isolated function createAnOrder(string apiVersion, CreateOrder payload, string? xShopifyAccessToken = ()) returns OrderResponse|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/orders.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        OrderResponse response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Cancel an order
    #
    # + apiVersion - The API version
    # + return - Cancel an order 
    remote isolated function cancelAnOrder(string apiVersion, string orderId, record{} payload) returns OrderResponse|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/orders/${getEncodedUri(orderId)}/cancel.json`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        OrderResponse response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    # Close an order
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Close an order / Close an order 
    remote isolated function closeAnOrder(string apiVersion, string orderId, record{} payload, string? xShopifyAccessToken = ()) returns CloseOrderResponse|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/orders/${getEncodedUri(orderId)}/close.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        CloseOrderResponse response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Re-open a closed order
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Re-open a closed order / Re-open a closed order 
    remote isolated function reOpenAClosedOrder(string apiVersion, string orderId, record{} payload, string? xShopifyAccessToken = ()) returns ReopenCloseOrder|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/orders/${getEncodedUri(orderId)}/open.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        ReopenCloseOrder response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Retrieves a specific order
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve a single order / Get only particular fields / Retrieve a single order / Get only particular fields 
    remote isolated function retrievesASpecificOrder(string apiVersion, string orderId, string? xShopifyAccessToken = ()) returns SingleOrderResponse|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/orders/${getEncodedUri(orderId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        SingleOrderResponse response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Updates an order
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Add note attributes to an order / Update the shipping address of an order / Update an order's tags / Add a note to order / Change an order's phone number / Add a metafield to an order / Change an order's email address / Remove the customer from an order / Change whether the buyer accepts marketing / Add note attributes to an order / Update the shipping address of an order / Update an order's tags / Add a note to order / Change an order's phone number / Add a metafield to an order / Change an order's email address / Remove the customer from an order / Change whether the buyer accepts marketing 
    remote isolated function updatesAnOrder(string apiVersion, string orderId, UpdateOrder payload, string? xShopifyAccessToken = ()) returns UpdateOrderResponse|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/orders/${getEncodedUri(orderId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        UpdateOrderResponse response = check self.clientEp->put(resourcePath, request, httpHeaders);
        return response;
    }
    # Deletes an order
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Delete an order / Delete an order 
    remote isolated function deletesAnOrder(string apiVersion, string orderId, string payload, string? xShopifyAccessToken = ()) returns json|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/orders/${getEncodedUri(orderId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        json response = check self.clientEp->delete(resourcePath, request, httpHeaders);
        return response;
    }
    # Retrieves an order count
    #
    # + apiVersion - The API version
    # + created_at_min - Count orders created after date (format: 2014-04-25T16:15:47-04:00). 
    # + created_at_max - Count orders created before date (format: 2014-04-25T16:15:47-04:00). 
    # + updated_at_min - Count orders last updated after date (format: 2014-04-25T16:15:47-04:00). 
    # + updated_at_max - Count orders last updated before date (format: 2014-04-25T16:15:47-04:00). 
    # + status - Count orders of a given status.(default: open) 
    # + financial_status - Count orders of a given financial status.(default: any) 
    # + fulfillment_status - Filter orders by their fulfillment status.(default: any) 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Count orders that have authorized payments ready to be captured / Count all orders / Count orders that have authorized payments ready to be captured / Count all orders 
    remote isolated function retrievesAnOrderCount(string apiVersion, string? created_at_min = (), string? created_at_max = (), string? updated_at_min = (), string? updated_at_max = (), string? status = (), string? financial_status = (), string? fulfillment_status = (), string? xShopifyAccessToken = ()) returns ObjectCount|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/orders/count.json`;
        map<anydata> queryParam = {"created_at_min": created_at_min, "created_at_max": created_at_max, "updated_at_min": updated_at_min, "updated_at_max": updated_at_max, "status": status, "financial_status": financial_status, "fulfillment_status": fulfillment_status};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        ObjectCount response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Retrieves a list of all order risks for an order
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve all order risks for an order / Retrieve all order risks for an order 
    remote isolated function retrievesAListOfAllOrderRisksForAnOrder(string apiVersion, string orderId, string? xShopifyAccessToken = ()) returns OrderRisks|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/orders/${getEncodedUri(orderId)}/risks.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        OrderRisks response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Creates an order risk for an order
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Create an order risk showing a fraud risk for proxy detection / Create an order risk showing a fraud risk for proxy detection 
    remote isolated function createsAnOrderRiskForAnOrder(string apiVersion, string orderId, CreateOrderRisk payload, string? xShopifyAccessToken = ()) returns CreateOrderRisk|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/orders/${getEncodedUri(orderId)}/risks.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        CreateOrderRisk response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Retrieves a single order risk by its ID
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve a single order risk / Retrieve a single order risk 
    remote isolated function retrievesASingleOrderRiskByItsId(string apiVersion, string orderId, string riskId, string? xShopifyAccessToken = ()) returns SingleOrderRisk|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/orders/${getEncodedUri(orderId)}/risks/${getEncodedUri(riskId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        SingleOrderRisk response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Updates an order risk
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Update an existing order risk for an order / Update an existing order risk for an order 
    remote isolated function updatesAnOrderRisk(string apiVersion, string orderId, string riskId, UpdateOrderRisk payload, string? xShopifyAccessToken = ()) returns OrderRiskObject|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/orders/${getEncodedUri(orderId)}/risks/${getEncodedUri(riskId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        OrderRiskObject response = check self.clientEp->put(resourcePath, request, httpHeaders);
        return response;
    }
    # Deletes an order risk for an order
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Delete an order risk for an order / Delete an order risk for an order 
    remote isolated function deletesAnOrderRiskForAnOrder(string apiVersion, string orderId, string riskId, string payload, string? xShopifyAccessToken = ()) returns json|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/orders/${getEncodedUri(orderId)}/risks/${getEncodedUri(riskId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        json response = check self.clientEp->delete(resourcePath, request, httpHeaders);
        return response;
    }
    # Retrieves a list of refunds for an order
    #
    # + apiVersion - The API version
    # + 'limit - The maximum number of results to retrieve.(default: 50)(maximum: 250) 
    # + fields - Show only certain fields, specified by a comma-separated list of field names. 
    # + in_shop_currency - Show amounts in the shop currency for the underlying transaction.(default: false) 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve all refunds from a specific order / Retrieve all refunds from a specific order 
    remote isolated function retrievesAListOfRefundsForAnOrder(string apiVersion, string orderId, string? 'limit = (), string? fields = (), string? in_shop_currency = (), string? xShopifyAccessToken = ()) returns Refunds|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/orders/${getEncodedUri(orderId)}/refunds.json`;
        map<anydata> queryParam = {"limit": 'limit, "fields": fields, "in_shop_currency": in_shop_currency};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Refunds response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Creates a refund
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Create a refund for an order / Refund a specific amount of shipping / Create a refund for an order / Refund a specific amount of shipping 
    remote isolated function createsARefund(string apiVersion, string orderId, CreateRefund payload, string? xShopifyAccessToken = ()) returns RefundObject|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/orders/${getEncodedUri(orderId)}/refunds.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        RefundObject response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Calculates a refund
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Calculate the refund for a line item and shipping / Calculate a refund for a partial amount of shipping / Calculate the refund without specifying currency / Calculate the refund for a line item and shipping / Calculate a refund for a partial amount of shipping / Calculate the refund without specifying currency 
    remote isolated function calculatesARefund(string apiVersion, string orderId, RefundsCalculateJsonBody payload, string? xShopifyAccessToken = ()) returns CalculateRefund|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/orders/${getEncodedUri(orderId)}/refunds/calculate.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        CalculateRefund response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Retrieves a specific refund
    #
    # + apiVersion - The API version
    # + fields - Show only certain fields, specified by a comma-separated list of field names. 
    # + in_shop_currency - Show amounts in the shop currency for the underlying transaction.(default: false) 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve a specific refund / Retrieve a specific refund 
    remote isolated function retrievesASpecificRefund(string apiVersion, string orderId, string refundId, string? fields = (), string? in_shop_currency = (), string? xShopifyAccessToken = ()) returns RefundResponse|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/orders/${getEncodedUri(orderId)}/refunds/${getEncodedUri(refundId)}.json`;
        map<anydata> queryParam = {"fields": fields, "in_shop_currency": in_shop_currency};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        RefundResponse response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Retrieves a list of transactions
    #
    # + apiVersion - The API version
    # + since_id - Retrieve only transactions after the specified ID. 
    # + fields - Show only certain fields, specifed by a comma-separated list of fields names. 
    # + in_shop_currency - Show amounts in the shop currency.(default: false) 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve an order's transactions / Retrieve an order's transactions after a specified ID / Retrieve an order's transactions / Retrieve an order's transactions after a specified ID 
    remote isolated function retrievesAListOfTransactions(string apiVersion, string orderId, string? since_id = (), string? fields = (), string? in_shop_currency = (), string? xShopifyAccessToken = ()) returns TransactionsList|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/orders/${getEncodedUri(orderId)}/transactions.json`;
        map<anydata> queryParam = {"since_id": since_id, "fields": fields, "in_shop_currency": in_shop_currency};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        TransactionsList response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Creates a transaction for an order
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Capture the full amount for an authorized order, and associate the capture with an authorization by including its authorization code / Create a test transaction. / Capture a specified amount on an authorized order, and associate the capture with an authorization by including its ID / Capture the full amount for an authorized order, and associate the capture with an authorization by including its authorization code / Create a test transaction. / Capture a specified amount on an authorized order, and associate the capture with an authorization by including its ID 
    remote isolated function createsATransactionForAnOrder(string apiVersion, string orderId, CreateTransaction payload, string? xShopifyAccessToken = ()) returns TransactionObject|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/orders/${getEncodedUri(orderId)}/transactions.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        TransactionObject response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Retrieves a specific transaction
    #
    # + apiVersion - The API version
    # + fields - Show only certain fields, specified by a comma-separated list of field names. 
    # + in_shop_currency - Show amounts in the shop currency.(default: false) 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve a specific transaction for an order / Retrieve a specific transaction for an order 
    remote isolated function retrievesASpecificTransaction(string apiVersion, string orderId, string transactionId, string? fields = (), string? in_shop_currency = (), string? xShopifyAccessToken = ()) returns TransactionResponse|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/orders/${getEncodedUri(orderId)}/transactions/${getEncodedUri(transactionId)}.json`;
        map<anydata> queryParam = {"fields": fields, "in_shop_currency": in_shop_currency};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        TransactionResponse response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Retrieves a count of an order's transactions
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Count an order's transactions / Count an order's transactions 
    remote isolated function retrievesACountOfAnOrderSTransactions(string apiVersion, string orderId, string? xShopifyAccessToken = ()) returns EventsCount|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/orders/${getEncodedUri(orderId)}/transactions/count.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        EventsCount response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Retrieves a list of all users
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve a list of all users / Retrieve a list of all users 
    remote isolated function retrievesAListOfAllUsers(string apiVersion, string? xShopifyAccessToken = ()) returns UsersList|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/users.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        UsersList response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Retrieves a single user
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve a single user / Retrieve a single user 
    remote isolated function retrievesASingleUser(string apiVersion, string userId, string? xShopifyAccessToken = ()) returns SingleUser|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/users/${getEncodedUri(userId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        SingleUser response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Retrieves the currently logged-in user
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve the the currently logged-in user / Retrieve the the currently logged-in user 
    remote isolated function retrievesTheCurrentlyLoggedInUser(string apiVersion, string? xShopifyAccessToken = ()) returns SingleUser|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/users/current.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        SingleUser response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Retrieves a list of collects
    #
    # + apiVersion - The API version
    # + 'limit - The maximum number of results to show.(default: 50)(maximum: 250) 
    # + since_id - Restrict results to after the specified ID. 
    # + fields - Show only certain fields, specified by a comma-separated list of field names. 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve only collects for a certain product / Retrieve all collects for the shop / Retrieve only collects for a certain collection / Retrieve only collects for a certain product / Retrieve all collects for the shop / Retrieve only collects for a certain collection 
    remote isolated function retrievesAListOfCollects(string apiVersion, string? 'limit = (), string? since_id = (), string? fields = (), string? xShopifyAccessToken = ()) returns CollectsList|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/collects.json`;
        map<anydata> queryParam = {"limit": 'limit, "since_id": since_id, "fields": fields};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        CollectsList response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Adds a product to a custom collection
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Create a new link between an existing product and an existing collection / Create a new link between an existing product and an existing collection 
    remote isolated function addsAProductToACustomCollection(string apiVersion, ApiVersionCollectsJsonBody payload, string? xShopifyAccessToken = ()) returns ProductToCollectionResponse|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/collects.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        ProductToCollectionResponse response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Retrieves a specific collect by its ID
    #
    # + apiVersion - The API version
    # + fields - Show only certain fields, specified by a comma-separated list of field names. 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve a collect with a certain ID / Retrieve a collect with a certain ID 
    remote isolated function retrievesASpecificCollectByItsId(string apiVersion, string collectId, string? fields = (), string? xShopifyAccessToken = ()) returns CollectResponse|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/collects/${getEncodedUri(collectId)}.json`;
        map<anydata> queryParam = {"fields": fields};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        CollectResponse response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Removes a product from a collection
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Delete the link between a product an a collection / Delete the link between a product an a collection 
    remote isolated function removesAProductFromACollection(string apiVersion, string collectId, string payload, string? xShopifyAccessToken = ()) returns json|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/collects/${getEncodedUri(collectId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        json response = check self.clientEp->delete(resourcePath, request, httpHeaders);
        return response;
    }
    # Retrieves a count of collects
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Count only collects for a certain collection / Count only collects for a certain product / Count all collects for the shop / Count only collects for a certain collection / Count only collects for a certain product / Count all collects for the shop 
    remote isolated function retrievesACountOfCollects(string apiVersion, string? xShopifyAccessToken = ()) returns ObjectCount|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/collects/count.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        ObjectCount response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Retrieves a single collection
    #
    # + apiVersion - The API version
    # + fields - Show only certain fields, specified by a comma-separated list of field names. 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve a specific collection by its ID / Retrieve a specific collection by its ID 
    remote isolated function retrievesASingleCollection(string apiVersion, string collectionId, string? fields = (), string? xShopifyAccessToken = ()) returns SingleCollection|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/collections/${getEncodedUri(collectionId)}.json`;
        map<anydata> queryParam = {"fields": fields};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        SingleCollection response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Retrieve a list of products belonging to a collection
    #
    # + apiVersion - The API version
    # + 'limit - The number of products to retrieve.(default: 50)(maximum: 250) 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve a list of products belonging to a collection / Retrieve a list of products belonging to a collection 
    remote isolated function retrieveAListOfProductsBelongingToACollection(string apiVersion, string collectionId, string? 'limit = (), string? xShopifyAccessToken = ()) returns ProductsList|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/collections/${getEncodedUri(collectionId)}/products.json`;
        map<anydata> queryParam = {"limit": 'limit};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        ProductsList response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Retrieves a list of custom collections
    #
    # + apiVersion - The API version
    # + 'limit - The maximum number of results to retrieve.(default: 50)(maximum: 250) 
    # + ids - Show only collections specified by a comma-separated list of IDs. 
    # + since_id - Restrict results to after the specified ID. 
    # + title - Show custom collections with a given title. 
    # + product_id - Show custom collections that include a given product. 
    # + 'handle - Filter by custom collection handle. 
    # + updated_at_min - Show custom collections last updated after date (format: 2014-04-25T16:15:47-04:00). 
    # + updated_at_max - Show custom collections last updated before date (format: 2014-04-25T16:15:47-04:00). 
    # + published_at_min - Show custom collections published after date (format: 2014-04-25T16:15:47-04:00). 
    # + published_at_max - Show custom collections published before date (format: 2014-04-25T16:15:47-04:00). 
    # + published_status - Show custom collectsion with a given published status.(default: any) 
    # + fields - Show only certain fields, specified by a comma-separated list of field names. 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve all collections / Retrieve all collections after the specified ID / Retrieve a list of specific custom collections / Retrieve all custom collections that contain a given product / Retrieve all collections / Retrieve all collections after the specified ID / Retrieve a list of specific custom collections / Retrieve all custom collections that contain a given product 
    remote isolated function retrievesAListOfCustomCollections(string apiVersion, string? 'limit = (), string? ids = (), string? since_id = (), string? title = (), string? product_id = (), string? 'handle = (), string? updated_at_min = (), string? updated_at_max = (), string? published_at_min = (), string? published_at_max = (), string? published_status = (), string? fields = (), string? xShopifyAccessToken = ()) returns CollectionList|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/custom_collections.json`;
        map<anydata> queryParam = {"limit": 'limit, "ids": ids, "since_id": since_id, "title": title, "product_id": product_id, "handle": 'handle, "updated_at_min": updated_at_min, "updated_at_max": updated_at_max, "published_at_min": published_at_min, "published_at_max": published_at_max, "published_status": published_status, "fields": fields};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        CollectionList response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Creates a custom collection
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Create an unpublished custom collection / Create a custom collection / Create a collection that contains a product by including a collect / Create a custom collection with a base64-encoded image / Create a custom collection with a metafield / Create a custom collection with an image, which will be uploaded to Shopify / Create an unpublished custom collection / Create a custom collection / Create a collection that contains a product by including a collect / Create a custom collection with a base64-encoded image / Create a custom collection with a metafield / Create a custom collection with an image, which will be uploaded to Shopify 
    remote isolated function createsACustomCollection(string apiVersion, ApiVersionCustomCollectionsJsonBody payload, string? xShopifyAccessToken = ()) returns CreateCollection|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/custom_collections.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        CreateCollection response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Retrieves a single custom collection
    #
    # + apiVersion - The API version
    # + fields - Show only certain fields, specified by a comma-separated list of field names. 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve a specific collection by its ID / Retrieve a specific collection by its ID 
    remote isolated function retrievesASingleCustomCollection(string apiVersion, string customCollectionId, string? fields = (), string? xShopifyAccessToken = ()) returns SingleCustomCollection|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/custom_collections/${getEncodedUri(customCollectionId)}.json`;
        map<anydata> queryParam = {"fields": fields};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        SingleCustomCollection response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Updates an existing custom collection
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Update the description of a custom collection / Update a collection to remove its image / Update a collection with a new collection image / Update a collection with new alt text for its image / Publish a hidden collection / Add a collect to an existing collection by providing a product ID, and update an existing collect by its own ID to change its sort position / Add a metafield to an existing collection / Hide a published collection / Update the description of a custom collection / Update a collection to remove its image / Update a collection with a new collection image / Update a collection with new alt text for its image / Publish a hidden collection / Add a collect to an existing collection by providing a product ID, and update an existing collect by its own ID to change its sort position / Add a metafield to an existing collection / Hide a published collection 
    remote isolated function updatesAnExistingCustomCollection(string apiVersion, string customCollectionId, CustomCollectionscustomCollectionIdJsonBody payload, string? xShopifyAccessToken = ()) returns UpdateCustomCollection|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/custom_collections/${getEncodedUri(customCollectionId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        UpdateCustomCollection response = check self.clientEp->put(resourcePath, request, httpHeaders);
        return response;
    }
    # Deletes a custom collection
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Delete a custom collection / Delete a custom collection 
    remote isolated function deletesACustomCollection(string apiVersion, string customCollectionId, string payload, string? xShopifyAccessToken = ()) returns json|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/custom_collections/${getEncodedUri(customCollectionId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        json response = check self.clientEp->delete(resourcePath, request, httpHeaders);
        return response;
    }
    # Retrieves a count of custom collections
    #
    # + apiVersion - The API version
    # + title - Count custom collections with given title. 
    # + product_id - Count custom collections that include a given product. 
    # + updated_at_min - Count custom collections last updated after date (format: 2014-04-25T16:15:47-04:00). 
    # + updated_at_max - Count custom collections last updated before date (format: 2014-04-25T16:15:47-04:00). 
    # + published_at_min - Count custom collections published after date (format: 2014-04-25T16:15:47-04:00). 
    # + published_at_max - Count custom collections published before date (format: 2014-04-25T16:15:47-04:00). 
    # + published_status - Count custom collections with a given published status.(default: any) 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Count all custom collections that contain a given product / Count all custom collections / Count all custom collections that contain a given product / Count all custom collections 
    remote isolated function retrievesACountOfCustomCollections(string apiVersion, string? title = (), string? product_id = (), string? updated_at_min = (), string? updated_at_max = (), string? published_at_min = (), string? published_at_max = (), string? published_status = (), string? xShopifyAccessToken = ()) returns BlogsCount|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/custom_collections/count.json`;
        map<anydata> queryParam = {"title": title, "product_id": product_id, "updated_at_min": updated_at_min, "updated_at_max": updated_at_max, "published_at_min": published_at_min, "published_at_max": published_at_max, "published_status": published_status};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        BlogsCount response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Retrieves a list of products
    #
    # + apiVersion - The API version
    # + ids - Return only products specified by a comma-separated list of product IDs. 
    # + 'limit - Return up to this many results per page.(default: 50)(maximum: 250) 
    # + since_id - Restrict results to after the specified ID. 
    # + title - Filter results by product title. 
    # + vendor - Filter results by product vendor. 
    # + 'handle - Filter results by product handle. 
    # + product_type - Filter results by product type. 
    # + collection_id - Filter results by product collection ID. 
    # + created_at_min - Show products created after date. (format: 2014-04-25T16:15:47-04:00) 
    # + created_at_max - Show products created before date. (format: 2014-04-25T16:15:47-04:00) 
    # + updated_at_min - Show products last updated after date. (format: 2014-04-25T16:15:47-04:00) 
    # + updated_at_max - Show products last updated before date. (format: 2014-04-25T16:15:47-04:00) 
    # + published_at_min - Show products published after date. (format: 2014-04-25T16:15:47-04:00) 
    # + published_at_max - Show products published before date. (format: 2014-04-25T16:15:47-04:00) 
    # + published_status - Return products by their published status(default: any) 
    # + fields - Show only certain fields, specified by a comma-separated list of field names. 
    # + presentment_currencies - Return presentment prices in only certain currencies, specified by a comma-separated list of [ISO 4217][1] currency codes. 
    # [1]: https://en.wikipedia.org/wiki/ISO_4217
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve all products, showing only some attributes / Retrieve all products with prices in selected presentment currencies / Retrieve all products that belong to a certain collection / Retrieve all products / Retrieve all products after the specified ID / Retrieve a list of specific products. / Retrieve all products, showing only some attributes / Retrieve all products with prices in selected presentment currencies / Retrieve all products that belong to a certain collection / Retrieve all products / Retrieve all products after the specified ID / Retrieve a list of specific products. 
    remote isolated function retrievesAListOfProducts(string apiVersion, string? ids = (), string? 'limit = (), string? since_id = (), string? title = (), string? vendor = (), string? 'handle = (), string? product_type = (), string? collection_id = (), string? created_at_min = (), string? created_at_max = (), string? updated_at_min = (), string? updated_at_max = (), string? published_at_min = (), string? published_at_max = (), string? published_status = (), string? fields = (), string? presentment_currencies = (), string? xShopifyAccessToken = ()) returns ProductsResponse|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/products.json`;
        map<anydata> queryParam = {"ids": ids, "limit": 'limit, "since_id": since_id, "title": title, "vendor": vendor, "handle": 'handle, "product_type": product_type, "collection_id": collection_id, "created_at_min": created_at_min, "created_at_max": created_at_max, "updated_at_min": updated_at_min, "updated_at_max": updated_at_max, "published_at_min": published_at_min, "published_at_max": published_at_max, "published_status": published_status, "fields": fields, "presentment_currencies": presentment_currencies};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        ProductsResponse response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Creates a new product
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Create a new product with multiple product variants and multiple options / Create a new product with multiple product variants / Create a new product with the default variant and base64 encoded image / Create a product with a metafield / Create a new product with the default product variant / Create a new product with the default variant and a product image that will be downloaded by Shopify / Create a new unpublished product / Create a new product with multiple product variants and multiple options / Create a new product with multiple product variants / Create a new product with the default variant and base64 encoded image / Create a product with a metafield / Create a new product with the default product variant / Create a new product with the default variant and a product image that will be downloaded by Shopify / Create a new unpublished product 
    remote isolated function createsANewProduct(string apiVersion, CreateProduct payload, string? xShopifyAccessToken = ()) returns CreateProductResponse|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/products.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        CreateProductResponse response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Retrieves a single product
    #
    # + apiVersion - The API version
    # + fields - A comma-separated list of fields to include in the response. 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve only particular fields / Retrieve a single product by ID / Retrieve only particular fields / Retrieve a single product by ID 
    remote isolated function retrievesASingleProduct(string apiVersion, string productId, string? fields = (), string? xShopifyAccessToken = ()) returns SingleProduct|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/products/${getEncodedUri(productId)}.json`;
        map<anydata> queryParam = {"fields": fields};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        SingleProduct response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Updates a product
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Add a metafield to an existing product / Update a product by adding a new product image / Update a product by reordering product image / Update a product's title / Update a product by clearing product images / Hide a published product by changing the published attribute to false / Update a product's SEO title and description / Update a product and one of its variants / Update a product by reordering the product variants / Show a hidden product by changing the published attribute to true / Update a product's tags / Add a metafield to an existing product / Update a product by adding a new product image / Update a product by reordering product image / Update a product's title / Update a product by clearing product images / Hide a published product by changing the published attribute to false / Update a product's SEO title and description / Update a product and one of its variants / Update a product by reordering the product variants / Show a hidden product by changing the published attribute to true / Update a product's tags 
    remote isolated function updatesAProduct(string apiVersion, string productId, UpdateProduct payload, string? xShopifyAccessToken = ()) returns ProductObject|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/products/${getEncodedUri(productId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        ProductObject response = check self.clientEp->put(resourcePath, request, httpHeaders);
        return response;
    }
    # Deletes a product
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Delete a product along with all its variants and images / Delete a product along with all its variants and images 
    remote isolated function deletesAProduct(string apiVersion, string productId, string payload, string? xShopifyAccessToken = ()) returns json|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/products/${getEncodedUri(productId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        json response = check self.clientEp->delete(resourcePath, request, httpHeaders);
        return response;
    }
    # Retrieves a count of products
    #
    # + apiVersion - The API version
    # + vendor - Filter results by product vendor. 
    # + product_type - Filter results by product type. 
    # + collection_id - Filter results by collection ID. 
    # + created_at_min - Show products created after date. (format: 2014-04-25T16:15:47-04:00) 
    # + created_at_max - Show products created before date. (format: 2014-04-25T16:15:47-04:00) 
    # + updated_at_min - Show products last updated after date. (format: 2014-04-25T16:15:47-04:00) 
    # + updated_at_max - Show products last updated before date. (format: 2014-04-25T16:15:47-04:00) 
    # + published_at_min - Show products published after date. (format: 2014-04-25T16:15:47-04:00) 
    # + published_at_max - Show products published before date. (format: 2014-04-25T16:15:47-04:00) 
    # + published_status - Return products by their published status(default: any) 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve a count of all products of a given collection / Retrieve a count of all products / Retrieve a count of all products of a given collection / Retrieve a count of all products 
    remote isolated function retrievesACountOfProducts(string apiVersion, string? vendor = (), string? product_type = (), string? collection_id = (), string? created_at_min = (), string? created_at_max = (), string? updated_at_min = (), string? updated_at_max = (), string? published_at_min = (), string? published_at_max = (), string? published_status = (), string? xShopifyAccessToken = ()) returns ObjectCount|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/products/count.json`;
        map<anydata> queryParam = {"vendor": vendor, "product_type": product_type, "collection_id": collection_id, "created_at_min": created_at_min, "created_at_max": created_at_max, "updated_at_min": updated_at_min, "updated_at_max": updated_at_max, "published_at_min": published_at_min, "published_at_max": published_at_max, "published_status": published_status};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        ObjectCount response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Receive a list of all Product Images
    #
    # + apiVersion - The API version
    # + since_id - Restrict results to after the specified ID 
    # + fields - comma-separated list of fields to include in the response 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Get all product images for a product / Get all product images for a product after a specified ID / Get all product images for a product / Get all product images for a product after a specified ID 
    remote isolated function receiveAListOfAllProductImages(string apiVersion, string productId, string? since_id = (), string? fields = (), string? xShopifyAccessToken = ()) returns ProductImages|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/products/${getEncodedUri(productId)}/images.json`;
        map<anydata> queryParam = {"since_id": since_id, "fields": fields};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        ProductImages response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Create a new Product Image
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Create a new product image with included image data as attachment / Create a new product image and make it the main image / Create a new product image using a source URL that will be downloaded by Shopify / Create a new product image and attach it to product variants / <span id="metafield">Create a new product image with a metafield</span> / Create a new product image with included image data as attachment / Create a new product image and make it the main image / Create a new product image using a source URL that will be downloaded by Shopify / Create a new product image and attach it to product variants / <span id="metafield">Create a new product image with a metafield</span> 
    remote isolated function createANewProductImage(string apiVersion, string productId, ProductIdImagesJsonBody payload, string? xShopifyAccessToken = ()) returns CreateProductImage|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/products/${getEncodedUri(productId)}/images.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        CreateProductImage response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Receive a single Product Image
    #
    # + apiVersion - The API version
    # + fields - comma-separated list of fields to include in the response 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Show product image / Show product image 
    remote isolated function receiveASingleProductImage(string apiVersion, string productId, string imageId, string? fields = (), string? xShopifyAccessToken = ()) returns SingleProductImage|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/products/${getEncodedUri(productId)}/images/${getEncodedUri(imageId)}.json`;
        map<anydata> queryParam = {"fields": fields};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        SingleProductImage response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Modify an existing Product Image
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Modify an image; add a metafield / Modify an image; change its position and alt tag content / Modify an image; add it to product variants / Modify an image; add a metafield / Modify an image; change its position and alt tag content / Modify an image; add it to product variants 
    remote isolated function modifyAnExistingProductImage(string apiVersion, string productId, string imageId, ImagesimageIdJsonBody payload, string? xShopifyAccessToken = ()) returns ModifyProductImage|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/products/${getEncodedUri(productId)}/images/${getEncodedUri(imageId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        ModifyProductImage response = check self.clientEp->put(resourcePath, request, httpHeaders);
        return response;
    }
    # Remove an existing Product Image
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Delete a product image / Delete a product image 
    remote isolated function removeAnExistingProductImage(string apiVersion, string productId, string imageId, string payload, string? xShopifyAccessToken = ()) returns json|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/products/${getEncodedUri(productId)}/images/${getEncodedUri(imageId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        json response = check self.clientEp->delete(resourcePath, request, httpHeaders);
        return response;
    }
    # Receive a count of all Product Images
    #
    # + apiVersion - The API version
    # + since_id - Restrict results to after the specified ID 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Get a count all product images / Get a count of all product images after a specified ID / Get a count all product images / Get a count of all product images after a specified ID 
    remote isolated function receiveACountOfAllProductImages(string apiVersion, string productId, string? since_id = (), string? xShopifyAccessToken = ()) returns BlogsCount|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/products/${getEncodedUri(productId)}/images/count.json`;
        map<anydata> queryParam = {"since_id": since_id};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        BlogsCount response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Retrieves a list of product variants
    #
    # + apiVersion - The API version
    # + 'limit - Return up to this many results per page(default: 50)(maximum: 250) 
    # + presentment_currencies - Return presentment prices in only certain currencies, specified by a comma-separated list of [ISO 4217][1] currency codes. 
    # [1]: https://en.wikipedia.org/wiki/ISO_4217
    # + since_id - Restrict results to after the specified ID 
    # + fields - A comma-separated list of fields to include in the response 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve all variants for a product / Retrieve all variants for a product with prices in specified presentment currencies / Retrieve all variants for a product after a specified ID / Retrieve all variants for a product / Retrieve all variants for a product with prices in specified presentment currencies / Retrieve all variants for a product after a specified ID 
    remote isolated function retrievesAListOfProductVariants(string apiVersion, string productId, string? 'limit = (), string? presentment_currencies = (), string? since_id = (), string? fields = (), string? xShopifyAccessToken = ()) returns ProductVariants|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/products/${getEncodedUri(productId)}/variants.json`;
        map<anydata> queryParam = {"limit": 'limit, "presentment_currencies": presentment_currencies, "since_id": since_id, "fields": fields};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        ProductVariants response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Create a new Product Variant
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Create a new product variant with an image / Create a new product variant with a metafield / Create a new product variant / Create a new product variant with an image / Create a new product variant with a metafield / Create a new product variant 
    remote isolated function createANewProductVariant(string apiVersion, string productId, CreateProductVariant payload, string? xShopifyAccessToken = ()) returns CreateProductVariant|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/products/${getEncodedUri(productId)}/variants.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        CreateProductVariant response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Receive a count of all Product Variants
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve a count all variants for a product / Retrieve a count all variants for a product 
    remote isolated function receiveACountOfAllProductVariants(string apiVersion, string productId, string? xShopifyAccessToken = ()) returns ArticlesCount|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/products/${getEncodedUri(productId)}/variants/count.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        ArticlesCount response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Receive a single Product Variant
    #
    # + apiVersion - The API version
    # + fields - A comma-separated list of fields to include in the response 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve a product variant by ID / Retrieve a product variant by ID 
    remote isolated function receiveASingleProductVariant(string apiVersion, string variantId, string? fields = (), string? xShopifyAccessToken = ()) returns ProductVariantResponse|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/variants/${getEncodedUri(variantId)}.json`;
        map<anydata> queryParam = {"fields": fields};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        ProductVariantResponse response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Modify an existing Product Variant
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Add a metafield to an existing variant / Add an existing image to an existing variant / Update the title and price of an existing variant / Add a metafield to an existing variant / Add an existing image to an existing variant / Update the title and price of an existing variant 
    remote isolated function modifyAnExistingProductVariant(string apiVersion, string variantId, UpdateProductVariant payload, string? xShopifyAccessToken = ()) returns ModifyProductVariant|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/variants/${getEncodedUri(variantId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        ModifyProductVariant response = check self.clientEp->put(resourcePath, request, httpHeaders);
        return response;
    }
    # Remove an existing Product Variant
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Delete a product variant / Delete a product variant 
    remote isolated function removeAnExistingProductVariant(string apiVersion, string productId, string variantId, string payload, string? xShopifyAccessToken = ()) returns json|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/products/${getEncodedUri(productId)}/variants/${getEncodedUri(variantId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        json response = check self.clientEp->delete(resourcePath, request, httpHeaders);
        return response;
    }
    # Retrieves a list of smart collections
    #
    # + apiVersion - The API version
    # + 'limit - The number of results to show.(default: 50)(maximum: 250) 
    # + ids - Show only the smart collections specified by a comma-separated list of IDs. 
    # + since_id - Restrict results to after the specified ID. 
    # + title - Show smart collections with the specified title. 
    # + product_id - Show smart collections that includes the specified product. 
    # + 'handle - Filter results by smart collection handle. 
    # + updated_at_min - Show smart collections last updated after this date. (format: 2014-04-25T16:15:47-04:00) 
    # + updated_at_max - Show smart collections last updated before this date. (format: 2014-04-25T16:15:47-04:00) 
    # + published_at_min - Show smart collections published after this date. (format: 2014-04-25T16:15:47-04:00) 
    # + published_at_max - Show smart collections published before this date. (format: 2014-04-25T16:15:47-04:00) 
    # + published_status - Filter results based on the published status of smart collections.(default: any) 
    # + fields - Show only certain fields, specified by a comma-separated list of field names. 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve a list of all smart collections for a certain product_id / Retrieve a list of specific smart collections / Retrieve a list of all smart collections / Retrieve a list all smart collections after a specified ID / Retrieve a list of all smart collections for a certain product_id / Retrieve a list of specific smart collections / Retrieve a list of all smart collections / Retrieve a list all smart collections after a specified ID 
    remote isolated function retrievesAListOfSmartCollections(string apiVersion, string? 'limit = (), string? ids = (), string? since_id = (), string? title = (), string? product_id = (), string? 'handle = (), string? updated_at_min = (), string? updated_at_max = (), string? published_at_min = (), string? published_at_max = (), string? published_status = (), string? fields = (), string? xShopifyAccessToken = ()) returns SmartCollectionList|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/smart_collections.json`;
        map<anydata> queryParam = {"limit": 'limit, "ids": ids, "since_id": since_id, "title": title, "product_id": product_id, "handle": 'handle, "updated_at_min": updated_at_min, "updated_at_max": updated_at_max, "published_at_min": published_at_min, "published_at_max": published_at_max, "published_status": published_status, "fields": fields};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        SmartCollectionList response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Creates a smart collection
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Create a new smart collection with a base64 encoded image / Create a smart collection of all products starting with the specified term / Create a smart collection with a specified title / Create a new smart collection with an image that will be downloaded by Shopify / Create a new unpublished smart collection / Create a new smart collection with a base64 encoded image / Create a smart collection of all products starting with the specified term / Create a smart collection with a specified title / Create a new smart collection with an image that will be downloaded by Shopify / Create a new unpublished smart collection 
    remote isolated function createsASmartCollection(string apiVersion, ApiVersionSmartCollectionsJsonBody payload, string? xShopifyAccessToken = ()) returns CreatSmartCollection|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/smart_collections.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        CreatSmartCollection response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Retrieves a single smart collection
    #
    # + apiVersion - The API version
    # + fields - Show only certain fields, specified by a comma-separated list of field names. 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve a specific collection by ID / Retrieve a specific collection by ID 
    remote isolated function retrievesASingleSmartCollection(string apiVersion, string smartCollectionId, string? fields = (), string? xShopifyAccessToken = ()) returns SmartCollectionResponse|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/smart_collections/${getEncodedUri(smartCollectionId)}.json`;
        map<anydata> queryParam = {"fields": fields};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        SmartCollectionResponse response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Updates an existing smart collection
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Update the description of a smart collection / Hide a published smart collection / Update a smart collection by setting a new collection image alternative text / Update a smart collection by clearing the collection image / Publish a hidden collection / Update a smart collection by setting a new collection image / Update the description of a smart collection / Hide a published smart collection / Update a smart collection by setting a new collection image alternative text / Update a smart collection by clearing the collection image / Publish a hidden collection / Update a smart collection by setting a new collection image 
    remote isolated function updatesAnExistingSmartCollection(string apiVersion, string smartCollectionId, SmartCollectionssmartCollectionIdJsonBody payload, string? xShopifyAccessToken = ()) returns UpdateSmartCollection|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/smart_collections/${getEncodedUri(smartCollectionId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        UpdateSmartCollection response = check self.clientEp->put(resourcePath, request, httpHeaders);
        return response;
    }
    # Removes a smart collection
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Remove a smart collection / Remove a smart collection 
    remote isolated function removesASmartCollection(string apiVersion, string smartCollectionId, string payload, string? xShopifyAccessToken = ()) returns json|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/smart_collections/${getEncodedUri(smartCollectionId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        json response = check self.clientEp->delete(resourcePath, request, httpHeaders);
        return response;
    }
    # Retrieves a count of smart collections
    #
    # + apiVersion - The API version
    # + title - Show smart collections with the specified title. 
    # + product_id - Show smart collections that include the specified product. 
    # + updated_at_min - Show smart collections last updated after this date. (format: 2014-04-25T16:15:47-04:00) 
    # + updated_at_max - Show smart collections last updated before this date. (format: 2014-04-25T16:15:47-04:00) 
    # + published_at_min - Show smart collections published after this date. (format: 2014-04-25T16:15:47-04:00) 
    # + published_at_max - Show smart collections published before this date. (format: 2014-04-25T16:15:47-04:00) 
    # + published_status - Filter results based on the published status of smart collections.(default: any) 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve a count of all smart collections for a certain product_id / Retrieve a count of all smart collections / Retrieve a count of all smart collections for a certain product_id / Retrieve a count of all smart collections 
    remote isolated function retrievesACountOfSmartCollections(string apiVersion, string? title = (), string? product_id = (), string? updated_at_min = (), string? updated_at_max = (), string? published_at_min = (), string? published_at_max = (), string? published_status = (), string? xShopifyAccessToken = ()) returns ObjectCount|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/smart_collections/count.json`;
        map<anydata> queryParam = {"title": title, "product_id": product_id, "updated_at_min": updated_at_min, "updated_at_max": updated_at_max, "published_at_min": published_at_min, "published_at_max": published_at_max, "published_status": published_status};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        ObjectCount response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Updates the ordering type of products in a smart collection
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Update the type of ordering applied to the smart collection / Update manually-sorted products in the smart collection / Update the type of ordering applied to the smart collection / Update manually-sorted products in the smart collection 
    remote isolated function updatesTheOrderingTypeOfProductsInASmartCollection(string apiVersion, string smartCollectionId, record{} payload, string? xShopifyAccessToken = ()) returns json|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/smart_collections/${getEncodedUri(smartCollectionId)}/order.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        json response = check self.clientEp->put(resourcePath, request, httpHeaders);
        return response;
    }
    # Completes a checkout
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Complete a checkout without requiring payment / Complete a checkout without requiring payment 
    remote isolated function completesACheckout(string apiVersion, string token, record{} payload, string? xShopifyAccessToken = ()) returns CompleteCheckoutResponse|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/checkouts/${getEncodedUri(token)}/complete.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        CompleteCheckoutResponse response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Retrieves a checkout
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve a completed checkout / Retrieve a completed checkout 
    remote isolated function retrievesACheckout(string apiVersion, string token, string? xShopifyAccessToken = ()) returns CompleteCheckout|CheckoutResponse|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/checkouts/${getEncodedUri(token)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        CompleteCheckout|CheckoutResponse response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Modifies an existing checkout
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Select a shipping rate / Select a shipping rate 
    remote isolated function modifiesAnExistingCheckout(string apiVersion, string token, CheckoutstokenJsonBody payload, string? xShopifyAccessToken = ()) returns UpdateCheckoutResponse|ShippingRateResponse|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/checkouts/${getEncodedUri(token)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        UpdateCheckoutResponse|ShippingRateResponse response = check self.clientEp->put(resourcePath, request, httpHeaders);
        return response;
    }
    # Retrieves a list of shipping rates
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve available shipping rates / Retrieving shipping rates when none are available for the current shipping address or cart returns an empty array / Retrieve available shipping rates / Retrieving shipping rates when none are available for the current shipping address or cart returns an empty array 
    remote isolated function retrievesAListOfShippingRates(string apiVersion, string token, string? xShopifyAccessToken = ()) returns AvailableShippingRates|ShippingRates|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/checkouts/${getEncodedUri(token)}/shipping_rates.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        AvailableShippingRates|ShippingRates response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Retrieve collection listings that are published to your app
    #
    # + apiVersion - The API version
    # + 'limit - Amount of results(default: 50)(maximum: 1000) 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve collection listings that are published to your app / Retrieve collection listings that are published to your app 
    remote isolated function retrieveCollectionListingsThatArePublishedToYourApp(string apiVersion, string? 'limit = (), string? xShopifyAccessToken = ()) returns CollectionListingResponse|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/collection_listings.json`;
        map<anydata> queryParam = {"limit": 'limit};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        CollectionListingResponse response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Retrieve product_ids that are published to a collection_id
    #
    # + apiVersion - The API version
    # + 'limit - Amount of results(default: 50)(maximum: 1000) 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve <code>product_ids</code> that are published to a <code>collection_id</code> / Retrieve <code>product_ids</code> that are published to a <code>collection_id</code> 
    remote isolated function retrieveProductIdsThatArePublishedToACollectionId(string apiVersion, string collectionListingId, string? 'limit = (), string? xShopifyAccessToken = ()) returns ProductIds|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/collection_listings/${getEncodedUri(collectionListingId)}/product_ids.json`;
        map<anydata> queryParam = {"limit": 'limit};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        ProductIds response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Retrieve a specific collection listing that is published to your app
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve a specific collection listing that is published to your app / Retrieve a specific collection listing that is published to your app 
    remote isolated function retrieveASpecificCollectionListingThatIsPublishedToYourApp(string apiVersion, string collectionListingId, string? xShopifyAccessToken = ()) returns CollectionListing|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/collection_listings/${getEncodedUri(collectionListingId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        CollectionListing response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Create a collection listing to publish a collection to your app
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Create a collection listing to publish a collection to your app / Create a collection listing to publish a collection to your app 
    remote isolated function createACollectionListingToPublishACollectionToYourApp(string apiVersion, string collectionListingId, CollectionListingscollectionListingIdJsonBody payload, string? xShopifyAccessToken = ()) returns CollectionListing|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/collection_listings/${getEncodedUri(collectionListingId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        CollectionListing response = check self.clientEp->put(resourcePath, request, httpHeaders);
        return response;
    }
    # Delete a collection listing to unpublish a collection from your app
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Delete a collection listing to unpublish a collection from your app / Delete a collection listing to unpublish a collection from your app 
    remote isolated function deleteACollectionListingToUnpublishACollectionFromYourApp(string apiVersion, string collectionListingId, string payload, string? xShopifyAccessToken = ()) returns string|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/collection_listings/${getEncodedUri(collectionListingId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        string response = check self.clientEp->delete(resourcePath, request, httpHeaders);
        return response;
    }
    # Retrieves a list of payments on a particular checkout
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve all the payments on a checkout 
    remote isolated function retrievesAListOfPaymentsOnAParticularCheckout(string apiVersion, string token, string? xShopifyAccessToken = ()) returns PaymentsResponse|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/checkouts/${getEncodedUri(token)}/payments.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        PaymentsResponse response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Creates a new payment
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Create an authorization using a valid <code>session_id</code> stored in the vault / Create an authorization using a valid <code>session_id</code> stored in the vault 
    remote isolated function createsANewPayment(string apiVersion, string token, TokenPaymentsJsonBody payload, string? xShopifyAccessToken = ()) returns CreateAuthorizationResponse|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/checkouts/${getEncodedUri(token)}/payments.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        CreateAuthorizationResponse response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Retrieves a single payment
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve a payment with a succesful transaction / Retrieve a payment with a failed transaction / Retrieve a payment with a succesful transaction / Retrieve a payment with a failed transaction 
    remote isolated function retrievesASinglePayment(string apiVersion, string token, string paymentId, string? xShopifyAccessToken = ()) returns SinglePaymentResponse|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/checkouts/${getEncodedUri(token)}/payments/${getEncodedUri(paymentId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        SinglePaymentResponse response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Receive a list of all Product ResourceFeedbacks
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Receive a list of all Product ResourceFeedbacks 
    remote isolated function receiveAListOfAllProductResourcefeedbacks(string apiVersion, string productId, string? xShopifyAccessToken = ()) returns ResourceFeedbackList|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/products/${getEncodedUri(productId)}/resource_feedback.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        ResourceFeedbackList response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Create a new Product ResourceFeedback
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Create a new Product ResourceFeedback 
    remote isolated function createANewProductResourcefeedback(string apiVersion, string productId, ProductIdResourceFeedbackJsonBody payload, string? xShopifyAccessToken = ()) returns ResourceFeedbackList|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/products/${getEncodedUri(productId)}/resource_feedback.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        ResourceFeedbackList response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Retrieve product listings that are published to your app
    #
    # + apiVersion - The API version
    # + product_ids - A comma-separated list of product ids 
    # + 'limit - Amount of results(default: 50)(maximum: 1000) 
    # + page - Page to show(default: 1) 
    # + collection_id - Filter by products belonging to a particular collection 
    # + updated_at_min - Filter by products last updated after a certain date and time (formatted in ISO 8601) 
    # + 'handle - Filter by product handle 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve product listings that are published to your app / Retrieve product listings that are published to your app 
    remote isolated function retrieveProductListingsThatArePublishedToYourApp(string apiVersion, string? product_ids = (), string? 'limit = (), string? page = (), string? collection_id = (), string? updated_at_min = (), string? 'handle = (), string? xShopifyAccessToken = ()) returns ProductListings|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/product_listings.json`;
        map<anydata> queryParam = {"product_ids": product_ids, "limit": 'limit, "page": page, "collection_id": collection_id, "updated_at_min": updated_at_min, "handle": 'handle};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        ProductListings response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Retrieve a specific product listing that is published to your app
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve a specific product listing that is published to your app / Retrieve a specific product listing that is published to your app 
    remote isolated function retrieveASpecificProductListingThatIsPublishedToYourApp(string apiVersion, string productListingId, string? xShopifyAccessToken = ()) returns ProductListingAppResponse|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/product_listings/${getEncodedUri(productListingId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        ProductListingAppResponse response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Create a product listing to publish a product to your app
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Create a product listing to publish a product to your app / Create a product listing to publish a product to your app 
    remote isolated function createAProductListingToPublishAProductToYourApp(string apiVersion, string productListingId, ProductListingsproductListingIdJsonBody payload, string? xShopifyAccessToken = ()) returns ProductListingAppResponse|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/product_listings/${getEncodedUri(productListingId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        ProductListingAppResponse response = check self.clientEp->put(resourcePath, request, httpHeaders);
        return response;
    }
    # Delete a product listing to unpublish a product from your app
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Delete a product listing to unpublish a product from your app / Delete a product listing to unpublish a product from your app 
    remote isolated function deleteAProductListingToUnpublishAProductFromYourApp(string apiVersion, string productListingId, string payload, string? xShopifyAccessToken = ()) returns string|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/product_listings/${getEncodedUri(productListingId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        string response = check self.clientEp->delete(resourcePath, request, httpHeaders);
        return response;
    }
    # Retrieve a count of products that are published to your app
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve a count of products that are published to your app / Retrieve a count of products that are published to your app 
    remote isolated function retrieveACountOfProductsThatArePublishedToYourApp(string apiVersion, string? xShopifyAccessToken = ()) returns BlogsCount|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/product_listings/count.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        BlogsCount response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Retrieve product_ids that are published to your app
    #
    # + apiVersion - The API version
    # + 'limit - Amount of results(default: 50)(maximum: 1000) 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve <code>product_ids</code> that are published to your app / Retrieve <code>product_ids</code> that are published to your app 
    remote isolated function retrieveProductIdsThatArePublishedToYourApp(string apiVersion, string? 'limit = (), string? xShopifyAccessToken = ()) returns ProductIdAppResponse|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/product_listings/product_ids.json`;
        map<anydata> queryParam = {"limit": 'limit};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        ProductIdAppResponse response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Receive a list of all ResourceFeedbacks
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Get a list of resource feedback records for a specific shop / Get a list of resource feedback records for a specific shop 
    remote isolated function receiveAListOfAllResourcefeedbacks(string apiVersion, string? xShopifyAccessToken = ()) returns ResourceFeedbackList|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/resource_feedback.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        ResourceFeedbackList response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Create a new ResourceFeedback
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Create a shop feedback record indicating the Shop is usable by your app / Create a shop feedback record indicating a problem specific to your app / Create a shop feedback record indicating the Shop is usable by your app / Create a shop feedback record indicating a problem specific to your app 
    remote isolated function createANewResourcefeedback(string apiVersion, ApiVersionResourceFeedbackJsonBody payload, string? xShopifyAccessToken = ()) returns CreateShopFeedback|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/resource_feedback.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        CreateShopFeedback response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Retrieves a list of fulfillment orders assigned to the shop locations that are owned by the app
    #
    # + apiVersion - The API version
    # + assignment_status - The assignment status of the fulfillment orders that should be returned. If assignment_status parameter isn't provided, then the query will return all assigned fulfillment orders, except those with the CLOSED status.
    # + location_ids - he IDs of the assigned locations of the fulfillment orders that should be returned.
    # If the location_ids parameter isn't provided, then all fulfillment orders assigned to the shop locations that are managed by the app will be returned.
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve a list of fulfillment orders in cancellation_requested state at a location for an app / Retrieve a list of fulfillment orders in cancellation_requested state at a location for an app 
    remote isolated function retrievesAListOfFulfillmentOrdersAssignedToTheShopLocationsThatAreOwnedByTheApp(string apiVersion, string? assignment_status = (), string? location_ids = (), string? xShopifyAccessToken = ()) returns FulfillmentOrders|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/assigned_fulfillment_orders.json`;
        map<anydata> queryParam = {"assignment_status": assignment_status, "location_ids": location_ids};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        FulfillmentOrders response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Sends a cancellation request
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Sends a cancellation request to the fulfillment service of a fulfillment order and updates the fulfillment order / Sends a cancellation request to the fulfillment service of a fulfillment order and updates the fulfillment order 
    remote isolated function sendsACancellationRequest(string apiVersion, string fulfillmentOrderId, FulfillmentOrderIdCancellationRequestJsonBody payload, string? xShopifyAccessToken = ()) returns FulfillmentOrder|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/fulfillment_orders/${getEncodedUri(fulfillmentOrderId)}/cancellation_request.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        FulfillmentOrder response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Accepts a cancellation request
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Accepts a cancellation request sent to a fulfillment service and updates the fulfillment order / Accepts a cancellation request sent to a fulfillment service and updates the fulfillment order 
    remote isolated function acceptsACancellationRequest(string apiVersion, string fulfillmentOrderId, CancellationRequestAcceptJsonBody payload, string? xShopifyAccessToken = ()) returns CancellationResponse|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/fulfillment_orders/${getEncodedUri(fulfillmentOrderId)}/cancellation_request/accept.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        CancellationResponse response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Rejects a cancellation request
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Rejects a cancellation request sent to a fulfillment service and updates the fulfillment order / Rejects a cancellation request sent to a fulfillment service and updates the fulfillment order 
    remote isolated function rejectsACancellationRequest(string apiVersion, string fulfillmentOrderId, CancellationRequestRejectJsonBody payload, string? xShopifyAccessToken = ()) returns RejectCancellationRequestResponse|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/fulfillment_orders/${getEncodedUri(fulfillmentOrderId)}/cancellation_request/reject.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        RejectCancellationRequestResponse response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Retrieves a list of carrier services
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve a list of carrier services / Retrieve a list of carrier services 
    remote isolated function retrievesAListOfCarrierServices(string apiVersion, string? xShopifyAccessToken = ()) returns CarrierServiceList|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/carrier_services.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        CarrierServiceList response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Creates a carrier service
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Create a carrier service / Create a carrier service 
    remote isolated function createsACarrierService(string apiVersion, ApiVersionCarrierServicesJsonBody payload, string? xShopifyAccessToken = ()) returns CreateCarrierService|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/carrier_services.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        CreateCarrierService response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Retrieves a single carrier service
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve a single carrier service / Retrieve a single carrier service 
    remote isolated function retrievesASingleCarrierService(string apiVersion, string carrierServiceId, string? xShopifyAccessToken = ()) returns SingleCarrierService|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/carrier_services/${getEncodedUri(carrierServiceId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        SingleCarrierService response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Modify an existing CarrierService
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Update a carrier service / Update a carrier service 
    remote isolated function modifyAnExistingCarrierservice(string apiVersion, string carrierServiceId, CarrierServicescarrierServiceIdJsonBody payload, string? xShopifyAccessToken = ()) returns UpdateCarrierService|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/carrier_services/${getEncodedUri(carrierServiceId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        UpdateCarrierService response = check self.clientEp->put(resourcePath, request, httpHeaders);
        return response;
    }
    # Deletes a carrier service
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Delete a carrier service / Delete a carrier service 
    remote isolated function deletesACarrierService(string apiVersion, string carrierServiceId, string payload, string? xShopifyAccessToken = ()) returns json|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/carrier_services/${getEncodedUri(carrierServiceId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        json response = check self.clientEp->delete(resourcePath, request, httpHeaders);
        return response;
    }
    # Creates a fulfillment for one or many fulfillment orders
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Create a fulfillment for the fulfillment order line items specified / Creates a fulfillment for all fulfillment order line items if `fulfillment_order_line_items` is left blank / Create a fulfillment for the fulfillment order line items specified / Creates a fulfillment for all fulfillment order line items if `fulfillment_order_line_items` is left blank 
    remote isolated function createsAFulfillmentForOneOrManyFulfillmentOrders(string apiVersion, CreateOrderFulfillment payload, string? xShopifyAccessToken = ()) returns CreateFulfillmentOrder|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/fulfillments.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        CreateFulfillmentOrder response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Cancels a fulfillment
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Cancel a fulfillment / Cancel a fulfillment 
    remote isolated function cancelsAFulfillment(string apiVersion, string fulfillmentId, record{} payload, string? xShopifyAccessToken = ()) returns CancelFulfillment|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/fulfillments/${getEncodedUri(fulfillmentId)}/cancel.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        CancelFulfillment response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Updates the tracking information for a fulfillment
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Update the tracking information for a fulfillment / Update the tracking information for a fulfillment 
    remote isolated function updatesTheTrackingInformationForAFulfillment(string apiVersion, string fulfillmentId, FulfillmentIdUpdateTrackingJsonBody payload, string? xShopifyAccessToken = ()) returns Fulfillment|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/fulfillments/${getEncodedUri(fulfillmentId)}/update_tracking.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        Fulfillment response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Retrieves fulfillments associated with a fulfillment order
    #
    # + apiVersion - The API version
    # + fulfillment_order_id - The ID of the fulfillment order that is associated with the fulfillments. 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve a list of all fulfillments for a fulfillment order / Retrieve a list of all fulfillments for a fulfillment order 
    remote isolated function retrievesFulfillmentsAssociatedWithAFulfillmentOrder(string apiVersion, string fulfillmentOrderId, string? fulfillment_order_id = (), string? xShopifyAccessToken = ()) returns FulfillmentList|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/fulfillment_orders/${getEncodedUri(fulfillmentOrderId)}/fulfillments.json`;
        map<anydata> queryParam = {"fulfillment_order_id": fulfillment_order_id};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        FulfillmentList response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Retrieves fulfillments associated with an order
    #
    # + apiVersion - The API version
    # + created_at_max - Show fulfillments created before date (format: 2014-04-25T16:15:47-04:00). 
    # + created_at_min - Show fulfillments created after date (format: 2014-04-25T16:15:47-04:00). 
    # + fields - A comma-separated list of fields to include in the response. 
    # + 'limit - Limit the amount of results.(default: 50)(maximum: 250) 
    # + since_id - Restrict results to after the specified ID. 
    # + updated_at_max - Show fulfillments last updated before date (format: 2014-04-25T16:15:47-04:00). 
    # + updated_at_min - Show fulfillments last updated after date (format: 2014-04-25T16:15:47-04:00). 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve a list of all fulfillments for an order / Retrieve all fulfillments after the specified ID / Retrieve a list of all fulfillments for an order / Retrieve all fulfillments after the specified ID 
    remote isolated function retrievesFulfillmentsAssociatedWithAnOrder(string apiVersion, string orderId, string? created_at_max = (), string? created_at_min = (), string? fields = (), string? 'limit = (), string? since_id = (), string? updated_at_max = (), string? updated_at_min = (), string? xShopifyAccessToken = ()) returns FulfillmentListForOrder|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/orders/${getEncodedUri(orderId)}/fulfillments.json`;
        map<anydata> queryParam = {"created_at_max": created_at_max, "created_at_min": created_at_min, "fields": fields, "limit": 'limit, "since_id": since_id, "updated_at_max": updated_at_max, "updated_at_min": updated_at_min};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        FulfillmentListForOrder response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Receive a single Fulfillment
    #
    # + apiVersion - The API version
    # + fields - Comma-separated list of fields to include in the response. 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve a specific fulfillment / Retrieve a specific fulfillment 
    remote isolated function receiveASingleFulfillment(string apiVersion, string orderId, string fulfillmentId, string? fields = (), string? xShopifyAccessToken = ()) returns SingleFulfillment|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/orders/${getEncodedUri(orderId)}/fulfillments/${getEncodedUri(fulfillmentId)}.json`;
        map<anydata> queryParam = {"fields": fields};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        SingleFulfillment response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    #         Retrieves a count of fulfillments associated with a specific order
    #
    # + apiVersion - The API version
    # + created_at_min - Count fulfillments created after date (format: 2014-04-25T16:15:47-04:00). 
    # + created_at_max - Count fulfillments created before date (format: 2014-04-25T16:15:47-04:00). 
    # + updated_at_min - Count fulfillments last updated after date (format: 2014-04-25T16:15:47-04:00). 
    # + updated_at_max - Count fulfillments last updated before date (format: 2014-04-25T16:15:47-04:00). 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Count the total number of fulfillments for an order / Count the total number of fulfillments for an order 
    remote isolated function retrievesACountOfFulfillmentsAssociatedWithASpecificOrder(string apiVersion, string orderId, string? created_at_min = (), string? created_at_max = (), string? updated_at_min = (), string? updated_at_max = (), string? xShopifyAccessToken = ()) returns ObjectCount|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/orders/${getEncodedUri(orderId)}/fulfillments/count.json`;
        map<anydata> queryParam = {"created_at_min": created_at_min, "created_at_max": created_at_max, "updated_at_min": updated_at_min, "updated_at_max": updated_at_max};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        ObjectCount response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Retrieves a list of fulfillment events for a specific fulfillment
    #
    # + apiVersion - The API version
    # + fulfillment_id - The ID of the fulfillment that\'s associated with the fulfillment event. 
    # + order_id - The ID of the order that\'s associated with the fulfillment event. 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve a list of all the fulfillment events that are associated with a specific fulfillment / Retrieve a list of all the fulfillment events that are associated with a specific fulfillment 
    remote isolated function retrievesAListOfFulfillmentEventsForASpecificFulfillment(string apiVersion, string orderId, string fulfillmentId, string? fulfillment_id = (), string? order_id = (), string? xShopifyAccessToken = ()) returns FulfillmentEvents|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/orders/${getEncodedUri(orderId)}/fulfillments/${getEncodedUri(fulfillmentId)}/events.json`;
        map<anydata> queryParam = {"fulfillment_id": fulfillment_id, "order_id": order_id};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        FulfillmentEvents response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Creates a fulfillment event
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Create a fulfillment event / Create a fulfillment event 
    remote isolated function createsAFulfillmentEvent(string apiVersion, string orderId, string fulfillmentId, FulfillmentIdEventsJsonBody payload, string? xShopifyAccessToken = ()) returns CreateFulfillmentEvent|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/orders/${getEncodedUri(orderId)}/fulfillments/${getEncodedUri(fulfillmentId)}/events.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        CreateFulfillmentEvent response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Retrieves a specific fulfillment event
    #
    # + apiVersion - The API version
    # + event_id - The ID of the fulfillment event. 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve a specific fulfillment event / Retrieve a specific fulfillment event 
    remote isolated function retrievesASpecificFulfillmentEvent(string apiVersion, string orderId, string fulfillmentId, string eventId, string? event_id = (), string? xShopifyAccessToken = ()) returns FulfillmentEventResponse|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/orders/${getEncodedUri(orderId)}/fulfillments/${getEncodedUri(fulfillmentId)}/events/${getEncodedUri(eventId)}.json`;
        map<anydata> queryParam = {"event_id": event_id};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        FulfillmentEventResponse response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Deletes a fulfillment event
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Delete a fulfillment event / Delete a fulfillment event 
    remote isolated function deletesAFulfillmentEvent(string apiVersion, string orderId, string fulfillmentId, string eventId, string payload, string? xShopifyAccessToken = ()) returns json|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/orders/${getEncodedUri(orderId)}/fulfillments/${getEncodedUri(fulfillmentId)}/events/${getEncodedUri(eventId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        json response = check self.clientEp->delete(resourcePath, request, httpHeaders);
        return response;
    }
    # Cancel a fulfillment order
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Cancel a fulfillment order / Cancel a fulfillment order 
    remote isolated function cancelAFulfillmentOrder(string apiVersion, string fulfillmentOrderId, FulfillmentOrderIdCancelJsonBody payload, string? xShopifyAccessToken = ()) returns CancelFulfillmentOrder|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/fulfillment_orders/${getEncodedUri(fulfillmentOrderId)}/cancel.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        CancelFulfillmentOrder response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Marks a fulfillment order as incomplete
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Transition a fulfillment order from in progress to incomplete / Transition a fulfillment order from in progress to incomplete 
    remote isolated function marksAFulfillmentOrderAsIncomplete(string apiVersion, string fulfillmentOrderId, FulfillmentOrderIdCloseJsonBody payload, string? xShopifyAccessToken = ()) returns TransitionFulfillmentOrder|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/fulfillment_orders/${getEncodedUri(fulfillmentOrderId)}/close.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        TransitionFulfillmentOrder response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Applies a fulfillment hold on an open fulfillment order
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Move a fulfillment order to a new location / Move a fulfillment order to a new location 
    remote isolated function appliesAFulfillmentHoldOnAnOpenFulfillmentOrder(string apiVersion, string fulfillmentOrderId, FulfillmentOrderIdHoldJsonBody payload, string? xShopifyAccessToken = ()) returns MoveFulfillmentOrderResponse|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/fulfillment_orders/${getEncodedUri(fulfillmentOrderId)}/hold.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        MoveFulfillmentOrderResponse response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Moves a fulfillment order to a new location
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Move a fulfillment order to a new location / Move a fulfillment order to a new location 
    remote isolated function movesAFulfillmentOrderToANewLocation(string apiVersion, string fulfillmentOrderId, FulfillmentOrderIdMoveJsonBody payload, string? xShopifyAccessToken = ()) returns MoveFulfillmentOrderResponse|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/fulfillment_orders/${getEncodedUri(fulfillmentOrderId)}/move.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        MoveFulfillmentOrderResponse response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Marks the fulfillment order as open
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Move a fulfillment order to a new location / Move a fulfillment order to a new location 
    remote isolated function marksTheFulfillmentOrderAsOpen(string apiVersion, string fulfillmentOrderId, FulfillmentOrderIdOpenJsonBody payload, string? xShopifyAccessToken = ()) returns MoveFulfillmentOrderResponse|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/fulfillment_orders/${getEncodedUri(fulfillmentOrderId)}/open.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        MoveFulfillmentOrderResponse response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Releases the fulfillment hold on a fulfillment order
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Move a fulfillment order to a new location / Move a fulfillment order to a new location 
    remote isolated function releasesTheFulfillmentHoldOnAFulfillmentOrder(string apiVersion, string fulfillmentOrderId, FulfillmentOrderIdReleaseHoldJsonBody payload, string? xShopifyAccessToken = ()) returns MoveFulfillmentOrderResponse|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/fulfillment_orders/${getEncodedUri(fulfillmentOrderId)}/release_hold.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        MoveFulfillmentOrderResponse response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Reschedules the fulfill_at time of a scheduled fulfillment order
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Move a fulfillment order to a new location / Move a fulfillment order to a new location 
    remote isolated function reschedulesTheFulfillAtTimeOfAScheduledFulfillmentOrder(string apiVersion, string fulfillmentOrderId, FulfillmentOrderIdRescheduleJsonBody payload, string? xShopifyAccessToken = ()) returns MoveFulfillmentOrderResponse|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/fulfillment_orders/${getEncodedUri(fulfillmentOrderId)}/reschedule.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        MoveFulfillmentOrderResponse response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Sets deadline for fulfillment orders
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Move a fulfillment order to a new location / Move a fulfillment order to a new location 
    remote isolated function setsDeadlineForFulfillmentOrders(string apiVersion, FulfillmentOrdersSetFulfillmentOrdersDeadlineJsonBody payload, string? xShopifyAccessToken = ()) returns MoveFulfillmentOrderResponse|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/fulfillment_orders/set_fulfillment_orders_deadline.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        MoveFulfillmentOrderResponse response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Retrieves a specific fulfillment order
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Get a single fulfillment order by its ID / Get a single fulfillment order by its ID 
    remote isolated function retrievesASpecificFulfillmentOrder(string apiVersion, string fulfillmentOrderId, string? xShopifyAccessToken = ()) returns SingleFulfillmentOrder|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/fulfillment_orders/${getEncodedUri(fulfillmentOrderId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        SingleFulfillmentOrder response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Retrieves a list of fulfillment orders for a specific order
    #
    # + apiVersion - The API version
    # + order_id - The ID of the order that is associated with the fulfillment orders. 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve a list of all fulfillment orders for an order / Retrieve a list of all fulfillment orders for an order 
    remote isolated function retrievesAListOfFulfillmentOrdersForASpecificOrder(string apiVersion, string orderId, string? order_id = (), string? xShopifyAccessToken = ()) returns FulfillmentOrdersList|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/orders/${getEncodedUri(orderId)}/fulfillment_orders.json`;
        map<anydata> queryParam = {"order_id": order_id};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        FulfillmentOrdersList response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Sends a fulfillment request
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Sends a fulfillment request to the fulfillment service of a fulfillment order for the specified line items / Sends a fulfillment request to the fulfillment service for all line items on the fulfillment order if fulfillment_order_line_items is left blank / Sends a fulfillment request to the fulfillment service of a fulfillment order for the specified line items / Sends a fulfillment request to the fulfillment service for all line items on the fulfillment order if fulfillment_order_line_items is left blank 
    remote isolated function sendsAFulfillmentRequest(string apiVersion, string fulfillmentOrderId, FulfillmentOrderIdFulfillmentRequestJsonBody payload, string? xShopifyAccessToken = ()) returns OriginalFulfillmentOrder|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/fulfillment_orders/${getEncodedUri(fulfillmentOrderId)}/fulfillment_request.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        OriginalFulfillmentOrder response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Accepts a fulfillment request
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Accepts a fulfillment request sent to a fulfillment service and updates the fulfillment order / Accepts a fulfillment request sent to a fulfillment service and updates the fulfillment order 
    remote isolated function acceptsAFulfillmentRequest(string apiVersion, string fulfillmentOrderId, FulfillmentRequestAcceptJsonBody payload, string? xShopifyAccessToken = ()) returns AcceptFulfillmentResponse|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/fulfillment_orders/${getEncodedUri(fulfillmentOrderId)}/fulfillment_request/accept.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        AcceptFulfillmentResponse response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Rejects a fulfillment request
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Rejects a fulfillment request sent to a fulfillment service and updates the fulfillment order / Rejects a fulfillment request sent to a fulfillment service and updates the fulfillment order 
    remote isolated function rejectsAFulfillmentRequest(string apiVersion, string fulfillmentOrderId, FulfillmentRequestRejectJsonBody payload, string? xShopifyAccessToken = ()) returns RejectFulfillmentResponse|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/fulfillment_orders/${getEncodedUri(fulfillmentOrderId)}/fulfillment_request/reject.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        RejectFulfillmentResponse response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Receive a list of all FulfillmentServices
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - List your app's fulfillment services / List all of the shop's fulfillment services / List your app's fulfillment services / List all of the shop's fulfillment services 
    remote isolated function receiveAListOfAllFulfillmentservices(string apiVersion, string? scope = (), string? xShopifyAccessToken = ()) returns FulfillmentServicesList|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/fulfillment_services.json`;
        map<anydata> queryParam = {"scope": scope};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        FulfillmentServicesList response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Create a new FulfillmentService
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Create a fulfillment service / Create a fulfillment service 
    remote isolated function createANewFulfillmentservice(string apiVersion, ApiVersionFulfillmentServicesJsonBody payload, string? xShopifyAccessToken = ()) returns CreateFulfillmentService|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/fulfillment_services.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        CreateFulfillmentService response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Receive a single FulfillmentService
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Get a single fulfillment service by its ID / Get a single fulfillment service by its ID 
    remote isolated function receiveASingleFulfillmentservice(string apiVersion, string fulfillmentServiceId, string? xShopifyAccessToken = ()) returns SingleFulfillmentService|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/fulfillment_services/${getEncodedUri(fulfillmentServiceId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        SingleFulfillmentService response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Modify an existing FulfillmentService
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Update a fulfillment service / Update a fulfillment service 
    remote isolated function modifyAnExistingFulfillmentservice(string apiVersion, string fulfillmentServiceId, FulfillmentServicesfulfillmentServiceIdJsonBody payload, string? xShopifyAccessToken = ()) returns UpdateFulfillmentService|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/fulfillment_services/${getEncodedUri(fulfillmentServiceId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        UpdateFulfillmentService response = check self.clientEp->put(resourcePath, request, httpHeaders);
        return response;
    }
    # Remove an existing FulfillmentService
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Destroy a fulfillment service / Destroy a fulfillment service 
    remote isolated function removeAnExistingFulfillmentservice(string apiVersion, string fulfillmentServiceId, string payload, string? xShopifyAccessToken = ()) returns json|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/fulfillment_services/${getEncodedUri(fulfillmentServiceId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        json response = check self.clientEp->delete(resourcePath, request, httpHeaders);
        return response;
    }
    # Retrieves a list of locations that a fulfillment order can potentially move to.
    #
    # + apiVersion - The API version
    # + fulfillment_order_id - The ID of the fulfillment order. 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve a list of locations that a fulfillment order can potentially move to. / Retrieve a list of locations that a fulfillment order can potentially move to. 
    remote isolated function retrievesAListOfLocationsThatAFulfillmentOrderCanPotentiallyMoveTo(string apiVersion, string fulfillmentOrderId, string? fulfillment_order_id = (), string? xShopifyAccessToken = ()) returns LocationsList|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/fulfillment_orders/${getEncodedUri(fulfillmentOrderId)}/locations_for_move.json`;
        map<anydata> queryParam = {"fulfillment_order_id": fulfillment_order_id};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        LocationsList response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Return the current balance
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieves the account's current balance. / Retrieves the account's current balance. 
    remote isolated function returnTheCurrentBalance(string apiVersion, string? xShopifyAccessToken = ()) returns AccountCurrentBalance|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/shopify_payments/balance.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        AccountCurrentBalance response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Return a list of all disputes
    #
    # + apiVersion - The API version
    # + since_id - Return only disputes after the specified ID. 
    # + last_id - Return only disputes before the specified ID. 
    # + status - Return only disputes with the specified status. 
    # + initiated_at - Return only disputes with the specified `initiated_at` date ([ISO 8601][1] format). 
    # [1]: https://en.wikipedia.org/wiki/ISO_8601
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve all disputes ordered newest to oldest / Retrieve all won disputes / Retrieve all disputes initiated on 2013-05-03 / Retrieve all disputes ordered newest to oldest / Retrieve all won disputes / Retrieve all disputes initiated on 2013-05-03 
    remote isolated function returnAListOfAllDisputes(string apiVersion, string? since_id = (), string? last_id = (), string? status = (), string? initiated_at = (), string? xShopifyAccessToken = ()) returns Disputes|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/shopify_payments/disputes.json`;
        map<anydata> queryParam = {"since_id": since_id, "last_id": last_id, "status": status, "initiated_at": initiated_at};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Disputes response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Return a single dispute
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieves a single dispute by ID / Retrieves a single dispute by ID 
    remote isolated function returnASingleDispute(string apiVersion, string disputeId, string? xShopifyAccessToken = ()) returns SingleDispute|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/shopify_payments/disputes/${getEncodedUri(disputeId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        SingleDispute response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Returns evidence associated with the dispute
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Returns evidence associated with the dispute 
    remote isolated function returnsEvidenceAssociatedWithTheDispute(string apiVersion, string disputeId, string? xShopifyAccessToken = ()) returns DisputeEvidenceResponse|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/shopify_payments/disputes/${getEncodedUri(disputeId)}/dispute_evidences.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        DisputeEvidenceResponse response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Updates dispute evidence associated with the dispute ID.
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Updates dispute evidence associated with the dispute ID 
    remote isolated function returnsEvidenceAssociatedWithTheDisputeCopy(string apiVersion, string disputeId, DisputeIdDisputeEvidencesJsonBody payload, string? xShopifyAccessToken = ()) returns DisputeEvidenceResponse|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/shopify_payments/disputes/${getEncodedUri(disputeId)}/dispute_evidences.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        DisputeEvidenceResponse response = check self.clientEp->put(resourcePath, request, httpHeaders);
        return response;
    }
    # Upload a file to a dispute
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Upload a file to a dispute 
    remote isolated function uploadAFileToADispute(string apiVersion, string disputeId, DisputeIdDisputeFileUploadsJsonBody payload, string? xShopifyAccessToken = ()) returns DisputeFileUpload|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/shopify_payments/disputes/${getEncodedUri(disputeId)}/dispute_file_uploads.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        DisputeFileUpload response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Delete a dispute evidence file
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    remote isolated function deleteADisputeEvidenceFile(string apiVersion, string disputeId, string disputeFileUploadId, string? xShopifyAccessToken = ()) returns error? {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/shopify_payments/disputes/${getEncodedUri(disputeId)}/dispute_file_uploads/${getEncodedUri(disputeFileUploadId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }
    # Return a list of all payouts
    #
    # + apiVersion - The API version
    # + since_id - Filter response to payouts exclusively after the specified ID. 
    # + last_id - Filter response to payouts exclusively before the specified ID 
    # + date_min - Filter response to payouts inclusively after the specified date. 
    # + date_max - Filter response to payouts inclusively before the specified date. 
    # + date - Filter response to payouts on the specified date. 
    # + status - Filter response to payouts with the specified status 
    # + xShopifyAccessToken - The access token for the shop
    # + return - List all payouts up to a specific date / List all payouts ordered newest to oldest / List all payouts up to a specific date / List all payouts ordered newest to oldest 
    remote isolated function returnAListOfAllPayouts(string apiVersion, string? since_id = (), string? last_id = (), string? date_min = (), string? date_max = (), string? date = (), string? status = (), string? xShopifyAccessToken = ()) returns PayoutsList|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/shopify_payments/payouts.json`;
        map<anydata> queryParam = {"since_id": since_id, "last_id": last_id, "date_min": date_min, "date_max": date_max, "date": date, "status": status};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        PayoutsList response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Return a single payout
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieves a single payout by id. / Retrieves a single payout by id. 
    remote isolated function returnASinglePayout(string apiVersion, string payoutId, string? xShopifyAccessToken = ()) returns SinglePayout|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/shopify_payments/payouts/${getEncodedUri(payoutId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        SinglePayout response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Return a list of all balance transactions
    #
    # + apiVersion - The API version
    # + since_id - Filter response to transactions exclusively after the specified ID. 
    # + last_id - Filter response to transactions exclusively before the specified ID 
    # + test - Filter response to transactions placed in test mode. 
    # + payout_id - Filter response to transactions paid out in the specified payout. 
    # + payout_status - Filter response to transactions with the specified payout status 
    # + xShopifyAccessToken - The access token for the shop
    # + return - List all transactions associated with a payout. / List all transactions associated with a payout. 
    remote isolated function returnAListOfAllBalanceTransactions(string apiVersion, string? since_id = (), string? last_id = (), string? test = (), string? payout_id = (), string? payout_status = (), string? xShopifyAccessToken = ()) returns TransactionsListForPayout|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/shopify_payments/balance/transactions.json`;
        map<anydata> queryParam = {"since_id": since_id, "last_id": last_id, "test": test, "payout_id": payout_id, "payout_status": payout_status};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        TransactionsListForPayout response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Receive a list of all Countries
    #
    # + apiVersion - The API version
    # + since_id - Restrict results to after the specified ID. 
    # + fields - Show only certain fields, specified by a comma-separated list of field names. 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve all countries after the specified ID / Retrieve all countries / Retrieve all countries after the specified ID / Retrieve all countries 
    remote isolated function receiveAListOfAllCountries(string apiVersion, string? since_id = (), string? fields = (), string? xShopifyAccessToken = ()) returns CountriesList|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/countries.json`;
        map<anydata> queryParam = {"since_id": since_id, "fields": fields};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        CountriesList response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Creates a country
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Create a country using a custom tax rate  / Create a country using Shopify's tax rate for it / Create a country using a custom tax rate  / Create a country using Shopify's tax rate for it 
    remote isolated function createsACountry(string apiVersion, ApiVersionCountriesJsonBody payload, string? xShopifyAccessToken = ()) returns CreateCountry|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/countries.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        CreateCountry response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Retrieves a specific county
    #
    # + apiVersion - The API version
    # + fields - Show only certain fields, specified by a comma-separated list of field names. 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve a specific country by its ID / Retrieve a specific country by its ID 
    remote isolated function retrievesASpecificCounty(string apiVersion, string countryId, string? fields = (), string? xShopifyAccessToken = ()) returns CountryResponse|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/countries/${getEncodedUri(countryId)}.json`;
        map<anydata> queryParam = {"fields": fields};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        CountryResponse response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Updates an existing country
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Update a country's tax rate / Update a country's tax rate 
    remote isolated function updatesAnExistingCountry(string apiVersion, string countryId, CountriescountryIdJsonBody payload, string? xShopifyAccessToken = ()) returns UpdateCountryTaxRate|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/countries/${getEncodedUri(countryId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        UpdateCountryTaxRate response = check self.clientEp->put(resourcePath, request, httpHeaders);
        return response;
    }
    # Remove an existing Country
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Delete a country / Delete a country 
    remote isolated function removeAnExistingCountry(string apiVersion, string countryId, string payload, string? xShopifyAccessToken = ()) returns json|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/countries/${getEncodedUri(countryId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        json response = check self.clientEp->delete(resourcePath, request, httpHeaders);
        return response;
    }
    # Retrieves a count of countries
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Count all countries / Count all countries 
    remote isolated function retrievesACountOfCountries(string apiVersion, string? xShopifyAccessToken = ()) returns CountriesCount|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/countries/count.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        CountriesCount response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Retrieves a list of currencies enabled on a shop
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve a list of currencies enabled on a shop / Retrieve a list of currencies enabled on a shop 
    remote isolated function retrievesAListOfCurrenciesEnabledOnAShop(string apiVersion, string? xShopifyAccessToken = ()) returns CurrenciesList|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/currencies.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        CurrenciesList response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Retrieves a list of the shop's policies
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve a list of the shop's policies / Retrieve a list of the shop's policies 
    remote isolated function retrievesAListOfTheShopSPolicies(string apiVersion, string? xShopifyAccessToken = ()) returns ShopPoliciesList|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/policies.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        ShopPoliciesList response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Retrieves a list of provinces for a country
    #
    # + apiVersion - The API version
    # + since_id - Restrict results to after the specified ID. 
    # + fields - Show only certain fields, specified by a comma-separated list of fields names. 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve all provinces for a country / Retrieve all provinces for a country after the specified ID / Retrieve all provinces for a country / Retrieve all provinces for a country after the specified ID 
    remote isolated function retrievesAListOfProvincesForACountry(string apiVersion, string countryId, string? since_id = (), string? fields = (), string? xShopifyAccessToken = ()) returns ProvincesList|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/countries/${getEncodedUri(countryId)}/provinces.json`;
        map<anydata> queryParam = {"since_id": since_id, "fields": fields};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        ProvincesList response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Retrieves a single province for a country
    #
    # + apiVersion - The API version
    # + fields - Show only certain fields, specified by a comma-separated list of field names. 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve a single province / Retrieve a single province 
    remote isolated function retrievesASingleProvinceForACountry(string apiVersion, string countryId, string provinceId, string? fields = (), string? xShopifyAccessToken = ()) returns SingleProvince|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/countries/${getEncodedUri(countryId)}/provinces/${getEncodedUri(provinceId)}.json`;
        map<anydata> queryParam = {"fields": fields};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        SingleProvince response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Updates an existing province for a country
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Update a province's tax rate / Update a province's tax rate 
    remote isolated function updatesAnExistingProvinceForACountry(string apiVersion, string countryId, string provinceId, ProvincesprovinceIdJsonBody payload, string? xShopifyAccessToken = ()) returns UpdateProvinceResponse|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/countries/${getEncodedUri(countryId)}/provinces/${getEncodedUri(provinceId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        UpdateProvinceResponse response = check self.clientEp->put(resourcePath, request, httpHeaders);
        return response;
    }
    # Retrieves a count of provinces for a country
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Count all provinces / Count all provinces 
    remote isolated function retrievesACountOfProvincesForACountry(string apiVersion, string countryId, string? xShopifyAccessToken = ()) returns ProvincesCount|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/countries/${getEncodedUri(countryId)}/provinces/count.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        ProvincesCount response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Receive a list of all ShippingZones
    #
    # + apiVersion - The API version
    # + fields - Show only specific fields by providing a comma-separated list of field names.
    # + xShopifyAccessToken - The access token for the shop
    remote isolated function receiveAListOfAllShippingzones(string apiVersion, string? fields = (), string? xShopifyAccessToken = ()) returns ShippingZonesList|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/shipping_zones.json`;
        map<anydata> queryParam = {"fields": fields};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        ShippingZonesList response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Retrieves the shop's configuration
    #
    # + apiVersion - The API version
    # + fields - A comma-separated list of fields to include in the response. 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve the shop's configuration / Retrieve the shop's configuration 
    remote isolated function retrievesTheShopSConfiguration(string apiVersion, string? fields = (), string? xShopifyAccessToken = ()) returns ShopConfigurations|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/shop.json`;
        map<anydata> queryParam = {"fields": fields};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        ShopConfigurations response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Retrieves a list of tender transactions
    #
    # + apiVersion - The API version
    # + 'limit - The maximum number of results to retrieve.(default: 50)(maximum: 250) 
    # + since_id - Retrieve only transactions after the specified ID. 
    # + processed_at_min - Show tender transactions processed\_at or after the specified date. 
    # + processed_at_max - Show tender transactions processed\_at or before the specified date. 
    # + processed_at - Show tender transactions processed at the specified date. 
    # + 'order - Show tender transactions ordered by processed\_at in ascending or descending order. 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve tender transactions processed_at the specified date / Retrieve tender transactions after the specified ID / Retrieve tender transactions ordered by <code>processed_at</code> / Retrieve tender transactions processed_at or after the specified date / Retrieve all tender transactions / Retrieve tender transactions processed_at or before the specified date / Retrieve tender transactions processed_at the specified date / Retrieve tender transactions after the specified ID / Retrieve tender transactions ordered by <code>processed_at</code> / Retrieve tender transactions processed_at or after the specified date / Retrieve all tender transactions / Retrieve tender transactions processed_at or before the specified date 
    remote isolated function retrievesAListOfTenderTransactions(string apiVersion, string? 'limit = (), string? since_id = (), string? processed_at_min = (), string? processed_at_max = (), string? processed_at = (), string? 'order = (), string? xShopifyAccessToken = ()) returns TenderTransactions|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/tender_transactions.json`;
        map<anydata> queryParam = {"limit": 'limit, "since_id": since_id, "processed_at_min": processed_at_min, "processed_at_max": processed_at_max, "processed_at": processed_at, "order": 'order};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        TenderTransactions response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Retrieves a list of webhooks
    #
    # + apiVersion - The API version
    # + address - Retrieve webhook subscriptions that send the POST request to this URI. 
    # + created_at_max - Retrieve webhook subscriptions that were created before a given date and time (format: 2014-04-25T16:15:47-04:00). 
    # + created_at_min - Retrieve webhook subscriptions that were created after a given date and time (format: 2014-04-25T16:15:47-04:00). 
    # + fields - Comma-separated list of the properties you want returned for each item in the result list. Use this parameter to restrict the returned list of items to only those properties you specify. 
    # + 'limit - Maximum number of webhook subscriptions that should be returned. Setting this parameter outside the maximum range will return an error.(default: 50)(maximum: 250) 
    # + since_id - Restrict the returned list to webhook subscriptions whose id is greater than the specified since\_id. 
    # + topic - Show webhook subscriptions with a given topic. For a list of valid values, refer to the [`topic` property](#topic-property-).> 
    # + updated_at_min - Retrieve webhooks that were updated before a given date and time (format: 2014-04-25T16:15:47-04:00). 
    # + updated_at_max - Retrieve webhooks that were updated after a given date and time (format: 2014-04-25T16:15:47-04:00). 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve a list of all webhook subscriptions for your shop / Retrieve a list of all webhook subscriptions for your shop after a specified <code>id</code> / Retrieve a list of all webhook subscriptions for your shop / Retrieve a list of all webhook subscriptions for your shop after a specified <code>id</code> 
    remote isolated function retrievesAListOfWebhooks(string apiVersion, string? address = (), string? created_at_max = (), string? created_at_min = (), string? fields = (), string? 'limit = (), string? since_id = (), string? topic = (), string? updated_at_min = (), string? updated_at_max = (), string? xShopifyAccessToken = ()) returns SubscriptionsList|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/webhooks.json`;
        map<anydata> queryParam = {"address": address, "created_at_max": created_at_max, "created_at_min": created_at_min, "fields": fields, "limit": 'limit, "since_id": since_id, "topic": topic, "updated_at_min": updated_at_min, "updated_at_max": updated_at_max};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        SubscriptionsList response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Create a new Webhook
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Subscribe to order creation webhooks / Subscribe to order creation webhooks 
    remote isolated function createANewWebhook(string apiVersion, CreateWebhook payload, string? xShopifyAccessToken = ()) returns SubscribeOrderCreation|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/webhooks.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        SubscribeOrderCreation response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Receive a single Webhook
    #
    # + apiVersion - The API version
    # + fields - Comma-separated list of the properties you want returned for each item in the result list. Use this parameter to restrict the returned list of items to only those properties you specify. 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve a single webhook by its <code>id</code> / Retrieve a single webhook by its <code>id</code> 
    remote isolated function receiveASingleWebhook(string apiVersion, string webhookId, string? fields = (), string? xShopifyAccessToken = ()) returns SingleWebhook|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/webhooks/${getEncodedUri(webhookId)}.json`;
        map<anydata> queryParam = {"fields": fields};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        SingleWebhook response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Modify an existing Webhook
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Update a webhook subscription so that it POSTs to a different address / Update a webhook subscription so that it POSTs to a different address 
    remote isolated function modifyAnExistingWebhook(string apiVersion, string webhookId, UpdateWebhook payload, string? xShopifyAccessToken = ()) returns WebhookObject|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/webhooks/${getEncodedUri(webhookId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        WebhookObject response = check self.clientEp->put(resourcePath, request, httpHeaders);
        return response;
    }
    # Remove an existing Webhook
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Delete an existing webhook from a shop / Delete an existing webhook from a shop 
    remote isolated function removeAnExistingWebhook(string apiVersion, string webhookId, string payload, string? xShopifyAccessToken = ()) returns json|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/webhooks/${getEncodedUri(webhookId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        json response = check self.clientEp->delete(resourcePath, request, httpHeaders);
        return response;
    }
    # Receive a count of all Webhooks
    #
    # + apiVersion - The API version
    # + address - Retrieve webhook subscriptions that send the POST request to this URI. 
    # + topic - Show webhook subscriptions with a given topic. For a list of valid values, refer to the [`topic` property](#topic-property-).> 
    # + xShopifyAccessToken - The access token for the shop
    # + return - Count all of the webhook subscriptions for the topic <code>orders/create</code> / Count all of the webhook subscriptions for your shop / Count all of the webhook subscriptions for the topic <code>orders/create</code> / Count all of the webhook subscriptions for your shop 
    remote isolated function receiveACountOfAllWebhooks(string apiVersion, string? address = (), string? topic = (), string? xShopifyAccessToken = ()) returns ObjectCount|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/webhooks/count.json`;
        map<anydata> queryParam = {"address": address, "topic": topic};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        ObjectCount response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Retrieves a list of reports
    #
    # + apiVersion - The API version
    # + fields - A comma-separated list of fields to include in the response.
    # + ids - A comma-separated list of report IDs.
    # + 'limit - The amount of results to return.
    # + since_id - Restrict results to after the specified ID.
    # + updated_at_max - Show reports last updated before date. (format: 2014-04-25T16:15:47-04:00)
    # + updated_at_min - Show reports last updated after date. (format: 2014-04-25T16:15:47-04:00)
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieves a list of reports 
    remote isolated function retrievesAListOfReports(string apiVersion, string? fields = (), string? ids = (), string? 'limit = (), string? since_id = (), string? updated_at_max = (), string? updated_at_min = (), string? xShopifyAccessToken = ()) returns InlineResponse200178|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/reports.json`;
        map<anydata> queryParam = {"fields": fields, "ids": ids, "limit": 'limit, "since_id": since_id, "updated_at_max": updated_at_max, "updated_at_min": updated_at_min};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        InlineResponse200178 response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Creates a new report
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Creates a new report 
    remote isolated function createsANewReport(string apiVersion, ApiVersionReportsJsonBody payload, string? xShopifyAccessToken = ()) returns InlineResponse20140|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/reports.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        InlineResponse20140 response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Retrieves a single report
    #
    # + apiVersion - The API version
    # + fields - A comma-separated list of fields to include in the response.
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieves a single report 
    remote isolated function retrievesASingleReport(string apiVersion, string reportId, string? fields = (), string? xShopifyAccessToken = ()) returns InlineResponse200179|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/reports/${getEncodedUri(reportId)}.json`;
        map<anydata> queryParam = {"fields": fields};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        InlineResponse200179 response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Updates a report
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Updates a report 
    remote isolated function updatesAReport(string apiVersion, string reportId, ReportsreportIdJsonBody payload, string? xShopifyAccessToken = ()) returns InlineResponse200180|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/reports/${getEncodedUri(reportId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        InlineResponse200180 response = check self.clientEp->put(resourcePath, request, httpHeaders);
        return response;
    }
    # Deletes a report
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Deletes a report 
    remote isolated function deletesAReport(string apiVersion, string reportId, string payload, string? xShopifyAccessToken = ()) returns json|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/reports/${getEncodedUri(reportId)}.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        request.setPayload(payload, "text/plain");
        json response = check self.clientEp->delete(resourcePath, request, httpHeaders);
        return response;
    }
    # Counts the number of payments attempted on a checkout
    #
    # + apiVersion - The API version
    # + xShopifyAccessToken - The access token for the shop
    # + return - Retrieve the number of payments on a checkout 
    remote isolated function countsTheNumberOfPaymentsAttemptedOnACheckout(string apiVersion, string token, string? xShopifyAccessToken = ()) returns ObjectCount|error {
        string resourcePath = string `/admin/api/${getEncodedUri(apiVersion)}/checkouts/${getEncodedUri(token)}/payments/count.json`;
        map<any> headerValues = {"x-shopify-access-token": xShopifyAccessToken};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        ObjectCount response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
}
